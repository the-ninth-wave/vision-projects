{
  
    
        "post0": {
            "title": "papers ... v17",
            "content": ". training metrics for model_weights_7_50e_lightning . In either case below, the $x$-axis corresponds to time elapsed in minutes, not epochs. There is no smoothing applied. . validation AP 1 . . validation mAP . . setup . pip installs . !pip3 install --quiet &quot;seaborn&quot; . !pip3 install --quiet --upgrade &quot;pytorch-lightning&quot; . |████████████████████████████████| 925 kB 12.8 MB/s |████████████████████████████████| 596 kB 78.1 MB/s |████████████████████████████████| 282 kB 96.6 MB/s |████████████████████████████████| 125 kB 96.4 MB/s |████████████████████████████████| 829 kB 86.0 MB/s |████████████████████████████████| 1.3 MB 72.2 MB/s |████████████████████████████████| 160 kB 85.6 MB/s |████████████████████████████████| 271 kB 88.7 MB/s Building wheel for future (setup.py) ... done . !pip3 install --quiet &quot;torchmetrics&gt;=0.3&quot; &quot;torchvision&quot; . !pip3 install --quiet PyQt5 . |████████████████████████████████| 8.3 MB 11.5 MB/s |████████████████████████████████| 317 kB 87.8 MB/s |████████████████████████████████| 59.9 MB 69 kB/s . !pip3 install --quiet neptune-contrib . |████████████████████████████████| 74 kB 2.7 MB/s |████████████████████████████████| 278 kB 30.4 MB/s |████████████████████████████████| 52 kB 1.7 MB/s |████████████████████████████████| 180 kB 89.0 MB/s |████████████████████████████████| 131 kB 83.7 MB/s |████████████████████████████████| 8.0 MB 81.7 MB/s |████████████████████████████████| 79 kB 10.4 MB/s |████████████████████████████████| 138 kB 96.9 MB/s |████████████████████████████████| 63 kB 2.2 MB/s |████████████████████████████████| 127 kB 96.6 MB/s |████████████████████████████████| 67 kB 7.2 MB/s |████████████████████████████████| 129 kB 92.9 MB/s Building wheel for neptune-contrib (setup.py) ... done Building wheel for neptune-client (setup.py) ... done Building wheel for strict-rfc3339 (setup.py) ... done ERROR: pip&#39;s dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts. datascience 0.10.6 requires folium==0.2.1, but you have folium 0.8.3 which is incompatible. . !pip3 install --quiet --upgrade albumentations . |████████████████████████████████| 102 kB 15.3 MB/s |████████████████████████████████| 47.6 MB 36 kB/s . imports . import os import sys import xml.etree.ElementTree as ET import re import time import itertools import logging import json from collections import OrderedDict import random import math import matplotlib import matplotlib.pyplot as plt import numpy as np import pytorch_lightning as pl from pytorch_lightning import LightningModule, Trainer from pytorch_lightning.metrics.functional import accuracy import seaborn as sns import tabulate import torch import torch.nn as nn from torch.nn import functional as F import torch.optim as optim import torch.utils.data from torch.utils.data import DataLoader, random_split from torchvision import datasets, transforms from IPython.display import HTML, display, set_matplotlib_formats from PIL import Image, ImageDraw from pytorch_lightning.callbacks import LearningRateMonitor, ModelCheckpoint import cv2 import matplotlib.pyplot as plt set_matplotlib_formats(&quot;svg&quot;, &quot;pdf&quot;) # For export matplotlib.rcParams[&quot;lines.linewidth&quot;] = 2.0 sns.reset_orig() %matplotlib inline . . global parameters, paths . AVAIL_GPUS = min(1, torch.cuda.device_count()) PDF_PATH = &quot;drive/Othercomputers/Normandie/GitHub/home/datasets/percolation_papers_2/data/papers/pdf&quot; DATASET_DIR = &quot;drive/Othercomputers/Normandie/GitHub/home/datasets/percolation_papers_2/data/papers&quot; DATASET_DIR_DIR = &quot;drive/Othercomputers/Normandie/GitHub/home/datasets/percolation_papers_2/data&quot; . . . . paper collection, paper, and page objects . pre-torch, data is organized in three python classes, paper_collection_object, paper_object page_object. We can instantiate a paper_collection object given a list of paper names, along with an implicit path to the data. . . class ... paper_collection_object . args of __init__ . list_of_filenames | . attributes . paper_list | pdf_list | num_papers | pages_path | . labels_path | pages | labels | binary_txt_path | . non_empt_indices | total_pages | paper_ranges | . import pandas as pd class paper_collection_object(): def __init__(self, list_of_filenames ): self.paper_list = list_of_filenames # without suffixes self.pdf_list = [ filename + &#39;.pdf&#39; for filename in self.paper_list ] self.num_papers = len( list_of_filenames ) self.pages_path = DATASET_DIR + &#39;/&#39; + &#39;jpg_pages&#39; self.labels_path = DATASET_DIR + &#39;/&#39; + &#39;labels_xml&#39; self.pages = list(sorted(os.listdir(self.pages_path))) self.labels = list(sorted(os.listdir(self.labels_path))) self.binary_txt_path = DATASET_DIR_DIR + &#39;/&#39; + &#39;empty_0_box_1.txt&#39; self.non_empt_indices = self.get_non_empt_indices() self.total_pages = len(self.pages) self.paper_ranges = self.get_paper_ranges() def get_non_empt_indices(self): with open(self.binary_txt_path, &quot;r&quot;) as tf: indicator_list = tf.read().split(&#39; n&#39;) non_empt_indices = [] for i in range(len(indicator_list)): if indicator_list[i] == &#39;1&#39;: non_empt_indices.append(i) return non_empt_indices def get_paper_range(self, paper): # paper is a string paper_indices = [] N = self.total_pages for j in range(N): if paper in self.pages[j]: paper_indices.append(j) else: pass return [ paper_indices[0], paper_indices[-1] ] def get_paper_ranges(self): paper_ranges = [] for paper in self.paper_list: paper_ranges.append( self.get_paper_range(paper) ) return paper_ranges def display_info(self): pdf_dir_ls = list(sorted(os.listdir(PDF_PATH))) list_of_filenames = [ a.split(&quot;.&quot;)[0] for a in pdf_dir_ls ] filenames_df = pd.DataFrame( list_of_filenames, columns=[&#39;papers&#39;] ) print( filenames_df ) . . class methods . get_non_empt_indices( self ) | get_paper_range( self, paper ) | . get_paper_ranges( self ) | display_info( self ) | . . We define three key lists in the cells hidden below. . key lists . `PAPER_LIST` | `INDICES` | `PAGE_LIST` | . This is what the display_info method looks like on the dataset in question. To call it, we introduce the PAPER_LIST used to initialize dataset. . pdf_dir_ls = list(sorted(os.listdir(PDF_PATH))) PAPER_LIST = [ a.split(&quot;.&quot;)[0] for a in pdf_dir_ls ] collection = paper_collection_object( PAPER_LIST ) collection.display_info() . . papers 0 abe_2015_effective 1 aizenman_1983_sharp 2 aizenman_1987_uniqueness 3 aizenman_1998_holder 4 antal_1996_chemical 5 atapour_2010_number 6 beaton_2018_knotting 7 bonato_2020_asymptotics 8 broadbent_1956_percolation 9 campanino_2002_ornstein 10 caraglio_2020_translocation 11 cerf_2015_lower 12 cerf_2018_new 13 coward_2007_algorithmically 14 duminil_2020_upper 15 even_2017_models 16 grimmett_1990_supercritical 17 grimmett_1999_conformal 18 grimmett_1999_entanglement 19 grimmett_1999_inequalities 20 grimmett_2010_plaquettes 21 grimmett_2013_percolation 22 haggstrom_1999_uniqueness 23 holroyd_1997_existence 24 holroyd_1999_existence 25 holroyd_2001_entanglement 26 holroyd_2001_inequalities 27 holroyd_2012_stochastic 28 ishihara_2017_bounds 29 kantor_1988_topological 30 kesten_1986_incipient 31 liggett_1997_domination 32 orlandini_1994_random 33 orlandini_1998_asymptotics 34 panagiotis_2020_analyticity 35 paturej_2019_knots 36 rensburg_1990_topology 37 scharlemann_1990_lectures 38 soteros_1999_linking 39 soteros_2009_brief 40 timar_2011_boundary 41 vandenberg_2019_lower 42 vanrensburg_1990_knot 43 vologodskii_1973_knot . For later initializing the dataset, we record the indices of &quot;non-empty&quot; pages in the full page list in INDICES. . INDICES = collection.non_empt_indices print(INDICES) . . [1, 2, 4, 5, 6, 7, 10, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 67, 68, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 127, 128, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 149, 150, 151, 159, 161, 169, 170, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 188, 189, 190, 200, 201, 202, 203, 205, 206, 207, 208, 213, 214, 226, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 319, 320, 321, 322, 326, 331, 332, 333, 334, 337, 340, 341, 342, 347, 348, 349, 350, 352, 353, 401, 406, 407, 408, 409, 411, 414, 449, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 466, 470, 471, 474, 490, 491, 497, 502, 504, 505, 511, 516, 517, 518, 519, 522, 524, 525, 526, 527, 529, 535, 536, 537, 538, 539, 540, 548, 549, 550, 551, 552, 555, 556, 558, 559, 562, 564, 566, 569, 653, 655, 656, 657, 659, 660, 664, 665, 700, 705, 706, 708, 709, 710, 712, 713, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 731, 732, 736, 737, 738, 739, 741, 743, 744, 749, 751, 752, 753, 757, 758, 759, 768, 769, 770, 771, 773, 774, 776, 777, 778, 779, 787, 788, 791, 792, 795, 797, 798, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 830, 831, 832, 833, 834, 835, 841, 842, 844, 846, 850, 851, 852, 853, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 882, 883, 884, 885, 887, 903, 904, 905, 906, 907, 908, 909, 910, 911, 915, 917, 918, 919, 920, 925, 926, 927, 928, 932, 936] . Through these indices, we can name specific pages that correspond to these indices. This is PAGE_LIST. . PAGE_LIST = collection.pages print(PAGE_LIST) . . [&#39;abe_2015_effective_0001&#39;, &#39;abe_2015_effective_0002&#39;, &#39;abe_2015_effective_0003&#39;, &#39;abe_2015_effective_0004&#39;, &#39;abe_2015_effective_0005&#39;, &#39;abe_2015_effective_0006&#39;, &#39;abe_2015_effective_0007&#39;, &#39;abe_2015_effective_0008&#39;, &#39;abe_2015_effective_0009&#39;, &#39;abe_2015_effective_0010&#39;, &#39;abe_2015_effective_0011&#39;, &#39;abe_2015_effective_0012&#39;, &#39;aizenman_1983_sharp_0001&#39;, &#39;aizenman_1983_sharp_0002&#39;, &#39;aizenman_1983_sharp_0003&#39;, &#39;aizenman_1983_sharp_0004&#39;, &#39;aizenman_1983_sharp_0005&#39;, &#39;aizenman_1983_sharp_0006&#39;, &#39;aizenman_1983_sharp_0007&#39;, &#39;aizenman_1983_sharp_0008&#39;, &#39;aizenman_1983_sharp_0009&#39;, &#39;aizenman_1983_sharp_0010&#39;, &#39;aizenman_1983_sharp_0011&#39;, &#39;aizenman_1983_sharp_0012&#39;, &#39;aizenman_1983_sharp_0013&#39;, &#39;aizenman_1983_sharp_0014&#39;, &#39;aizenman_1983_sharp_0015&#39;, &#39;aizenman_1983_sharp_0016&#39;, &#39;aizenman_1983_sharp_0017&#39;, &#39;aizenman_1983_sharp_0018&#39;, &#39;aizenman_1983_sharp_0019&#39;, &#39;aizenman_1983_sharp_0020&#39;, &#39;aizenman_1983_sharp_0021&#39;, &#39;aizenman_1983_sharp_0022&#39;, &#39;aizenman_1983_sharp_0023&#39;, &#39;aizenman_1983_sharp_0024&#39;, &#39;aizenman_1983_sharp_0025&#39;, &#39;aizenman_1983_sharp_0026&#39;, &#39;aizenman_1983_sharp_0027&#39;, &#39;aizenman_1983_sharp_0028&#39;, &#39;aizenman_1983_sharp_0029&#39;, &#39;aizenman_1983_sharp_0030&#39;, &#39;aizenman_1983_sharp_0031&#39;, &#39;aizenman_1983_sharp_0032&#39;, &#39;aizenman_1983_sharp_0033&#39;, &#39;aizenman_1983_sharp_0034&#39;, &#39;aizenman_1983_sharp_0035&#39;, &#39;aizenman_1983_sharp_0036&#39;, &#39;aizenman_1983_sharp_0037&#39;, &#39;aizenman_1983_sharp_0038&#39;, &#39;aizenman_1983_sharp_0039&#39;, &#39;aizenman_1983_sharp_0040&#39;, &#39;aizenman_1983_sharp_0041&#39;, &#39;aizenman_1983_sharp_0042&#39;, &#39;aizenman_1983_sharp_0043&#39;, &#39;aizenman_1983_sharp_0044&#39;, &#39;aizenman_1983_sharp_0045&#39;, &#39;aizenman_1983_sharp_0046&#39;, &#39;aizenman_1983_sharp_0047&#39;, &#39;aizenman_1983_sharp_0048&#39;, &#39;aizenman_1983_sharp_0049&#39;, &#39;aizenman_1983_sharp_0050&#39;, &#39;aizenman_1983_sharp_0051&#39;, &#39;aizenman_1983_sharp_0052&#39;, &#39;aizenman_1983_sharp_0053&#39;, &#39;aizenman_1987_uniqueness_0001&#39;, &#39;aizenman_1987_uniqueness_0002&#39;, &#39;aizenman_1987_uniqueness_0003&#39;, &#39;aizenman_1987_uniqueness_0004&#39;, &#39;aizenman_1987_uniqueness_0005&#39;, &#39;aizenman_1987_uniqueness_0006&#39;, &#39;aizenman_1987_uniqueness_0007&#39;, &#39;aizenman_1987_uniqueness_0008&#39;, &#39;aizenman_1987_uniqueness_0009&#39;, &#39;aizenman_1987_uniqueness_0010&#39;, &#39;aizenman_1987_uniqueness_0011&#39;, &#39;aizenman_1987_uniqueness_0012&#39;, &#39;aizenman_1987_uniqueness_0013&#39;, &#39;aizenman_1987_uniqueness_0014&#39;, &#39;aizenman_1987_uniqueness_0015&#39;, &#39;aizenman_1987_uniqueness_0016&#39;, &#39;aizenman_1987_uniqueness_0017&#39;, &#39;aizenman_1987_uniqueness_0018&#39;, &#39;aizenman_1987_uniqueness_0019&#39;, &#39;aizenman_1987_uniqueness_0020&#39;, &#39;aizenman_1987_uniqueness_0021&#39;, &#39;aizenman_1987_uniqueness_0022&#39;, &#39;aizenman_1987_uniqueness_0023&#39;, &#39;aizenman_1987_uniqueness_0024&#39;, &#39;aizenman_1987_uniqueness_0025&#39;, &#39;aizenman_1987_uniqueness_0026&#39;, &#39;aizenman_1987_uniqueness_0027&#39;, &#39;aizenman_1987_uniqueness_0028&#39;, &#39;aizenman_1998_holder_0001&#39;, &#39;aizenman_1998_holder_0002&#39;, &#39;aizenman_1998_holder_0003&#39;, &#39;aizenman_1998_holder_0004&#39;, &#39;aizenman_1998_holder_0005&#39;, &#39;aizenman_1998_holder_0006&#39;, &#39;aizenman_1998_holder_0007&#39;, &#39;aizenman_1998_holder_0008&#39;, &#39;aizenman_1998_holder_0009&#39;, &#39;aizenman_1998_holder_0010&#39;, &#39;aizenman_1998_holder_0011&#39;, &#39;aizenman_1998_holder_0012&#39;, &#39;aizenman_1998_holder_0013&#39;, &#39;aizenman_1998_holder_0014&#39;, &#39;aizenman_1998_holder_0015&#39;, &#39;aizenman_1998_holder_0016&#39;, &#39;aizenman_1998_holder_0017&#39;, &#39;aizenman_1998_holder_0018&#39;, &#39;aizenman_1998_holder_0019&#39;, &#39;aizenman_1998_holder_0020&#39;, &#39;aizenman_1998_holder_0021&#39;, &#39;aizenman_1998_holder_0022&#39;, &#39;aizenman_1998_holder_0023&#39;, &#39;aizenman_1998_holder_0024&#39;, &#39;aizenman_1998_holder_0025&#39;, &#39;aizenman_1998_holder_0026&#39;, &#39;aizenman_1998_holder_0027&#39;, &#39;aizenman_1998_holder_0028&#39;, &#39;aizenman_1998_holder_0029&#39;, &#39;aizenman_1998_holder_0030&#39;, &#39;aizenman_1998_holder_0031&#39;, &#39;aizenman_1998_holder_0032&#39;, &#39;aizenman_1998_holder_0033&#39;, &#39;aizenman_1998_holder_0034&#39;, &#39;aizenman_1998_holder_0035&#39;, &#39;aizenman_1998_holder_0036&#39;, &#39;aizenman_1998_holder_0037&#39;, &#39;aizenman_1998_holder_0038&#39;, &#39;aizenman_1998_holder_0039&#39;, &#39;aizenman_1998_holder_0040&#39;, &#39;aizenman_1998_holder_0041&#39;, &#39;antal_1996_chemical_0001&#39;, &#39;antal_1996_chemical_0002&#39;, &#39;antal_1996_chemical_0003&#39;, &#39;antal_1996_chemical_0004&#39;, &#39;antal_1996_chemical_0005&#39;, &#39;antal_1996_chemical_0006&#39;, &#39;antal_1996_chemical_0007&#39;, &#39;antal_1996_chemical_0008&#39;, &#39;antal_1996_chemical_0009&#39;, &#39;antal_1996_chemical_0010&#39;, &#39;antal_1996_chemical_0011&#39;, &#39;antal_1996_chemical_0012&#39;, &#39;antal_1996_chemical_0013&#39;, &#39;atapour_2010_number_0001&#39;, &#39;atapour_2010_number_0002&#39;, &#39;atapour_2010_number_0003&#39;, &#39;atapour_2010_number_0004&#39;, &#39;atapour_2010_number_0005&#39;, &#39;atapour_2010_number_0006&#39;, &#39;atapour_2010_number_0007&#39;, &#39;atapour_2010_number_0008&#39;, &#39;atapour_2010_number_0009&#39;, &#39;atapour_2010_number_0010&#39;, &#39;atapour_2010_number_0011&#39;, &#39;atapour_2010_number_0012&#39;, &#39;atapour_2010_number_0013&#39;, &#39;atapour_2010_number_0014&#39;, &#39;atapour_2010_number_0015&#39;, &#39;atapour_2010_number_0016&#39;, &#39;atapour_2010_number_0017&#39;, &#39;atapour_2010_number_0018&#39;, &#39;atapour_2010_number_0019&#39;, &#39;atapour_2010_number_0020&#39;, &#39;atapour_2010_number_0021&#39;, &#39;atapour_2010_number_0022&#39;, &#39;atapour_2010_number_0023&#39;, &#39;atapour_2010_number_0024&#39;, &#39;atapour_2010_number_0025&#39;, &#39;atapour_2010_number_0026&#39;, &#39;beaton_2018_knotting_0001&#39;, &#39;beaton_2018_knotting_0002&#39;, &#39;beaton_2018_knotting_0003&#39;, &#39;beaton_2018_knotting_0004&#39;, &#39;beaton_2018_knotting_0005&#39;, &#39;beaton_2018_knotting_0006&#39;, &#39;beaton_2018_knotting_0007&#39;, &#39;beaton_2018_knotting_0008&#39;, &#39;beaton_2018_knotting_0009&#39;, &#39;beaton_2018_knotting_0010&#39;, &#39;beaton_2018_knotting_0011&#39;, &#39;beaton_2018_knotting_0012&#39;, &#39;beaton_2018_knotting_0013&#39;, &#39;beaton_2018_knotting_0014&#39;, &#39;beaton_2018_knotting_0015&#39;, &#39;beaton_2018_knotting_0016&#39;, &#39;beaton_2018_knotting_0017&#39;, &#39;beaton_2018_knotting_0018&#39;, &#39;beaton_2018_knotting_0019&#39;, &#39;beaton_2018_knotting_0020&#39;, &#39;beaton_2018_knotting_0021&#39;, &#39;beaton_2018_knotting_0022&#39;, &#39;beaton_2018_knotting_0023&#39;, &#39;beaton_2018_knotting_0024&#39;, &#39;bonato_2020_asymptotics_0001&#39;, &#39;bonato_2020_asymptotics_0002&#39;, &#39;bonato_2020_asymptotics_0003&#39;, &#39;bonato_2020_asymptotics_0004&#39;, &#39;bonato_2020_asymptotics_0005&#39;, &#39;bonato_2020_asymptotics_0006&#39;, &#39;bonato_2020_asymptotics_0007&#39;, &#39;bonato_2020_asymptotics_0008&#39;, &#39;bonato_2020_asymptotics_0009&#39;, &#39;bonato_2020_asymptotics_0010&#39;, &#39;bonato_2020_asymptotics_0011&#39;, &#39;bonato_2020_asymptotics_0012&#39;, &#39;bonato_2020_asymptotics_0013&#39;, &#39;bonato_2020_asymptotics_0014&#39;, &#39;bonato_2020_asymptotics_0015&#39;, &#39;bonato_2020_asymptotics_0016&#39;, &#39;bonato_2020_asymptotics_0017&#39;, &#39;bonato_2020_asymptotics_0018&#39;, &#39;bonato_2020_asymptotics_0019&#39;, &#39;bonato_2020_asymptotics_0020&#39;, &#39;bonato_2020_asymptotics_0021&#39;, &#39;broadbent_1956_percolation_0001&#39;, &#39;broadbent_1956_percolation_0002&#39;, &#39;broadbent_1956_percolation_0003&#39;, &#39;broadbent_1956_percolation_0004&#39;, &#39;broadbent_1956_percolation_0005&#39;, &#39;broadbent_1956_percolation_0006&#39;, &#39;broadbent_1956_percolation_0007&#39;, &#39;broadbent_1956_percolation_0008&#39;, &#39;broadbent_1956_percolation_0009&#39;, &#39;broadbent_1956_percolation_0010&#39;, &#39;broadbent_1956_percolation_0011&#39;, &#39;broadbent_1956_percolation_0012&#39;, &#39;broadbent_1956_percolation_0013&#39;, &#39;broadbent_1956_percolation_0014&#39;, &#39;campanino_2002_ornstein_0001&#39;, &#39;campanino_2002_ornstein_0002&#39;, &#39;campanino_2002_ornstein_0003&#39;, &#39;campanino_2002_ornstein_0004&#39;, &#39;campanino_2002_ornstein_0005&#39;, &#39;campanino_2002_ornstein_0006&#39;, &#39;campanino_2002_ornstein_0007&#39;, &#39;campanino_2002_ornstein_0008&#39;, &#39;campanino_2002_ornstein_0009&#39;, &#39;campanino_2002_ornstein_0010&#39;, &#39;campanino_2002_ornstein_0011&#39;, &#39;campanino_2002_ornstein_0012&#39;, &#39;campanino_2002_ornstein_0013&#39;, &#39;campanino_2002_ornstein_0014&#39;, &#39;campanino_2002_ornstein_0015&#39;, &#39;campanino_2002_ornstein_0016&#39;, &#39;campanino_2002_ornstein_0017&#39;, &#39;campanino_2002_ornstein_0018&#39;, &#39;campanino_2002_ornstein_0019&#39;, &#39;campanino_2002_ornstein_0020&#39;, &#39;campanino_2002_ornstein_0021&#39;, &#39;campanino_2002_ornstein_0022&#39;, &#39;campanino_2002_ornstein_0023&#39;, &#39;campanino_2002_ornstein_0024&#39;, &#39;campanino_2002_ornstein_0025&#39;, &#39;campanino_2002_ornstein_0026&#39;, &#39;campanino_2002_ornstein_0027&#39;, &#39;campanino_2002_ornstein_0028&#39;, &#39;campanino_2002_ornstein_0029&#39;, &#39;campanino_2002_ornstein_0030&#39;, &#39;campanino_2002_ornstein_0031&#39;, &#39;caraglio_2020_translocation_0001&#39;, &#39;caraglio_2020_translocation_0002&#39;, &#39;caraglio_2020_translocation_0003&#39;, &#39;caraglio_2020_translocation_0004&#39;, &#39;caraglio_2020_translocation_0005&#39;, &#39;caraglio_2020_translocation_0006&#39;, &#39;caraglio_2020_translocation_0007&#39;, &#39;caraglio_2020_translocation_0008&#39;, &#39;caraglio_2020_translocation_0009&#39;, &#39;caraglio_2020_translocation_0010&#39;, &#39;caraglio_2020_translocation_0011&#39;, &#39;caraglio_2020_translocation_0012&#39;, &#39;caraglio_2020_translocation_0013&#39;, &#39;caraglio_2020_translocation_0014&#39;, &#39;caraglio_2020_translocation_0015&#39;, &#39;caraglio_2020_translocation_0016&#39;, &#39;cerf_2015_lower_0001&#39;, &#39;cerf_2015_lower_0002&#39;, &#39;cerf_2015_lower_0003&#39;, &#39;cerf_2015_lower_0004&#39;, &#39;cerf_2015_lower_0005&#39;, &#39;cerf_2015_lower_0006&#39;, &#39;cerf_2015_lower_0007&#39;, &#39;cerf_2015_lower_0008&#39;, &#39;cerf_2015_lower_0009&#39;, &#39;cerf_2015_lower_0010&#39;, &#39;cerf_2015_lower_0011&#39;, &#39;cerf_2015_lower_0012&#39;, &#39;cerf_2015_lower_0013&#39;, &#39;cerf_2015_lower_0014&#39;, &#39;cerf_2015_lower_0015&#39;, &#39;cerf_2015_lower_0016&#39;, &#39;cerf_2015_lower_0017&#39;, &#39;cerf_2015_lower_0018&#39;, &#39;cerf_2015_lower_0019&#39;, &#39;cerf_2015_lower_0020&#39;, &#39;cerf_2015_lower_0021&#39;, &#39;cerf_2015_lower_0022&#39;, &#39;cerf_2015_lower_0023&#39;, &#39;cerf_2018_new_0001&#39;, &#39;cerf_2018_new_0002&#39;, &#39;cerf_2018_new_0003&#39;, &#39;cerf_2018_new_0004&#39;, &#39;cerf_2018_new_0005&#39;, &#39;cerf_2018_new_0006&#39;, &#39;cerf_2018_new_0007&#39;, &#39;cerf_2018_new_0008&#39;, &#39;cerf_2018_new_0009&#39;, &#39;cerf_2018_new_0010&#39;, &#39;cerf_2018_new_0011&#39;, &#39;cerf_2018_new_0012&#39;, &#39;cerf_2018_new_0013&#39;, &#39;cerf_2018_new_0014&#39;, &#39;cerf_2018_new_0015&#39;, &#39;cerf_2018_new_0016&#39;, &#39;cerf_2018_new_0017&#39;, &#39;cerf_2018_new_0018&#39;, &#39;cerf_2018_new_0019&#39;, &#39;cerf_2018_new_0020&#39;, &#39;cerf_2018_new_0021&#39;, &#39;cerf_2018_new_0022&#39;, &#39;cerf_2018_new_0023&#39;, &#39;cerf_2018_new_0024&#39;, &#39;cerf_2018_new_0025&#39;, &#39;cerf_2018_new_0026&#39;, &#39;cerf_2018_new_0027&#39;, &#39;cerf_2018_new_0028&#39;, &#39;cerf_2018_new_0029&#39;, &#39;cerf_2018_new_0030&#39;, &#39;cerf_2018_new_0031&#39;, &#39;cerf_2018_new_0032&#39;, &#39;cerf_2018_new_0033&#39;, &#39;cerf_2018_new_0034&#39;, &#39;cerf_2018_new_0035&#39;, &#39;cerf_2018_new_0036&#39;, &#39;cerf_2018_new_0037&#39;, &#39;cerf_2018_new_0038&#39;, &#39;cerf_2018_new_0039&#39;, &#39;cerf_2018_new_0040&#39;, &#39;cerf_2018_new_0041&#39;, &#39;cerf_2018_new_0042&#39;, &#39;cerf_2018_new_0043&#39;, &#39;cerf_2018_new_0044&#39;, &#39;cerf_2018_new_0045&#39;, &#39;cerf_2018_new_0046&#39;, &#39;cerf_2018_new_0047&#39;, &#39;cerf_2018_new_0048&#39;, &#39;cerf_2018_new_0049&#39;, &#39;cerf_2018_new_0050&#39;, &#39;cerf_2018_new_0051&#39;, &#39;cerf_2018_new_0052&#39;, &#39;cerf_2018_new_0053&#39;, &#39;cerf_2018_new_0054&#39;, &#39;coward_2007_algorithmically_0001&#39;, &#39;coward_2007_algorithmically_0002&#39;, &#39;coward_2007_algorithmically_0003&#39;, &#39;coward_2007_algorithmically_0004&#39;, &#39;coward_2007_algorithmically_0005&#39;, &#39;coward_2007_algorithmically_0006&#39;, &#39;coward_2007_algorithmically_0007&#39;, &#39;coward_2007_algorithmically_0008&#39;, &#39;coward_2007_algorithmically_0009&#39;, &#39;coward_2007_algorithmically_0010&#39;, &#39;coward_2007_algorithmically_0011&#39;, &#39;coward_2007_algorithmically_0012&#39;, &#39;coward_2007_algorithmically_0013&#39;, &#39;coward_2007_algorithmically_0014&#39;, &#39;coward_2007_algorithmically_0015&#39;, &#39;coward_2007_algorithmically_0016&#39;, &#39;coward_2007_algorithmically_0017&#39;, &#39;coward_2007_algorithmically_0018&#39;, &#39;coward_2007_algorithmically_0019&#39;, &#39;coward_2007_algorithmically_0020&#39;, &#39;coward_2007_algorithmically_0021&#39;, &#39;coward_2007_algorithmically_0022&#39;, &#39;coward_2007_algorithmically_0023&#39;, &#39;coward_2007_algorithmically_0024&#39;, &#39;coward_2007_algorithmically_0025&#39;, &#39;coward_2007_algorithmically_0026&#39;, &#39;coward_2007_algorithmically_0027&#39;, &#39;coward_2007_algorithmically_0028&#39;, &#39;coward_2007_algorithmically_0029&#39;, &#39;coward_2007_algorithmically_0030&#39;, &#39;coward_2007_algorithmically_0031&#39;, &#39;coward_2007_algorithmically_0032&#39;, &#39;coward_2007_algorithmically_0033&#39;, &#39;coward_2007_algorithmically_0034&#39;, &#39;coward_2007_algorithmically_0035&#39;, &#39;coward_2007_algorithmically_0036&#39;, &#39;coward_2007_algorithmically_0037&#39;, &#39;coward_2007_algorithmically_0038&#39;, &#39;coward_2007_algorithmically_0039&#39;, &#39;coward_2007_algorithmically_0040&#39;, &#39;coward_2007_algorithmically_0041&#39;, &#39;coward_2007_algorithmically_0042&#39;, &#39;coward_2007_algorithmically_0043&#39;, &#39;coward_2007_algorithmically_0044&#39;, &#39;coward_2007_algorithmically_0045&#39;, &#39;duminil_2020_upper_0001&#39;, &#39;duminil_2020_upper_0002&#39;, &#39;duminil_2020_upper_0003&#39;, &#39;duminil_2020_upper_0004&#39;, &#39;duminil_2020_upper_0005&#39;, &#39;duminil_2020_upper_0006&#39;, &#39;duminil_2020_upper_0007&#39;, &#39;duminil_2020_upper_0008&#39;, &#39;duminil_2020_upper_0009&#39;, &#39;duminil_2020_upper_0010&#39;, &#39;duminil_2020_upper_0011&#39;, &#39;duminil_2020_upper_0012&#39;, &#39;duminil_2020_upper_0013&#39;, &#39;duminil_2020_upper_0014&#39;, &#39;duminil_2020_upper_0015&#39;, &#39;duminil_2020_upper_0016&#39;, &#39;duminil_2020_upper_0017&#39;, &#39;duminil_2020_upper_0018&#39;, &#39;duminil_2020_upper_0019&#39;, &#39;duminil_2020_upper_0020&#39;, &#39;duminil_2020_upper_0021&#39;, &#39;even_2017_models_0001&#39;, &#39;even_2017_models_0002&#39;, &#39;even_2017_models_0003&#39;, &#39;even_2017_models_0004&#39;, &#39;even_2017_models_0005&#39;, &#39;even_2017_models_0006&#39;, &#39;even_2017_models_0007&#39;, &#39;even_2017_models_0008&#39;, &#39;even_2017_models_0009&#39;, &#39;even_2017_models_0010&#39;, &#39;even_2017_models_0011&#39;, &#39;even_2017_models_0012&#39;, &#39;even_2017_models_0013&#39;, &#39;even_2017_models_0014&#39;, &#39;even_2017_models_0015&#39;, &#39;even_2017_models_0016&#39;, &#39;even_2017_models_0017&#39;, &#39;even_2017_models_0018&#39;, &#39;even_2017_models_0019&#39;, &#39;even_2017_models_0020&#39;, &#39;even_2017_models_0021&#39;, &#39;even_2017_models_0022&#39;, &#39;even_2017_models_0023&#39;, &#39;even_2017_models_0024&#39;, &#39;even_2017_models_0025&#39;, &#39;even_2017_models_0026&#39;, &#39;even_2017_models_0027&#39;, &#39;grimmett_1990_supercritical_0001&#39;, &#39;grimmett_1990_supercritical_0002&#39;, &#39;grimmett_1990_supercritical_0003&#39;, &#39;grimmett_1990_supercritical_0004&#39;, &#39;grimmett_1990_supercritical_0005&#39;, &#39;grimmett_1990_supercritical_0006&#39;, &#39;grimmett_1990_supercritical_0007&#39;, &#39;grimmett_1990_supercritical_0008&#39;, &#39;grimmett_1990_supercritical_0009&#39;, &#39;grimmett_1990_supercritical_0010&#39;, &#39;grimmett_1990_supercritical_0011&#39;, &#39;grimmett_1990_supercritical_0012&#39;, &#39;grimmett_1990_supercritical_0013&#39;, &#39;grimmett_1990_supercritical_0014&#39;, &#39;grimmett_1990_supercritical_0015&#39;, &#39;grimmett_1990_supercritical_0016&#39;, &#39;grimmett_1990_supercritical_0017&#39;, &#39;grimmett_1990_supercritical_0018&#39;, &#39;grimmett_1990_supercritical_0019&#39;, &#39;grimmett_1999_conformal_0001&#39;, &#39;grimmett_1999_conformal_0002&#39;, &#39;grimmett_1999_conformal_0003&#39;, &#39;grimmett_1999_conformal_0004&#39;, &#39;grimmett_1999_conformal_0005&#39;, &#39;grimmett_1999_conformal_0006&#39;, &#39;grimmett_1999_conformal_0007&#39;, &#39;grimmett_1999_conformal_0008&#39;, &#39;grimmett_1999_conformal_0009&#39;, &#39;grimmett_1999_conformal_0010&#39;, &#39;grimmett_1999_conformal_0011&#39;, &#39;grimmett_1999_conformal_0012&#39;, &#39;grimmett_1999_conformal_0013&#39;, &#39;grimmett_1999_conformal_0014&#39;, &#39;grimmett_1999_entanglement_0001&#39;, &#39;grimmett_1999_entanglement_0002&#39;, &#39;grimmett_1999_entanglement_0003&#39;, &#39;grimmett_1999_entanglement_0004&#39;, &#39;grimmett_1999_entanglement_0005&#39;, &#39;grimmett_1999_entanglement_0006&#39;, &#39;grimmett_1999_entanglement_0007&#39;, &#39;grimmett_1999_entanglement_0008&#39;, &#39;grimmett_1999_entanglement_0009&#39;, &#39;grimmett_1999_entanglement_0010&#39;, &#39;grimmett_1999_entanglement_0011&#39;, &#39;grimmett_1999_entanglement_0012&#39;, &#39;grimmett_1999_entanglement_0013&#39;, &#39;grimmett_1999_entanglement_0014&#39;, &#39;grimmett_1999_entanglement_0015&#39;, &#39;grimmett_1999_entanglement_0016&#39;, &#39;grimmett_1999_entanglement_0017&#39;, &#39;grimmett_1999_entanglement_0018&#39;, &#39;grimmett_1999_entanglement_0019&#39;, &#39;grimmett_1999_entanglement_0020&#39;, &#39;grimmett_1999_entanglement_0021&#39;, &#39;grimmett_1999_entanglement_0022&#39;, &#39;grimmett_1999_entanglement_0023&#39;, &#39;grimmett_1999_entanglement_0024&#39;, &#39;grimmett_1999_entanglement_0025&#39;, &#39;grimmett_1999_entanglement_0026&#39;, &#39;grimmett_1999_entanglement_0027&#39;, &#39;grimmett_1999_entanglement_0028&#39;, &#39;grimmett_1999_entanglement_0029&#39;, &#39;grimmett_1999_entanglement_0030&#39;, &#39;grimmett_1999_entanglement_0031&#39;, &#39;grimmett_1999_entanglement_0032&#39;, &#39;grimmett_1999_entanglement_0033&#39;, &#39;grimmett_1999_inequalities_0001&#39;, &#39;grimmett_1999_inequalities_0002&#39;, &#39;grimmett_1999_inequalities_0003&#39;, &#39;grimmett_1999_inequalities_0004&#39;, &#39;grimmett_1999_inequalities_0005&#39;, &#39;grimmett_1999_inequalities_0006&#39;, &#39;grimmett_1999_inequalities_0007&#39;, &#39;grimmett_1999_inequalities_0008&#39;, &#39;grimmett_1999_inequalities_0009&#39;, &#39;grimmett_1999_inequalities_0010&#39;, &#39;grimmett_1999_inequalities_0011&#39;, &#39;grimmett_1999_inequalities_0012&#39;, &#39;grimmett_1999_inequalities_0013&#39;, &#39;grimmett_1999_inequalities_0014&#39;, &#39;grimmett_1999_inequalities_0015&#39;, &#39;grimmett_1999_inequalities_0016&#39;, &#39;grimmett_2010_plaquettes_0001&#39;, &#39;grimmett_2010_plaquettes_0002&#39;, &#39;grimmett_2010_plaquettes_0003&#39;, &#39;grimmett_2010_plaquettes_0004&#39;, &#39;grimmett_2010_plaquettes_0005&#39;, &#39;grimmett_2010_plaquettes_0006&#39;, &#39;grimmett_2010_plaquettes_0007&#39;, &#39;grimmett_2010_plaquettes_0008&#39;, &#39;grimmett_2010_plaquettes_0009&#39;, &#39;grimmett_2010_plaquettes_0010&#39;, &#39;grimmett_2010_plaquettes_0011&#39;, &#39;grimmett_2010_plaquettes_0012&#39;, &#39;grimmett_2010_plaquettes_0013&#39;, &#39;grimmett_2010_plaquettes_0014&#39;, &#39;grimmett_2013_percolation_0001&#39;, &#39;grimmett_2013_percolation_0002&#39;, &#39;grimmett_2013_percolation_0003&#39;, &#39;grimmett_2013_percolation_0004&#39;, &#39;grimmett_2013_percolation_0005&#39;, &#39;grimmett_2013_percolation_0006&#39;, &#39;grimmett_2013_percolation_0007&#39;, &#39;grimmett_2013_percolation_0008&#39;, &#39;grimmett_2013_percolation_0009&#39;, &#39;grimmett_2013_percolation_0010&#39;, &#39;grimmett_2013_percolation_0011&#39;, &#39;grimmett_2013_percolation_0012&#39;, &#39;grimmett_2013_percolation_0013&#39;, &#39;grimmett_2013_percolation_0014&#39;, &#39;grimmett_2013_percolation_0015&#39;, &#39;grimmett_2013_percolation_0016&#39;, &#39;grimmett_2013_percolation_0017&#39;, &#39;haggstrom_1999_uniqueness_0001&#39;, &#39;haggstrom_1999_uniqueness_0002&#39;, &#39;haggstrom_1999_uniqueness_0003&#39;, &#39;haggstrom_1999_uniqueness_0004&#39;, &#39;haggstrom_1999_uniqueness_0005&#39;, &#39;haggstrom_1999_uniqueness_0006&#39;, &#39;haggstrom_1999_uniqueness_0007&#39;, &#39;haggstrom_1999_uniqueness_0008&#39;, &#39;haggstrom_1999_uniqueness_0009&#39;, &#39;holroyd_1997_existence_0001&#39;, &#39;holroyd_1997_existence_0002&#39;, &#39;holroyd_1997_existence_0003&#39;, &#39;holroyd_1997_existence_0004&#39;, &#39;holroyd_1997_existence_0005&#39;, &#39;holroyd_1997_existence_0006&#39;, &#39;holroyd_1997_existence_0007&#39;, &#39;holroyd_1997_existence_0008&#39;, &#39;holroyd_1997_existence_0009&#39;, &#39;holroyd_1997_existence_0010&#39;, &#39;holroyd_1997_existence_0011&#39;, &#39;holroyd_1997_existence_0012&#39;, &#39;holroyd_1997_existence_0013&#39;, &#39;holroyd_1997_existence_0014&#39;, &#39;holroyd_1997_existence_0015&#39;, &#39;holroyd_1997_existence_0016&#39;, &#39;holroyd_1997_existence_0017&#39;, &#39;holroyd_1997_existence_0018&#39;, &#39;holroyd_1997_existence_0019&#39;, &#39;holroyd_1997_existence_0020&#39;, &#39;holroyd_1997_existence_0021&#39;, &#39;holroyd_1997_existence_0022&#39;, &#39;holroyd_1997_existence_0023&#39;, &#39;holroyd_1997_existence_0024&#39;, &#39;holroyd_1997_existence_0025&#39;, &#39;holroyd_1997_existence_0026&#39;, &#39;holroyd_1997_existence_0027&#39;, &#39;holroyd_1997_existence_0028&#39;, &#39;holroyd_1997_existence_0029&#39;, &#39;holroyd_1997_existence_0030&#39;, &#39;holroyd_1997_existence_0031&#39;, &#39;holroyd_1997_existence_0032&#39;, &#39;holroyd_1997_existence_0033&#39;, &#39;holroyd_1999_existence_0001&#39;, &#39;holroyd_1999_existence_0002&#39;, &#39;holroyd_1999_existence_0003&#39;, &#39;holroyd_1999_existence_0004&#39;, &#39;holroyd_1999_existence_0005&#39;, &#39;holroyd_1999_existence_0006&#39;, &#39;holroyd_1999_existence_0007&#39;, &#39;holroyd_1999_existence_0008&#39;, &#39;holroyd_1999_existence_0009&#39;, &#39;holroyd_1999_existence_0010&#39;, &#39;holroyd_1999_existence_0011&#39;, &#39;holroyd_1999_existence_0012&#39;, &#39;holroyd_1999_existence_0013&#39;, &#39;holroyd_1999_existence_0014&#39;, &#39;holroyd_1999_existence_0015&#39;, &#39;holroyd_1999_existence_0016&#39;, &#39;holroyd_1999_existence_0017&#39;, &#39;holroyd_1999_existence_0018&#39;, &#39;holroyd_1999_existence_0019&#39;, &#39;holroyd_1999_existence_0020&#39;, &#39;holroyd_1999_existence_0021&#39;, &#39;holroyd_1999_existence_0022&#39;, &#39;holroyd_1999_existence_0023&#39;, &#39;holroyd_1999_existence_0024&#39;, &#39;holroyd_2001_entanglement_0001&#39;, &#39;holroyd_2001_entanglement_0002&#39;, &#39;holroyd_2001_entanglement_0003&#39;, &#39;holroyd_2001_entanglement_0004&#39;, &#39;holroyd_2001_entanglement_0005&#39;, &#39;holroyd_2001_entanglement_0006&#39;, &#39;holroyd_2001_entanglement_0007&#39;, &#39;holroyd_2001_entanglement_0008&#39;, &#39;holroyd_2001_entanglement_0009&#39;, &#39;holroyd_2001_entanglement_0010&#39;, &#39;holroyd_2001_entanglement_0011&#39;, &#39;holroyd_2001_inequalities_0001&#39;, &#39;holroyd_2001_inequalities_0002&#39;, &#39;holroyd_2001_inequalities_0003&#39;, &#39;holroyd_2001_inequalities_0004&#39;, &#39;holroyd_2001_inequalities_0005&#39;, &#39;holroyd_2001_inequalities_0006&#39;, &#39;holroyd_2001_inequalities_0007&#39;, &#39;holroyd_2001_inequalities_0008&#39;, &#39;holroyd_2012_stochastic_0001&#39;, &#39;holroyd_2012_stochastic_0002&#39;, &#39;holroyd_2012_stochastic_0003&#39;, &#39;holroyd_2012_stochastic_0004&#39;, &#39;holroyd_2012_stochastic_0005&#39;, &#39;holroyd_2012_stochastic_0006&#39;, &#39;holroyd_2012_stochastic_0007&#39;, &#39;holroyd_2012_stochastic_0008&#39;, &#39;holroyd_2012_stochastic_0009&#39;, &#39;holroyd_2012_stochastic_0010&#39;, &#39;holroyd_2012_stochastic_0011&#39;, &#39;holroyd_2012_stochastic_0012&#39;, &#39;holroyd_2012_stochastic_0013&#39;, &#39;holroyd_2012_stochastic_0014&#39;, &#39;holroyd_2012_stochastic_0015&#39;, &#39;holroyd_2012_stochastic_0016&#39;, &#39;holroyd_2012_stochastic_0017&#39;, &#39;holroyd_2012_stochastic_0018&#39;, &#39;holroyd_2012_stochastic_0019&#39;, &#39;holroyd_2012_stochastic_0020&#39;, &#39;holroyd_2012_stochastic_0021&#39;, &#39;ishihara_2017_bounds_0001&#39;, &#39;ishihara_2017_bounds_0002&#39;, &#39;ishihara_2017_bounds_0003&#39;, &#39;ishihara_2017_bounds_0004&#39;, &#39;ishihara_2017_bounds_0005&#39;, &#39;ishihara_2017_bounds_0006&#39;, &#39;ishihara_2017_bounds_0007&#39;, &#39;ishihara_2017_bounds_0008&#39;, &#39;ishihara_2017_bounds_0009&#39;, &#39;ishihara_2017_bounds_0010&#39;, &#39;ishihara_2017_bounds_0011&#39;, &#39;ishihara_2017_bounds_0012&#39;, &#39;ishihara_2017_bounds_0013&#39;, &#39;ishihara_2017_bounds_0014&#39;, &#39;ishihara_2017_bounds_0015&#39;, &#39;ishihara_2017_bounds_0016&#39;, &#39;ishihara_2017_bounds_0017&#39;, &#39;ishihara_2017_bounds_0018&#39;, &#39;ishihara_2017_bounds_0019&#39;, &#39;ishihara_2017_bounds_0020&#39;, &#39;ishihara_2017_bounds_0021&#39;, &#39;ishihara_2017_bounds_0022&#39;, &#39;ishihara_2017_bounds_0023&#39;, &#39;ishihara_2017_bounds_0024&#39;, &#39;ishihara_2017_bounds_0025&#39;, &#39;ishihara_2017_bounds_0026&#39;, &#39;ishihara_2017_bounds_0027&#39;, &#39;ishihara_2017_bounds_0028&#39;, &#39;ishihara_2017_bounds_0029&#39;, &#39;kantor_1988_topological_0001&#39;, &#39;kantor_1988_topological_0002&#39;, &#39;kantor_1988_topological_0003&#39;, &#39;kantor_1988_topological_0004&#39;, &#39;kantor_1988_topological_0005&#39;, &#39;kesten_1986_incipient_0001&#39;, &#39;kesten_1986_incipient_0002&#39;, &#39;kesten_1986_incipient_0003&#39;, &#39;kesten_1986_incipient_0004&#39;, &#39;kesten_1986_incipient_0005&#39;, &#39;kesten_1986_incipient_0006&#39;, &#39;kesten_1986_incipient_0007&#39;, &#39;kesten_1986_incipient_0008&#39;, &#39;kesten_1986_incipient_0009&#39;, &#39;kesten_1986_incipient_0010&#39;, &#39;kesten_1986_incipient_0011&#39;, &#39;kesten_1986_incipient_0012&#39;, &#39;kesten_1986_incipient_0013&#39;, &#39;kesten_1986_incipient_0014&#39;, &#39;kesten_1986_incipient_0015&#39;, &#39;kesten_1986_incipient_0016&#39;, &#39;kesten_1986_incipient_0017&#39;, &#39;kesten_1986_incipient_0018&#39;, &#39;kesten_1986_incipient_0019&#39;, &#39;kesten_1986_incipient_0020&#39;, &#39;kesten_1986_incipient_0021&#39;, &#39;kesten_1986_incipient_0022&#39;, &#39;kesten_1986_incipient_0023&#39;, &#39;kesten_1986_incipient_0024&#39;, &#39;kesten_1986_incipient_0025&#39;, &#39;kesten_1986_incipient_0026&#39;, &#39;liggett_1997_domination_0001&#39;, &#39;liggett_1997_domination_0002&#39;, &#39;liggett_1997_domination_0003&#39;, &#39;liggett_1997_domination_0004&#39;, &#39;liggett_1997_domination_0005&#39;, &#39;liggett_1997_domination_0006&#39;, &#39;liggett_1997_domination_0007&#39;, &#39;liggett_1997_domination_0008&#39;, &#39;liggett_1997_domination_0009&#39;, &#39;liggett_1997_domination_0010&#39;, &#39;liggett_1997_domination_0011&#39;, &#39;liggett_1997_domination_0012&#39;, &#39;liggett_1997_domination_0013&#39;, &#39;liggett_1997_domination_0014&#39;, &#39;liggett_1997_domination_0015&#39;, &#39;liggett_1997_domination_0016&#39;, &#39;liggett_1997_domination_0017&#39;, &#39;liggett_1997_domination_0018&#39;, &#39;liggett_1997_domination_0019&#39;, &#39;liggett_1997_domination_0020&#39;, &#39;liggett_1997_domination_0021&#39;, &#39;liggett_1997_domination_0022&#39;, &#39;liggett_1997_domination_0023&#39;, &#39;liggett_1997_domination_0024&#39;, &#39;liggett_1997_domination_0025&#39;, &#39;liggett_1997_domination_0026&#39;, &#39;orlandini_1994_random_0001&#39;, &#39;orlandini_1994_random_0002&#39;, &#39;orlandini_1994_random_0003&#39;, &#39;orlandini_1994_random_0004&#39;, &#39;orlandini_1994_random_0005&#39;, &#39;orlandini_1994_random_0006&#39;, &#39;orlandini_1994_random_0007&#39;, &#39;orlandini_1994_random_0008&#39;, &#39;orlandini_1994_random_0009&#39;, &#39;orlandini_1994_random_0010&#39;, &#39;orlandini_1994_random_0011&#39;, &#39;orlandini_1994_random_0012&#39;, &#39;orlandini_1998_asymptotics_0001&#39;, &#39;orlandini_1998_asymptotics_0002&#39;, &#39;orlandini_1998_asymptotics_0003&#39;, &#39;orlandini_1998_asymptotics_0004&#39;, &#39;orlandini_1998_asymptotics_0005&#39;, &#39;orlandini_1998_asymptotics_0006&#39;, &#39;orlandini_1998_asymptotics_0007&#39;, &#39;orlandini_1998_asymptotics_0008&#39;, &#39;orlandini_1998_asymptotics_0009&#39;, &#39;orlandini_1998_asymptotics_0010&#39;, &#39;orlandini_1998_asymptotics_0011&#39;, &#39;orlandini_1998_asymptotics_0012&#39;, &#39;orlandini_1998_asymptotics_0013&#39;, &#39;orlandini_1998_asymptotics_0014&#39;, &#39;orlandini_1998_asymptotics_0015&#39;, &#39;orlandini_1998_asymptotics_0016&#39;, &#39;panagiotis_2020_analyticity_0001&#39;, &#39;panagiotis_2020_analyticity_0002&#39;, &#39;panagiotis_2020_analyticity_0003&#39;, &#39;panagiotis_2020_analyticity_0004&#39;, &#39;panagiotis_2020_analyticity_0005&#39;, &#39;panagiotis_2020_analyticity_0006&#39;, &#39;panagiotis_2020_analyticity_0007&#39;, &#39;panagiotis_2020_analyticity_0008&#39;, &#39;panagiotis_2020_analyticity_0009&#39;, &#39;panagiotis_2020_analyticity_0010&#39;, &#39;panagiotis_2020_analyticity_0011&#39;, &#39;panagiotis_2020_analyticity_0012&#39;, &#39;panagiotis_2020_analyticity_0013&#39;, &#39;panagiotis_2020_analyticity_0014&#39;, &#39;panagiotis_2020_analyticity_0015&#39;, &#39;panagiotis_2020_analyticity_0016&#39;, &#39;panagiotis_2020_analyticity_0017&#39;, &#39;panagiotis_2020_analyticity_0018&#39;, &#39;panagiotis_2020_analyticity_0019&#39;, &#39;panagiotis_2020_analyticity_0020&#39;, &#39;paturej_2019_knots_0001&#39;, &#39;paturej_2019_knots_0002&#39;, &#39;paturej_2019_knots_0003&#39;, &#39;paturej_2019_knots_0004&#39;, &#39;paturej_2019_knots_0005&#39;, &#39;paturej_2019_knots_0006&#39;, &#39;paturej_2019_knots_0007&#39;, &#39;paturej_2019_knots_0008&#39;, &#39;paturej_2019_knots_0009&#39;, &#39;paturej_2019_knots_0010&#39;, &#39;paturej_2019_knots_0011&#39;, &#39;paturej_2019_knots_0012&#39;, &#39;paturej_2019_knots_0013&#39;, &#39;paturej_2019_knots_0014&#39;, &#39;paturej_2019_knots_0015&#39;, &#39;paturej_2019_knots_0016&#39;, &#39;paturej_2019_knots_0017&#39;, &#39;paturej_2019_knots_0018&#39;, &#39;paturej_2019_knots_0019&#39;, &#39;paturej_2019_knots_0020&#39;, &#39;paturej_2019_knots_0021&#39;, &#39;paturej_2019_knots_0022&#39;, &#39;paturej_2019_knots_0023&#39;, &#39;paturej_2019_knots_0024&#39;, &#39;paturej_2019_knots_0025&#39;, &#39;paturej_2019_knots_0026&#39;, &#39;paturej_2019_knots_0027&#39;, &#39;paturej_2019_knots_0028&#39;, &#39;paturej_2019_knots_0029&#39;, &#39;paturej_2019_knots_0030&#39;, &#39;paturej_2019_knots_0031&#39;, &#39;paturej_2019_knots_0032&#39;, &#39;paturej_2019_knots_0033&#39;, &#39;paturej_2019_knots_0034&#39;, &#39;paturej_2019_knots_0035&#39;, &#39;paturej_2019_knots_0036&#39;, &#39;rensburg_1990_topology_0001&#39;, &#39;rensburg_1990_topology_0002&#39;, &#39;rensburg_1990_topology_0003&#39;, &#39;rensburg_1990_topology_0004&#39;, &#39;rensburg_1990_topology_0005&#39;, &#39;rensburg_1990_topology_0006&#39;, &#39;rensburg_1990_topology_0007&#39;, &#39;rensburg_1990_topology_0008&#39;, &#39;rensburg_1990_topology_0009&#39;, &#39;rensburg_1990_topology_0010&#39;, &#39;rensburg_1990_topology_0011&#39;, &#39;rensburg_1990_topology_0012&#39;, &#39;rensburg_1990_topology_0013&#39;, &#39;rensburg_1990_topology_0014&#39;, &#39;rensburg_1990_topology_0015&#39;, &#39;rensburg_1990_topology_0016&#39;, &#39;rensburg_1990_topology_0017&#39;, &#39;rensburg_1990_topology_0018&#39;, &#39;scharlemann_1990_lectures_0001&#39;, &#39;scharlemann_1990_lectures_0002&#39;, &#39;scharlemann_1990_lectures_0003&#39;, &#39;scharlemann_1990_lectures_0004&#39;, &#39;scharlemann_1990_lectures_0005&#39;, &#39;scharlemann_1990_lectures_0006&#39;, &#39;scharlemann_1990_lectures_0007&#39;, &#39;scharlemann_1990_lectures_0008&#39;, &#39;scharlemann_1990_lectures_0009&#39;, &#39;scharlemann_1990_lectures_0010&#39;, &#39;scharlemann_1990_lectures_0011&#39;, &#39;soteros_1999_linking_0001&#39;, &#39;soteros_1999_linking_0002&#39;, &#39;soteros_1999_linking_0003&#39;, &#39;soteros_1999_linking_0004&#39;, &#39;soteros_1999_linking_0005&#39;, &#39;soteros_1999_linking_0006&#39;, &#39;soteros_1999_linking_0007&#39;, &#39;soteros_1999_linking_0008&#39;, &#39;soteros_1999_linking_0009&#39;, &#39;soteros_1999_linking_0010&#39;, &#39;soteros_1999_linking_0011&#39;, &#39;soteros_1999_linking_0012&#39;, &#39;soteros_1999_linking_0013&#39;, &#39;soteros_1999_linking_0014&#39;, &#39;soteros_1999_linking_0015&#39;, &#39;soteros_1999_linking_0016&#39;, &#39;soteros_1999_linking_0017&#39;, &#39;soteros_1999_linking_0018&#39;, &#39;soteros_1999_linking_0019&#39;, &#39;soteros_1999_linking_0020&#39;, &#39;soteros_1999_linking_0021&#39;, &#39;soteros_1999_linking_0022&#39;, &#39;soteros_1999_linking_0023&#39;, &#39;soteros_2009_brief_0001&#39;, &#39;soteros_2009_brief_0002&#39;, &#39;soteros_2009_brief_0003&#39;, &#39;soteros_2009_brief_0004&#39;, &#39;soteros_2009_brief_0005&#39;, &#39;timar_2011_boundary_0001&#39;, &#39;timar_2011_boundary_0002&#39;, &#39;timar_2011_boundary_0003&#39;, &#39;timar_2011_boundary_0004&#39;, &#39;timar_2011_boundary_0005&#39;, &#39;timar_2011_boundary_0006&#39;, &#39;timar_2011_boundary_0007&#39;, &#39;timar_2011_boundary_0008&#39;, &#39;vandenberg_2019_lower_0001&#39;, &#39;vandenberg_2019_lower_0002&#39;, &#39;vandenberg_2019_lower_0003&#39;, &#39;vandenberg_2019_lower_0004&#39;, &#39;vandenberg_2019_lower_0005&#39;, &#39;vandenberg_2019_lower_0006&#39;, &#39;vandenberg_2019_lower_0007&#39;, &#39;vandenberg_2019_lower_0008&#39;, &#39;vandenberg_2019_lower_0009&#39;, &#39;vandenberg_2019_lower_0010&#39;, &#39;vanrensburg_1990_knot_0001&#39;, &#39;vanrensburg_1990_knot_0002&#39;, &#39;vanrensburg_1990_knot_0003&#39;, &#39;vanrensburg_1990_knot_0004&#39;, &#39;vanrensburg_1990_knot_0005&#39;, &#39;vanrensburg_1990_knot_0006&#39;, &#39;vanrensburg_1990_knot_0007&#39;, &#39;vanrensburg_1990_knot_0008&#39;, &#39;vanrensburg_1990_knot_0009&#39;, &#39;vanrensburg_1990_knot_0010&#39;, &#39;vanrensburg_1990_knot_0011&#39;, &#39;vanrensburg_1990_knot_0012&#39;, &#39;vanrensburg_1990_knot_0013&#39;, &#39;vanrensburg_1990_knot_0014&#39;, &#39;vanrensburg_1990_knot_0015&#39;, &#39;vanrensburg_1990_knot_0016&#39;, &#39;vanrensburg_1990_knot_0017&#39;, &#39;vanrensburg_1990_knot_0018&#39;, &#39;vanrensburg_1990_knot_0019&#39;, &#39;vologodskii_1973_knot_0001&#39;, &#39;vologodskii_1973_knot_0002&#39;, &#39;vologodskii_1973_knot_0003&#39;, &#39;vologodskii_1973_knot_0004&#39;, &#39;vologodskii_1973_knot_0005&#39;] . . class ... paper_object . args of __init__ . paper_collection . | filename . | . attributes . name | parent_collection | pdf_path | num_pages | . names_of_pages | names_of_jpgs | names_of_xmls | . global_pdf_index | global_index_range | non_empty_list | . class paper_object( ): def __init__(self, paper_collection, filename): self.name = filename self.parent_collection = paper_collection self.global_pdf_index = self.get_global_pdf_index() self.pdf_path = PDF_PATH + &#39;/&#39; + filename + &#39;.pdf&#39; self.global_index_range = self.get_global_index_range() self.num_pages = self.global_index_range[1] - self.global_index_range[0] + 1 self.names_of_pages = self.list_page_names() self.names_of_jpgs = [ page_name + &#39;.jpg&#39; for page_name in self.names_of_pages ] self.names_of_xmls = [ page_name + &#39;.xml&#39; for page_name in self.names_of_pages ] self.non_empty_list = self.get_non_empty_list() def zpad_string(self, s, zpadding): s_z = s.zfill(zpadding) return s_z def get_txt_list(self): path = self.txt_path f = open(path, &quot;r&quot;) txt_list = f.readlines() f.close() return(txt_list) def get_num_pages(self): return len(self.names_of_pages) def list_page_names(self): a = self.global_index_range[0] b = self.global_index_range[1] global_index_set = range(a, b+1) names_list = [] for j in global_index_set: page_name = self.parent_collection.pages[j] names_list.append( page_name ) return names_list def get_global_pdf_index(self): collection = self.parent_collection collection_papers = collection.paper_list L = len(collection_papers) for j in range(L): if collection_papers[j] == self.name: index = j return(index) def get_global_index_range(self): collection = self.parent_collection global_pdf_index = self.global_pdf_index collection_ranges = collection.paper_ranges index_range = collection_ranges[ self.global_pdf_index ] return(index_range) def get_non_empty_list(self): index_range = self.global_index_range a = index_range[0] b = index_range[1] collection = self.parent_collection all_non_empt_indices = collection.non_empt_indices paper_non_empt = [ j for j in all_non_empt_indices if (j &gt;= a) and (j &lt;= b) ] return paper_non_empt . . class methods . get_txt_list( self ) | get_num_pages( self ) | list_page_names( self ) | . get_margin_boxes( self, hires ) | get_global_pdf_index( self ) | get_global_index_range( self ) | . get_non_empty_list( self ) | zpad_string( s, zpadding ) | . . . class ... page_object . args of __init__ . paper . | page_number . | . attributes . parent_paper | grandparent_collection | number | jpg_name | xml_name | . jpg_path | xml_path | non_empty | . from PIL import Image class page_object(): def __init__(self, paper, page_number): self.parent_paper = paper self.grandparent_collection = self.parent_paper.parent_collection self.number = page_number self.jpg_name = self.parent_paper.names_of_pages[ self.number - 1 ] self.xml_name = self.parent_paper.names_of_xmls[ self.number - 1 ] self.jpg_path = DATASET_DIR + &#39;/&#39; + &#39;jpg_pages&#39; + &#39;/&#39; + self.jpg_name self.xml_path = DATASET_DIR + &#39;/&#39; + &#39;labels_xml&#39; + &#39;/&#39; + self.xml_name self.non_empty = self.get_non_empty_status() def get_non_empty_status(self): paper = self.parent_paper paper_global_index_range = paper.global_index_range a = paper_global_index_range[0] global_index = a + self.number - 1 if global_index in paper.non_empty_list: return True else: return False def get_RGB(self): page = Image.open(self.jpg_path).convert(&quot;RGB&quot;) trans = transforms.Compose([transforms.ToTensor()]) page_tens = trans(page) #print( page_tens.size() ) #page_pil = Image.fromarray(np.array()).convert(&quot;RGB&quot;) return page def get_target(self): xml_path = self.xml_path xml = ET.parse(xml_path) xml_root = xml.getroot() is_empty = xml_root.tag == &#39;empty&#39; boxes = [] labels = [] iscrowd = [] area = [] if is_empty: # prep boxes, masks, labels boxes_tens = torch.as_tensor(boxes, dtype=torch.float32) boxes_tens = boxes_tens[:,None] labels = torch.as_tensor(labels, dtype = torch.int64) iscrowd = torch.as_tensor(iscrowd, dtype = torch.int64) area = torch.as_tensor(area, dtype= torch.float32) else: # prep boxes xmin_Elements = xml_root.findall(&quot;./object/bndbox/xmin&quot;) xmin = [ np.float(j.text) for j in xmin_Elements ] ymin_Elements = xml_root.findall(&quot;./object/bndbox/ymin&quot;) ymin = [ np.float(j.text) for j in ymin_Elements ] xmax_Elements = xml_root.findall(&quot;./object/bndbox/xmax&quot;) xmax = [ np.float(j.text) for j in xmax_Elements ] ymax_Elements = xml_root.findall(&quot;./object/bndbox/ymax&quot;) ymax = [ np.float(j.text) for j in ymax_Elements ] # The following are heights and widths h = torch.as_tensor(ymax) - torch.as_tensor(ymin) w = torch.as_tensor(xmax) - torch.as_tensor(xmin) # load labels labels = torch.ones( (len(xmin),), dtype = torch.int64) iscrowd = torch.zeros( (len(xmin),), dtype = torch.int64) ## load boxes and recast for j in range(0,len(xmin)): box = [ xmin[j], ymin[j], xmax[j], ymax[j] ] boxes.append(box) area.append( w[j]* h[j] ) #boxes_stack= torch.stack(boxes, dim=0) boxes_tens = torch.as_tensor(boxes, dtype=torch.float32) area = torch.as_tensor(area, dtype=torch.float32) # target target = {} target[&quot;boxes&quot;] = boxes_tens target[&quot;labels&quot;] = labels target[&quot;area&quot;] = area target[&quot;iscrowd&quot;] = iscrowd return target . . class methods . get_non_empty_status( self ) | get_RGB( self ) | get_target( self ) | . . model . . method ... get_fasterRCNN . args . num_classes | . import torchvision from torchvision.models.detection.faster_rcnn import FastRCNNPredictor def get_fasterRCNN(num_classes): model = torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=True) in_features = model.roi_heads.box_predictor.cls_score.in_features model.roi_heads.box_predictor = FastRCNNPredictor( in_features, num_classes ) return model . . . . . . model = get_fasterRCNN(2) . Downloading: &#34;https://download.pytorch.org/models/fasterrcnn_resnet50_fpn_coco-258fb6c6.pth&#34; to /root/.cache/torch/hub/checkpoints/fasterrcnn_resnet50_fpn_coco-258fb6c6.pth . . . . transform helpers, torchvision imports . %%shell git clone https://github.com/pytorch/vision.git cd vision git checkout v0.3.0 cp references/detection/utils.py ../ cp references/detection/transforms.py ../ cp references/detection/coco_eval.py ../ cp references/detection/engine.py ../ cp references/detection/coco_utils.py .. . Cloning into &#39;vision&#39;... remote: Enumerating objects: 44087, done. remote: Counting objects: 100% (9561/9561), done. remote: Compressing objects: 100% (2427/2427), done. remote: Total 44087 (delta 7442), reused 8798 (delta 6957), pack-reused 34526 Receiving objects: 100% (44087/44087), 72.31 MiB | 27.34 MiB/s, done. Resolving deltas: 100% (33986/33986), done. Note: checking out &#39;v0.3.0&#39;. You are in &#39;detached HEAD&#39; state. You can look around, make experimental changes and commit them, and you can discard any commits you make in this state without impacting any branches by performing another checkout. If you want to create a new branch to retain commits you create, you may do so (now or later) by using -b with the checkout command again. Example: git checkout -b &lt;new-branch-name&gt; HEAD is now at be376084 version check against PyTorch&#39;s CUDA version . . import utils import albumentations as A . from here . . class ... Compose . class Compose: &quot;&quot;&quot;Baseclass - composes several transforms together.&quot;&quot;&quot; def __init__(self, transforms): self.transforms = transforms def __repr__(self): return str([transform for transform in self.transforms]) . . . . class ... Repr&lt;/font&gt; . class Repr: &quot;&quot;&quot;Evaluatable string representation of an object&quot;&quot;&quot; def __repr__(self): return f&quot;{self.__class__.__name__}: {self.__dict__}&quot; . . . . class ... ComposeDouble . class ComposeDouble(Compose): &quot;&quot;&quot;Composes transforms for input-target pairs.&quot;&quot;&quot; def __call__(self, inp: np.ndarray, target: dict): for t in self.transforms: inp, target = t(inp, target) return inp, target . . . . class ... AlbumentationWrapper . class AlbumentationWrapper(Repr): &quot;&quot;&quot; A wrapper for the albumentation package. Bounding boxes are expected to be in xyxy format (pascal_voc). Bounding boxes cannot be larger than the spatial image&#39;s dimensions. Use Clip() if your bounding boxes are outside of the image, before using this wrapper. &quot;&quot;&quot; def __init__(self, albumentation, format: str = &quot;pascal_voc&quot;): self.albumentation = albumentation self.format = format def __call__(self, inp: np.ndarray, tar: dict): # input, target transform = A.Compose( [self.albumentation], bbox_params=A.BboxParams(format=self.format, label_fields=[&quot;class_labels&quot;]), ) out_dict = transform(image=inp, bboxes=tar[&quot;boxes&quot;], class_labels=tar[&quot;labels&quot;]) input_out = np.array(out_dict[&quot;image&quot;]) boxes = np.array(out_dict[&quot;bboxes&quot;]) labels = np.array(out_dict[&quot;class_labels&quot;]) tar[&quot;boxes&quot;] = boxes tar[&quot;labels&quot;] = labels return input_out, tar . . . . class ... FunctionWrapperDouble . class FunctionWrapperDouble(Repr): &quot;&quot;&quot;A function wrapper that returns a partial for an input-target pair.&quot;&quot;&quot; def __init__( self, function, input: bool = True, target: bool = False, *args, **kwargs, ): self.function = partial(function, *args, **kwargs) self.input = input self.target = target def __call__(self, inp: np.ndarray, tar: dict): if self.input: inp = self.function(inp) if self.target: tar = self.function(tar) return inp, tar . . transforms . from functools import partial transforms_training = ComposeDouble( [ AlbumentationWrapper(albumentation=A.SmallestMaxSize(max_size=512)), FunctionWrapperDouble(np.moveaxis, source=-1, destination=0), ] ) transforms_validation = ComposeDouble( [ AlbumentationWrapper(albumentation=A.SmallestMaxSize(max_size=1024)), FunctionWrapperDouble(np.moveaxis, source=-1, destination=0), ] ) transforms_test = ComposeDouble( [ AlbumentationWrapper(albumentation=A.SmallestMaxSize(max_size=1024)), FunctionWrapperDouble(np.moveaxis, source=-1, destination=0), ] ) . . torch dataset class . . class ... ObjectDetectionDataSet . __init__ args . paper_list . | transform . | . class ObjectDetectionDataSet(torch.utils.data.Dataset): def __init__(self, paper_list, transform: ComposeDouble = None): self.root = DATASET_DIR self.transform = transform self.collection_object = paper_collection_object( paper_list ) self.paper_object_list = [ paper_object( self.collection_object, paper_name ) for paper_name in self.collection_object.paper_list ] self.page_object_list = self.get_page_object_list() def __getitem__(self, index): page_obj = self.page_object_list[index] page_name = page_obj.jpg_name target_name = page_obj.xml_name page = page_obj.get_RGB() target = page_obj.get_target() image_id = torch.tensor([ index ]) target[&quot;image_id&quot;] = image_id target = { key: value.numpy() for key, value in target.items() } if self.transform == None: trans = [] resize = A.SmallestMaxSize( max_size = 1024, interpolation = 1 ) trans.append( resize ) action = A.Compose(trans) page, target = action(image = np.array(page), target = target) page = torch.from_numpy(np.array(page)).type(torch.float32) target = { key: torch.from_numpy(value).type(torch.int64) for key, value in target.items() } page_tens_permuted_1 = page.permute(0,1,2) page_tens_permuted_2 = page.permute(0,2,1) page_tens_permuted_3 = page.permute(1,0,2) page_tens_permuted_4 = page.permute(1,2,0) page_tens_permuted_5 = page.permute(2,0,1) page_tens_permuted_6 = page.permute(2,1,0) &quot;&quot;&quot; print( &quot; permutations in __getitem__ &quot;, &quot; n&quot;, page_tens_permuted_1.size(), &quot; : &quot;, &quot;(1)&quot;, &quot; n&quot;, page_tens_permuted_2.size(), &quot; : &quot;, &quot;(2)&quot;, &quot; n&quot;, page_tens_permuted_3.size(), &quot; : &quot;, &quot;(3)&quot;, &quot; n&quot;, page_tens_permuted_4.size(), &quot; : &quot;, &quot;(4)&quot;, &quot; n&quot;, page_tens_permuted_5.size(), &quot; : &quot;, &quot;(5)&quot;, &quot; n&quot;, page_tens_permuted_6.size(), &quot; : &quot;, &quot;(6)&quot;, &quot; n&quot; ) print(&quot; n n&quot;) &quot;&quot;&quot; return (page_tens_permuted_5, target, page_name, target_name) def __len__(self): return(len(self.page_object_list)) def make_page_objects_for_paper(self, paper): num_pages = paper.num_pages page_object_list = [] for j in range( num_pages ): page_object_list.append( page_object( paper, j+1 ) ) return page_object_list def get_page_object_list(self): paper_list = self.paper_object_list page_object_list = [] for paper in paper_list: page_objects_for_paper = self.make_page_objects_for_paper( paper ) page_object_list += page_objects_for_paper return page_object_list . . . define and load datasets . (starting from a list of non-empty pages) . We do an $80$-$10$-$10$ percentage split of the data, to be fed into three datasets: . dataset_train . | dataset_val . | dataset_test . | . There are . print(len(INDICES)) . . 381 . such non-empty pages. The above percentages are approximated by the split $305$-$38$-$38$ . The training dataset will be obtained from INDICES by taking a random subset of these indices of size $305$. . TRAIN_INDICES = random.sample(INDICES, 305) val_and_test_INDICES = list( set(INDICES) - set(TRAIN_INDICES) ) VAL_INDICES = random.sample(val_and_test_INDICES, 38) TEST_INDICES = list( set(val_and_test_INDICES) - set(VAL_INDICES)) . . The index sets TRAIN_INDICES, VAL_INDICES, TEST_INDICES each give rise to corresponding sets of paper names, when their entries are used as arguments to PAPER_LIST. These are TRAIN_PAPERS, VAL_PAPERS and TEST_PAPERS defined just below. . TRAIN_PAPERS = [ PAGE_LIST[j] for j in TRAIN_INDICES ] VAL_PAPERS = [ PAGE_LIST[j] for j in VAL_INDICES ] TEST_PAPERS = [ PAGE_LIST[j] for j in TEST_INDICES ] . . define datasets . dataset_train = ObjectDetectionDataSet(TRAIN_PAPERS, transform = True ) dataset_valid = ObjectDetectionDataSet(VAL_PAPERS, transform = True ) dataset_test = ObjectDetectionDataSet(TEST_PAPERS, transform = True ) . . . . . dataset full . dataset_full = ObjectDetectionDataSet([ PAGE_LIST[j] for j in INDICES ], transform = True ) . . dataloaders: dataloader_train, dataloader_valid, dataloader_test . from torch.utils.data import DataLoader dataloader_train = DataLoader( dataset = dataset_train, batch_size = 2, shuffle = True, num_workers = 4, collate_fn = utils.collate_fn, ) dataloader_valid = DataLoader( dataset = dataset_valid, batch_size = 2, shuffle = False, num_workers = 4, collate_fn = utils.collate_fn, ) dataloader_test = DataLoader( dataset = dataset_test, batch_size = 2, shuffle = False, num_workers = 4, collate_fn = utils.collate_fn, ) . . dataloader_full = DataLoader( dataset = dataset_full, batch_size = 1, shuffle = False, num_workers = 0, collate_fn = utils.collate_fn, ) . . hyperparameters, logging . params = { &quot;AUTHOR&quot;: &quot;the-ninth-wave&quot;, # &quot;SAVE_DIR&quot;: None, &quot;CLASSES&quot;: 2, &quot;SEED&quot;: 42, &quot;PROJECT&quot;: &quot;math-papers-with-Faster-RCNN&quot;, &quot;EXPERIMENT&quot;: &quot;math-papers-with-Faster-RCNN-EX-3&quot;, &quot;MAXEPOCHS&quot;: 50, } . . !pip install livelossplot --quiet . from livelossplot import PlotLosses liveloss = PlotLosses() ll_train_dict = {} ll_val_dict = {} ll_test_dict = {} . metrics . !git clone https://github.com/johschmidt42/PyTorch-Object-Detection-Faster-RCNN-Tutorial.git . Cloning into &#39;PyTorch-Object-Detection-Faster-RCNN-Tutorial&#39;... remote: Enumerating objects: 265, done. remote: Counting objects: 100% (265/265), done. remote: Compressing objects: 100% (179/179), done. remote: Total 265 (delta 123), reused 224 (delta 82), pack-reused 0 Receiving objects: 100% (265/265), 3.74 MiB | 1.03 MiB/s, done. Resolving deltas: 100% (123/123), done. . ls . coco_eval.py __pycache__/ utils.py coco_utils.py PyTorch-Object-Detection-Faster-RCNN-Tutorial/ vision/ drive/ sample_data/ engine.py transforms.py . cd PyTorch-Object-Detection-Faster-RCNN-Tutorial/ . /content/PyTorch-Object-Detection-Faster-RCNN-Tutorial . ls . anchor_script.ipynb README.md annotation_script.ipynb rename_files_script.ipynb dataset_exploration_script.ipynb setup.py inference_script.ipynb training_script.ipynb pytorch_faster_rcnn_tutorial/ training_script.py . import pytorch_faster_rcnn_tutorial from pytorch_faster_rcnn_tutorial.metrics.enumerators import MethodAveragePrecision from pytorch_faster_rcnn_tutorial.metrics.pascal_voc_evaluator import get_pascalvoc_metrics from pytorch_faster_rcnn_tutorial.utils import from_dict_to_boundingbox . cd .. . /content . ls . coco_eval.py __pycache__/ utils.py coco_utils.py PyTorch-Object-Detection-Faster-RCNN-Tutorial/ vision/ drive/ sample_data/ engine.py transforms.py . lightning module . . class ... FasterRCNN_lightning . args of __init__ . model | . from itertools import chain class FasterRCNN_lightning(pl.LightningModule): def __init__(self, model): super().__init__() self.model = model self.num_classes = 2 def forward(self, x): self.model.eval() return self.model(x) def training_step(self, batch, batch_idx): x, y, x_name, y_name = batch loss_dict_train = self.model(x,y) loss_train = sum(loss for loss in loss_dict_train.values()) if not math.isfinite(loss_train): print(&quot;Loss is {}, stopping training&quot;.format(loss_train)) sys.exit(1) self.log_dict(loss_dict_train) return loss_train def validation_step(self, batch, batch_idx): x, y, x_name, y_name = batch preds = self.model(x) gt_boxes = [ from_dict_to_boundingbox(target, name = name, groundtruth = True) for target, name in zip(y, x_name) ] gt_boxes = list(chain(*gt_boxes)) pred_boxes = [ from_dict_to_boundingbox(pred, name=name, groundtruth=False) for pred, name in zip(preds, x_name) ] pred_boxes = list(chain(*pred_boxes)) return {&quot;pred_boxes&quot;: pred_boxes, &quot;gt_boxes&quot;: gt_boxes} def validation_epoch_end(self, outs): gt_boxes = [out[&quot;gt_boxes&quot;] for out in outs] gt_boxes = list(chain(*gt_boxes)) pred_boxes = [out[&quot;pred_boxes&quot;] for out in outs] pred_boxes = list(chain(*pred_boxes)) metric = get_pascalvoc_metrics( gt_boxes = gt_boxes, det_boxes = pred_boxes, iou_threshold = .5, method = MethodAveragePrecision.EVERY_POINT_INTERPOLATION, generate_table = True, ) per_class, mAP = metric[&quot;per_class&quot;], metric[&quot;mAP&quot;] self.log(&quot;Validation_mAP&quot;, mAP) for key, value in per_class.items(): self.log(f&quot;Validation_AP_{key}&quot;, value[&quot;AP&quot;]) def test_step(self, batch, batch_idx): x, y, x_name, y_name = batch # Inference preds = self.model(x) gt_boxes = [ from_dict_to_boundingbox(target, name=name, groundtruth=True) for target, name in zip(y, x_name) ] gt_boxes = list(chain(*gt_boxes)) pred_boxes = [ from_dict_to_boundingbox(pred, name=name, groundtruth=False) for pred, name in zip(preds, x_name) ] pred_boxes = list(chain(*pred_boxes)) return {&quot;pred_boxes&quot;: pred_boxes, &quot;gt_boxes&quot;: gt_boxes} def test_epoch_end(self, outs): gt_boxes = [out[&quot;gt_boxes&quot;] for out in outs] gt_boxes = list(chain(*gt_boxes)) pred_boxes = [out[&quot;pred_boxes&quot;] for out in outs] pred_boxes = list(chain(*pred_boxes)) metric = get_pascalvoc_metrics( gt_boxes=gt_boxes, det_boxes=pred_boxes, iou_threshold=self.iou_threshold, method=MethodAveragePrecision.EVERY_POINT_INTERPOLATION, generate_table=True, ) per_class, mAP = metric[&quot;per_class&quot;], metric[&quot;mAP&quot;] self.log(&quot;Test_mAP&quot;, mAP) for key, value in per_class.items(): self.log(f&quot;Test_AP_{key}&quot;, value[&quot;AP&quot;]) def configure_optimizers(self): model_params = [p for p in self.model.parameters() if p.requires_grad] optimizer = torch.optim.SGD( model_params, lr = 0.005, momentum = 0.9, weight_decay = 0.0005 ) if self.current_epoch == 0: warmup_factor = 1. / 1000 warmup_iters = min(1000, len(dataloader_train) - 1) lr_scheduler = utils.warmup_lr_scheduler(optimizer, warmup_iters, warmup_factor) else: lr_scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size = 3, gamma = 0.1); return { &quot;optimizer&quot;: optimizer, &quot;lr_scheduler&quot;: lr_scheduler } . . class methods . forward( self, x ) | training_step( self, batch, batch_idx ) | validation_step( self, batch, batch_idx ) | . test_step( self, batch, batch_idx ) | configure_optimizers( self ) | . . . . . training setup . from pytorch_lightning import Trainer from pytorch_lightning import seed_everything from pytorch_lightning.callbacks import ( ModelCheckpoint, LearningRateMonitor, EarlyStopping, ) . logging w/ neptune . #from pytorch_lightning.loggers.neptune import NeptuneLogger . . #api_key=&quot;&quot; #import neptune.new as neptune #run = neptune.init( # project = &quot;the-ninth-wave/math-papers-with-Faster-RCNN&quot;, # api_token = api_key #) #neptune_logger = NeptuneLogger( # api_key = api_key, # project_name = f&#39;{params[&quot;AUTHOR&quot;]}/{&quot;math-papers-with-Faster-RCNN&quot;}&#39;, # use your neptune name here # experiment_name = params[&quot;EXPERIMENT&quot;], # params = params, #) #assert neptune_logger.name . . lightning init . task = FasterRCNN_lightning( model ) . callbacks . learningrate_callback = LearningRateMonitor( logging_interval = &quot;step&quot;, log_momentum = False ) . . trainer init . trainer = Trainer( gpus = 1, callbacks = [learningrate_callback], log_every_n_steps = 1, max_epochs = params[&quot;MAXEPOCHS&quot;], ) #logger = neptune_logger, . . GPU available: True, used: True TPU available: False, using: 0 TPU cores IPU available: False, using: 0 IPUs . training . start training . _____________________ . _____________________ . _____________________ . _____________________ . _____________________ . _____________________ . trainer.fit( task, train_dataloader = dataloader_train, val_dataloaders = dataloader_valid ) . LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0] | Name | Type | Params - 0 | model | FasterRCNN | 41.3 M - 41.1 M Trainable params 222 K Non-trainable params 41.3 M Total params 165.197 Total estimated model params size (MB) . $ vdots$ . $ vdots$ . $ vdots$ . $ vdots$ . $ vdots$ . $ vdots$ . $ vdots$ . _____________________ . _____________________ . _____________________ . _____________________ . _____________________ . _____________________ . _____________________ . end training . saving the model . torch.save( model.state_dict(), &#39;model_weights_7_50e_lightning.tar&#39;) . loading last model . We now load a previously saved model. The models are saved in the same directory as this notebook, which we now switch to: . most recent model: . model_weights_7_50e_lightning | . ls . coco_eval.py __pycache__/ utils.py coco_utils.py PyTorch-Object-Detection-Faster-RCNN-Tutorial/ vision/ drive/ sample_data/ engine.py transforms.py . We first load state dictionaries, and initialize the three models. . num_classes = 2 state_dict_last = torch.load(&quot;drive/Othercomputers/Normandie/GitHub/pytorch/vision/vision_projects/math_papers/model_weights_7_50e_lightning.tar&quot;) model_last = get_fasterRCNN( num_classes ) model_last.load_state_dict( state_dict_last ) . . &lt;All keys matched successfully&gt; . display parameters . display_dict_last = { &quot;tint&quot; : (128, 128, 255), # &quot;trans&quot; : .2, # degree of transparency &quot;outline&quot; : (128, 128, 255), &quot;width&quot; : 1 } display_dict_GT = { &quot;tint&quot;: (128,128,128), # grey &quot;trans&quot; : .1, # degree of transparency &quot;outline&quot; : (0,0,0), # black &quot;width&quot; : 3 } . . The next methods allows us to visualize the effect of postprocessing guesses with margin information. . . method ... return_margins . args . page : PIL image | . def return_margins(page): pg = page pg_np = np.array(pg) color_min = np.amin( pg_np, axis =2 ) width_min = np.amin( color_min, axis = 0) def f(x): x_norm = x / 255 return 1 - x_norm normalized = [ f(x) for x in width_min ] L = len(normalized) indices = range(L) j, k = 0, 0 while j &lt; L: if normalized[j] &gt; .1: break j += 1 while k &lt; L: if normalized[L - k - 1] &gt; .1: break k += 1 left_margin = j right_margin = L - k -1 return left_margin , right_margin . . return $ quad$ [left_margin, right_margin] . . to visualize . device = torch.device(&#39;cuda&#39;) if torch.cuda.is_available() else torch.device(&#39;cpu&#39;) . . method ... view_model_prediction . args . model | dataset | index | display_dict | . display_dict_GT | display_size | postprocess | . def view_model_prediction(model, dataset, index, display_dict, display_dict_GT, display_size, thresh = .95, postprocess=True): &quot;&quot;&quot;display calibration&quot;&quot;&quot; ## parameters for ground truth: # tint_GT = display_dict_GT[&quot;tint&quot;] trans_GT = display_dict_GT[&quot;trans&quot;] opacity_GT = int( 255 * trans_GT ) outline_GT = display_dict_GT[&quot;outline&quot;] width_GT = display_dict_GT[&quot;width&quot;] ## parameters for model: # tint = display_dict[&quot;tint&quot;] trans = display_dict[&quot;trans&quot;] opacity = int( 255 * trans ) outline = display_dict[&quot;outline&quot;] width = display_dict[&quot;width&quot;] img, target, img_name, target_name = dataset[index] model.to(device) model.eval() with torch.no_grad(): prediction = model([img.to(device)]) boxes = prediction[0][&quot;boxes&quot;] scores = prediction[0][&quot;scores&quot;] ds_page_list = dataset.page_object_list page_obj = ds_page_list[index] page = page_obj.get_RGB() page_np = np.array(page) H = page_np.shape[1] W = page_np.shape[0] page_pil = Image.fromarray(page_np) xmin, xmax = return_margins(page_pil) boxes_cpu = boxes.cpu() boxes_np = np.array(boxes_cpu) if postprocess == True: for box in boxes_np: box[0] = xmin box[2] = xmax overlay_GT = Image.new(&#39;RGBA&#39;, (H,W), tint_GT + (0,)) overlay = Image.new(&#39;RGBA&#39;, (H,W), tint + (0,)) draw_GT = ImageDraw.Draw(overlay_GT) draw = ImageDraw.Draw(overlay) boxes_GT = target[&quot;boxes&quot;] L_GT = len(boxes_GT) for j in range(0,L_GT): x, y, w, h = boxes_GT[j] shape = [x,y,w,h] draw_GT.rectangle(shape, fill = tint_GT + ( opacity_GT, ), outline = outline_GT, width = width_GT) L = len(boxes_np) for j in range(0,L): if scores[j] &gt;= thresh: x, y, w, h = boxes_np[j] shape = [x, y, w, h] draw.rectangle(shape, fill = tint + ( opacity, ), outline = outline, width = width) intermed = Image.alpha_composite(overlay_GT, overlay ) last = Image.alpha_composite(page_pil.convert(&quot;RGBA&quot;), intermed ) ds = display_size fig = plt.figure(figsize = ds ) f_rows, f_cols = 1, 1 fig.add_subplot( f_rows, f_cols, 1 ) plt.tick_params(left=False,bottom=False) plt.axis(&#39;off&#39;) plt.imshow(last) . . . index = 0 view_model_prediction(model_last, dataset_full, index, display_dict_last, display_dict_GT, (20,20), thresh = .80, postprocess=True) . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt;",
            "url": "https://the-ninth-wave.github.io/vision-projects/jupyter/2021/10/21/math-papers-v17.html",
            "relUrl": "/jupyter/2021/10/21/math-papers-v17.html",
            "date": " • Oct 21, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "math papers $\dots$ v.13",
            "content": ". $ quad$ Setup . imports . import os import sys import xml.etree.ElementTree as ET import re import time import itertools import logging import json from collections import OrderedDict import random import math import numpy as np import torch import torch.utils.data from torchvision import datasets, transforms from PIL import Image, ImageDraw import cv2 import matplotlib.pyplot as plt %matplotlib inline . dataset directory . DATASET_DIR = &quot;drive/Othercomputers/Normandie/GitHub/home/datasets/percolation_papers/ds_percolation_papers/papers&quot; . $ quad$ Dataset class . The class percolation_papers takes as arguments . dataset_dir : the dataset directory, and optionally, . | transforms : what transformations to be applied upon calling __getitem__(). . | . The class expects the data within the dataset directory to be organized as follows: . dataset_dir/ -- jpg_pages/ -- labels_xml/ . The folder jpg_pages/ contains a collection of .jpg files, one for each page. Each file is formatted as . author + &#39;_&#39; + year + &#39;_&#39; + page_number + &#39;.jpg&#39; . Corresponding .xml files with analogous naming convention are in folder labels_xml/ . . class $ quad$ percolation_papers . class percolation_papers(torch.utils.data.Dataset): def __init__(self, dataset_dir, transforms=None): super().__init__() self.root = dataset_dir self.transforms = transforms self.pages_path = os.path.join( self.root, &quot;jpg_pages&quot; ) self.labels_path = os.path.join( self.root, &quot;labels_xml&quot;) self.pages = list( sorted(os.listdir(self.pages_path))) self.labels = list( sorted(os.listdir(self.labels_path))) def __getitem__(self, index): file_name = self.pages[index] item_name = file_name.split(&#39;.&#39;)[0] auth, year, word, page_number = item_name.split(&#39;_&#39;) xml_file = item_name + &#39;.xml&#39; page_path = os.path.join(self.pages_path, file_name) boxes_path = os.path.join(self.labels_path, xml_file) page = Image.open(page_path).convert(&quot;RGB&quot;) xml = ET.parse(boxes_path) xml_root = xml.getroot() is_empty = xml_root.tag == &#39;empty&#39; boxes = [] labels = [] iscrowd = [] area = [] if is_empty: # prep boxes, masks, labels boxes_tens = torch.as_tensor(boxes, dtype=torch.float32) boxes_tens = boxes_tens[:,None] labels = torch.as_tensor(labels, dtype = torch.int64) iscrowd = torch.as_tensor(iscrowd, dtype = torch.int64) area = torch.as_tensor(area, dtype= torch.float32) else: # prep boxes xmin_Elements = xml_root.findall(&quot;./object/bndbox/xmin&quot;) xmin = [ np.float(j.text) for j in xmin_Elements ] ymin_Elements = xml_root.findall(&quot;./object/bndbox/ymin&quot;) ymin = [ np.float(j.text) for j in ymin_Elements ] xmax_Elements = xml_root.findall(&quot;./object/bndbox/xmax&quot;) xmax = [ np.float(j.text) for j in xmax_Elements ] ymax_Elements = xml_root.findall(&quot;./object/bndbox/ymax&quot;) ymax = [ np.float(j.text) for j in ymax_Elements ] # The following are heights and widths h = torch.as_tensor(ymax) - torch.as_tensor(ymin) w = torch.as_tensor(xmax) - torch.as_tensor(xmin) # load labels labels = torch.ones( (len(xmin),), dtype = torch.int64) iscrowd = torch.zeros( (len(xmin),), dtype = torch.int64) ## load boxes and recast for j in range(0,len(xmin)): box = [ xmin[j], ymin[j], xmax[j], ymax[j] ] boxes.append(box) area.append( w[j]* h[j] ) #boxes_stack= torch.stack(boxes, dim=0) boxes_tens = torch.as_tensor(boxes, dtype=torch.float32) area = torch.as_tensor(area, dtype=torch.float32) image_id = torch.tensor([index]) not_empty_indicator = 1 if is_empty: not_empty_indicator = 0 not_empty_ind_tens = torch.tensor([not_empty_indicator]) # target target = {} target[&quot;boxes&quot;] = boxes_tens target[&quot;labels&quot;] = labels target[&quot;image_id&quot;] = image_id target[&quot;area&quot;] = area target[&quot;iscrowd&quot;] = iscrowd target[&quot;not_empty&quot;] = not_empty_ind_tens if self.transforms is not None: page, target = self.transforms(page, target) # return return (page, target) def __len__(self): return(len(self.pages)) . . $ quad$ Model definition . Here we define a function for loading the Faster RCNN architecture, get_obj_detection_model, which takes as argument . num_classes: the number of classes considered in the dataset, including the background. | . It returns the Faster RCNN model with ResNet-50 pretrained backbone. . . method $ quad$ get_obj_detection_model . import torchvision from torchvision.models.detection.faster_rcnn import FastRCNNPredictor def get_obj_detection_model(num_classes): model = torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=True) in_features = model.roi_heads.box_predictor.cls_score.in_features model.roi_heads.box_predictor = FastRCNNPredictor( in_features, num_classes ) return model . . $ quad$ Data transforms . clone into pytorch/vision for transforms utilities . %%shell git clone https://github.com/pytorch/vision.git cd vision git checkout v0.3.0 cp references/detection/utils.py ../ cp references/detection/transforms.py ../ cp references/detection/coco_eval.py ../ cp references/detection/engine.py ../ cp references/detection/coco_utils.py .. . Cloning into &#39;vision&#39;... remote: Enumerating objects: 39139, done. remote: Counting objects: 100% (4637/4637), done. remote: Compressing objects: 100% (1303/1303), done. remote: Total 39139 (delta 3587), reused 4169 (delta 3231), pack-reused 34502 Receiving objects: 100% (39139/39139), 52.11 MiB | 33.04 MiB/s, done. Resolving deltas: 100% (30121/30121), done. Note: checking out &#39;v0.3.0&#39;. You are in &#39;detached HEAD&#39; state. You can look around, make experimental changes and commit them, and you can discard any commits you make in this state without impacting any branches by performing another checkout. If you want to create a new branch to retain commits you create, you may do so (now or later) by using -b with the checkout command again. Example: git checkout -b &lt;new-branch-name&gt; HEAD is now at be376084 version check against PyTorch&#39;s CUDA version . . The method get_transforms, below, takes no arguments. . . method $ quad$ get_transforms . import utils import transforms as T def get_transforms(): trans = [] trans.append(T.ToTensor()) #trans.append(torchvision.transforms.Resize((300,150))) return T.Compose(trans) . . $ quad$ Sample only non-empty pages . Our dataset consists of a collection of full papers. In particular, some pages (and a few papers) have no labeled equations. The next piece of code counts the number of pages which have a labeled equation. We call such pages &quot;non-empty&quot;, and call others &quot;empty&quot;. There are . with open(&quot;drive/Othercomputers/Normandie/GitHub/home/datasets/percolation_papers/ds_percolation_papers/empty_0_box_1.txt&quot;, &quot;r&quot;) as tf: indicator_list = tf.read().split(&#39; n&#39;) num_non_empt = 0 for i in indicator_list: if i == &#39;1&#39;: num_non_empt += 1 print(num_non_empt) . 381 . such pages. . We next load every page in the dataset into dataset_full, an instance of our percolation_papers dataset class. . dataset_full = percolation_papers(dataset_dir=DATASET_DIR, transforms = get_transforms()) . There are . len(dataset_full.pages) . 937 . pages total, including both non-empty and empty pages. . Going beyond counting the number of non-empty pages, let us extract the indices of these pages, for purposes of using Subset method. The next piece of code does this, organizing these indices into a list called non_empt_indices. . non_empt_indices = [] for i in range(len(indicator_list)): if indicator_list[i] == &#39;1&#39;: non_empt_indices.append(i) . The dataset we work with, to be split into test and train sets, is called dataset, defined as follows: . dataset = torch.utils.data.Subset( dataset_full, non_empt_indices) . $ quad$ Define and load test &amp; training datasets . Thus we will use the following $90-10$ split: training size is $343$ while validation size is $38$. . splitting to train and test sets . indices = torch.randperm(len(dataset)).tolist() dataset_train = torch.utils.data.Subset(dataset, indices[:-38]) dataset_test = torch.utils.data.Subset(dataset, indices[-38:]) . dataloaders . dataloader_train = torch.utils.data.DataLoader( dataset_train, batch_size=2, shuffle=True, num_workers=4, collate_fn=utils.collate_fn) dataloader_test = torch.utils.data.DataLoader( dataset_test, batch_size=1, shuffle=False, num_workers=4, collate_fn=utils.collate_fn) . $ quad$ Training setup . set device . device = torch.device(&#39;cuda&#39;) if torch.cuda.is_available() else torch.device(&#39;cpu&#39;) . initialize model, send to device . num_classes = 2 model = get_obj_detection_model(num_classes) model.to(device); . Downloading: &#34;https://download.pytorch.org/models/fasterrcnn_resnet50_fpn_coco-258fb6c6.pth&#34; to /root/.cache/torch/hub/checkpoints/fasterrcnn_resnet50_fpn_coco-258fb6c6.pth . set optimizer (SGD), learning rate scheduler . params = [p for p in model.parameters() if p.requires_grad] optimizer = torch.optim.SGD(params, lr=0.005, momentum=0.9, weight_decay=0.0005) lr_scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=3, gamma=0.1); . The next method handles one epoch of training: it puts the model into training mode, sets training dynamics (including warming up the dynamics on the first epoch), and logs training metrics. . . method $ quad$ train_one_epoch . def train_one_epoch(model, optimizer, dataloader, device, epoch, print_freq): # training mode model.train() # metric logger met_log = utils.MetricLogger(delimiter=&quot; &quot;) met_log.add_meter(&#39;lr&#39;, utils.SmoothedValue(window_size=1, fmt=&#39;{value:.6f}&#39;) ) header = &#39;Epoch: [{}]&#39;.format(epoch) ### ## learning rate # initialize learning rate scheduler lr_scheduler = None # warmup in first epoch if epoch == 0: warmup_factor = 1. / 1000 warmup_iters = min(1000, len(dataloader) - 1) lr_scheduler = utils.warmup_lr_scheduler(optimizer, warmup_iters, warmup_factor) ### ## send (image,target)s to device (??) # for images, targets in met_log.log_every(dataloader, print_freq, header): images = list(image.to(device) for image in images) targets = [{k: v.to(device) for k, v in t.items()} for t in targets] loss_dict = model(images, targets) losses = sum(loss for loss in loss_dict.values()) # (??) reduce losses over all # GPUs for logging purposes loss_dict_reduced = utils.reduce_dict(loss_dict) losses_reduced = sum(loss for loss in loss_dict_reduced.values()) loss_value = losses_reduced.item() if not math.isfinite(loss_value): print(&quot;Loss is {}, stopping training&quot;.format(loss_value)) print(loss_dict_reduced) sys.exit(1) optimizer.zero_grad() losses.backward() optimizer.step() if lr_scheduler is not None: lr_scheduler.step() met_log.update(loss=losses_reduced, **loss_dict_reduced) met_log.update(lr=optimizer.param_groups[0][&quot;lr&quot;]) return met_log . . The next functions are taken from cocotools: . get_coco_api_from_dataset, | convert_to_coco_api, | _get_iou_types. | . There was only a minor adjustment made in the second function to handle lists of boxes of length zero. . . method $ quad$ get_coco_api_from dataset . $ vdots$ . def get_coco_api_from_dataset(dataset): for _ in range(10): if isinstance(dataset, torchvision.datasets.CocoDetection): break if isinstance(dataset, torch.utils.data.Subset): dataset = dataset.dataset if isinstance(dataset, torchvision.datasets.CocoDetection): return dataset.coco return convert_to_coco_api(dataset) . . . method $ quad$ convert_to_coco_api . from pycocotools.coco import COCO def convert_to_coco_api(ds): coco_ds = COCO() # annotation IDs need to start at 1, not 0, see torchvision issue #1530 ann_id = 1 dataset = {&#39;images&#39;: [], &#39;categories&#39;: [], &#39;annotations&#39;: []} categories = set() for img_idx in range(len(ds)): # find better way to get target # targets = ds.get_annotations(img_idx) img, targets = ds[img_idx] image_id = targets[&quot;image_id&quot;].item() img_dict = {} img_dict[&#39;id&#39;] = image_id img_dict[&#39;height&#39;] = img.shape[-2] img_dict[&#39;width&#39;] = img.shape[-1] dataset[&#39;images&#39;].append(img_dict) bboxes = targets[&quot;boxes&quot;] #print(&quot;boxes&quot;, &quot; n&quot;, type(bboxes), bboxes.shape,&quot; n n&quot;) #print(bboxes.shape == &quot;[0]&quot;) if len(bboxes) == 0: bboxes = bboxes[:,None] bboxes[:, 2:] -= bboxes[:, :2] bboxes = bboxes.tolist() labels = targets[&#39;labels&#39;].tolist() areas = targets[&#39;area&#39;].tolist() iscrowd = targets[&#39;iscrowd&#39;].tolist() if &#39;masks&#39; in targets: masks = targets[&#39;masks&#39;] # make masks Fortran contiguous for coco_mask masks = masks.permute(0, 2, 1).contiguous().permute(0, 2, 1) if &#39;keypoints&#39; in targets: keypoints = targets[&#39;keypoints&#39;] keypoints = keypoints.reshape(keypoints.shape[0], -1).tolist() num_objs = len(bboxes) for i in range(num_objs): ann = {} ann[&#39;image_id&#39;] = image_id ann[&#39;bbox&#39;] = bboxes[i] ann[&#39;category_id&#39;] = labels[i] categories.add(labels[i]) ann[&#39;area&#39;] = areas[i] ann[&#39;iscrowd&#39;] = iscrowd[i] ann[&#39;id&#39;] = ann_id if &#39;masks&#39; in targets: ann[&quot;segmentation&quot;] = coco_mask.encode(masks[i].numpy()) if &#39;keypoints&#39; in targets: ann[&#39;keypoints&#39;] = keypoints[i] ann[&#39;num_keypoints&#39;] = sum(k != 0 for k in keypoints[i][2::3]) dataset[&#39;annotations&#39;].append(ann) ann_id += 1 dataset[&#39;categories&#39;] = [{&#39;id&#39;: i} for i in sorted(categories)] coco_ds.dataset = dataset coco_ds.createIndex() return coco_ds . . . method $ quad$ _get_iou_types . def _get_iou_types(model): model_without_ddp = model if isinstance(model, torch.nn.parallel.DistributedDataParallel): model_without_ddp = model.module iou_types = [&quot;bbox&quot;] if isinstance(model_without_ddp, torchvision.models.detection.MaskRCNN): iou_types.append(&quot;segm&quot;) if isinstance(model_without_ddp, torchvision.models.detection.KeypointRCNN): iou_types.append(&quot;keypoints&quot;) return iou_types . . These three functions are needed to use the CocoEvaluator, which we use at the end of each epoch. We call with a single method evaluate. . . method $ quad$ evaluate . from coco_eval import CocoEvaluator def evaluate(model, dataloader, device): # record number of threads in use n_threads = torch.get_num_threads() &quot;&quot;&quot; existing comment: FIXME remove this and make paste_masks_in_image run on the GPU, is this relevant to us? &quot;&quot;&quot; # switch to single thread, will revert back # at the end of the method. torch.set_num_threads(1) # cpu cpu_device = torch.device(&quot;cpu&quot;) # model into evaluation mode model.eval() # metric logger met_log = utils.MetricLogger(delimiter=&quot; &quot;) header = &#39;Test:&#39; # the next call is what throws it, so this function # is now explicitly written out above. coco = get_coco_api_from_dataset(dataloader.dataset) # so compiler doesn&#39;t see the rest: iou_types = _get_iou_types(model) # what are IOU types? coco_evaluator = CocoEvaluator(coco, iou_types) # loop for images, targets in met_log.log_every(dataloader, 100, header): images = list(img.to(device) for img in images) if torch.cuda.is_available(): torch.cuda.synchronize() model_time = time.time() outputs = model(images) outputs = [{k: v.to(device) for k, v in t.items()} for t in outputs] model_time = time.time() - model_time res = {target[&quot;image_id&quot;].item(): output for target, output in zip(targets, outputs)} evaluator_time = time.time() coco_evaluator.update(res) evaluator_time = time.time() - evaluator_time met_log.update(model_time=model_time, evaluator_time=evaluator_time) # gather the stats from all processes met_log.synchronize_between_processes() print(&quot;Averaged stats:&quot;, met_log) coco_evaluator.synchronize_between_processes() # accumulate predictions from all images coco_evaluator.accumulate() coco_evaluator.summarize() # rest number of threads torch.set_num_threads(n_threads) return coco_evaluator . . $ quad$ Training . num_epochs = 30 . for epoch in range(num_epochs): train_one_epoch(model, optimizer, dataloader_train, device, epoch, print_freq=10) lr_scheduler.step() evaluate(model, dataloader_test, device=device) . Epoch: [0] [ 0/172] eta: 0:05:21 lr: 0.000034 loss: 5.0912 (5.0912) loss_classifier: 0.5773 (0.5773) loss_box_reg: 0.0108 (0.0108) loss_objectness: 3.9440 (3.9440) loss_rpn_box_reg: 0.5591 (0.5591) time: 1.8691 data: 1.4737 max mem: 3313 Epoch: [0] [ 10/172] eta: 0:01:32 lr: 0.000326 loss: 1.5639 (3.0790) loss_classifier: 0.4175 (0.3884) loss_box_reg: 0.0073 (0.0169) loss_objectness: 0.4762 (2.0351) loss_rpn_box_reg: 0.6969 (0.6385) time: 0.5737 data: 0.1852 max mem: 3651 Epoch: [0] [ 20/172] eta: 0:01:14 lr: 0.000618 loss: 0.9557 (2.0051) loss_classifier: 0.1533 (0.2543) loss_box_reg: 0.0442 (0.0473) loss_objectness: 0.1618 (1.1467) loss_rpn_box_reg: 0.5309 (0.5569) time: 0.4221 data: 0.0406 max mem: 3651 Epoch: [0] [ 30/172] eta: 0:01:06 lr: 0.000911 loss: 0.8940 (1.6843) loss_classifier: 0.0900 (0.2046) loss_box_reg: 0.0513 (0.0456) loss_objectness: 0.1839 (0.8659) loss_rpn_box_reg: 0.5112 (0.5682) time: 0.4134 data: 0.0291 max mem: 3653 Epoch: [0] [ 40/172] eta: 0:01:00 lr: 0.001203 loss: 0.8125 (1.4456) loss_classifier: 0.0771 (0.1813) loss_box_reg: 0.0290 (0.0483) loss_objectness: 0.1565 (0.6861) loss_rpn_box_reg: 0.4928 (0.5300) time: 0.4204 data: 0.0324 max mem: 3653 Epoch: [0] [ 50/172] eta: 0:00:54 lr: 0.001495 loss: 0.5713 (1.2675) loss_classifier: 0.0643 (0.1606) loss_box_reg: 0.0441 (0.0489) loss_objectness: 0.1061 (0.5714) loss_rpn_box_reg: 0.3595 (0.4866) time: 0.4108 data: 0.0295 max mem: 3653 Epoch: [0] [ 60/172] eta: 0:00:48 lr: 0.001787 loss: 0.5266 (1.1488) loss_classifier: 0.0672 (0.1485) loss_box_reg: 0.0511 (0.0534) loss_objectness: 0.0864 (0.4937) loss_rpn_box_reg: 0.3210 (0.4532) time: 0.3966 data: 0.0238 max mem: 3653 Epoch: [0] [ 70/172] eta: 0:00:44 lr: 0.002079 loss: 0.4937 (1.0563) loss_classifier: 0.0695 (0.1384) loss_box_reg: 0.0570 (0.0564) loss_objectness: 0.0810 (0.4344) loss_rpn_box_reg: 0.2698 (0.4270) time: 0.3928 data: 0.0232 max mem: 3653 Epoch: [0] [ 80/172] eta: 0:00:39 lr: 0.002371 loss: 0.4506 (0.9854) loss_classifier: 0.0766 (0.1322) loss_box_reg: 0.0639 (0.0582) loss_objectness: 0.0643 (0.3889) loss_rpn_box_reg: 0.2482 (0.4061) time: 0.4045 data: 0.0307 max mem: 3653 Epoch: [0] [ 90/172] eta: 0:00:35 lr: 0.002663 loss: 0.4343 (0.9292) loss_classifier: 0.0646 (0.1251) loss_box_reg: 0.0554 (0.0592) loss_objectness: 0.0553 (0.3523) loss_rpn_box_reg: 0.2482 (0.3925) time: 0.4110 data: 0.0280 max mem: 3653 Epoch: [0] [100/172] eta: 0:00:30 lr: 0.002955 loss: 0.4683 (0.8861) loss_classifier: 0.0595 (0.1184) loss_box_reg: 0.0535 (0.0588) loss_objectness: 0.0538 (0.3227) loss_rpn_box_reg: 0.2842 (0.3862) time: 0.4072 data: 0.0193 max mem: 3653 Epoch: [0] [110/172] eta: 0:00:26 lr: 0.003247 loss: 0.5129 (0.8529) loss_classifier: 0.0631 (0.1137) loss_box_reg: 0.0583 (0.0599) loss_objectness: 0.0496 (0.2979) loss_rpn_box_reg: 0.3165 (0.3814) time: 0.3952 data: 0.0216 max mem: 3653 Epoch: [0] [120/172] eta: 0:00:21 lr: 0.003539 loss: 0.5143 (0.8239) loss_classifier: 0.0684 (0.1106) loss_box_reg: 0.0756 (0.0638) loss_objectness: 0.0471 (0.2773) loss_rpn_box_reg: 0.2921 (0.3721) time: 0.3921 data: 0.0260 max mem: 3653 Epoch: [0] [130/172] eta: 0:00:17 lr: 0.003832 loss: 0.5143 (0.7998) loss_classifier: 0.0695 (0.1080) loss_box_reg: 0.0916 (0.0667) loss_objectness: 0.0471 (0.2607) loss_rpn_box_reg: 0.2640 (0.3644) time: 0.4054 data: 0.0258 max mem: 3653 Epoch: [0] [140/172] eta: 0:00:13 lr: 0.004124 loss: 0.5401 (0.7815) loss_classifier: 0.0653 (0.1043) loss_box_reg: 0.0948 (0.0687) loss_objectness: 0.0394 (0.2455) loss_rpn_box_reg: 0.3107 (0.3630) time: 0.4098 data: 0.0300 max mem: 3653 Epoch: [0] [150/172] eta: 0:00:09 lr: 0.004416 loss: 0.5173 (0.7673) loss_classifier: 0.0581 (0.1028) loss_box_reg: 0.0948 (0.0732) loss_objectness: 0.0350 (0.2319) loss_rpn_box_reg: 0.3135 (0.3595) time: 0.4120 data: 0.0279 max mem: 3653 Epoch: [0] [160/172] eta: 0:00:05 lr: 0.004708 loss: 0.5069 (0.7502) loss_classifier: 0.0716 (0.1011) loss_box_reg: 0.0875 (0.0738) loss_objectness: 0.0415 (0.2233) loss_rpn_box_reg: 0.2756 (0.3521) time: 0.4138 data: 0.0207 max mem: 3653 Epoch: [0] [170/172] eta: 0:00:00 lr: 0.005000 loss: 0.5195 (0.7396) loss_classifier: 0.0798 (0.0997) loss_box_reg: 0.0875 (0.0770) loss_objectness: 0.0608 (0.2141) loss_rpn_box_reg: 0.2756 (0.3488) time: 0.3983 data: 0.0194 max mem: 3653 Epoch: [0] [171/172] eta: 0:00:00 lr: 0.005000 loss: 0.5195 (0.7388) loss_classifier: 0.0716 (0.0994) loss_box_reg: 0.0875 (0.0773) loss_objectness: 0.0608 (0.2130) loss_rpn_box_reg: 0.2756 (0.3491) time: 0.3892 data: 0.0191 max mem: 3653 Epoch: [0] Total time: 0:01:11 (0.4151 s / it) creating index... index created! Test: [ 0/38] eta: 0:00:17 model_time: 0.1239 (0.1239) evaluator_time: 0.0182 (0.0182) time: 0.4638 data: 0.3106 max mem: 3653 Test: [37/38] eta: 0:00:00 model_time: 0.0756 (0.0775) evaluator_time: 0.0065 (0.0090) time: 0.1025 data: 0.0080 max mem: 3653 Test: Total time: 0:00:04 (0.1204 s / it) Averaged stats: model_time: 0.0756 (0.0775) evaluator_time: 0.0065 (0.0090) Accumulating evaluation results... DONE (t=0.02s). IoU metric: bbox Average Precision (AP) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.161 Average Precision (AP) @[ IoU=0.50 | area= all | maxDets=100 ] = 0.466 Average Precision (AP) @[ IoU=0.75 | area= all | maxDets=100 ] = 0.029 Average Precision (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.161 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 1 ] = 0.123 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 10 ] = 0.352 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.416 Average Recall (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.416 Epoch: [1] [ 0/172] eta: 0:02:50 lr: 0.005000 loss: 0.5078 (0.5078) loss_classifier: 0.0679 (0.0679) loss_box_reg: 0.1338 (0.1338) loss_objectness: 0.0325 (0.0325) loss_rpn_box_reg: 0.2736 (0.2736) time: 0.9934 data: 0.5893 max mem: 3653 Epoch: [1] [ 10/172] eta: 0:01:12 lr: 0.005000 loss: 0.5140 (0.4914) loss_classifier: 0.0619 (0.0580) loss_box_reg: 0.0935 (0.1043) loss_objectness: 0.0393 (0.0506) loss_rpn_box_reg: 0.2899 (0.2786) time: 0.4492 data: 0.0670 max mem: 3653 Epoch: [1] [ 20/172] eta: 0:01:06 lr: 0.005000 loss: 0.4889 (0.4945) loss_classifier: 0.0619 (0.0630) loss_box_reg: 0.0922 (0.1066) loss_objectness: 0.0444 (0.0484) loss_rpn_box_reg: 0.2758 (0.2765) time: 0.4083 data: 0.0165 max mem: 3653 Epoch: [1] [ 30/172] eta: 0:00:59 lr: 0.005000 loss: 0.4495 (0.4739) loss_classifier: 0.0598 (0.0588) loss_box_reg: 0.1112 (0.1063) loss_objectness: 0.0444 (0.0457) loss_rpn_box_reg: 0.2429 (0.2631) time: 0.4043 data: 0.0185 max mem: 3653 Epoch: [1] [ 40/172] eta: 0:00:54 lr: 0.005000 loss: 0.4044 (0.4512) loss_classifier: 0.0511 (0.0564) loss_box_reg: 0.0871 (0.0988) loss_objectness: 0.0402 (0.0438) loss_rpn_box_reg: 0.2228 (0.2523) time: 0.3922 data: 0.0177 max mem: 3653 Epoch: [1] [ 50/172] eta: 0:00:49 lr: 0.005000 loss: 0.3942 (0.4509) loss_classifier: 0.0511 (0.0587) loss_box_reg: 0.0797 (0.0994) loss_objectness: 0.0339 (0.0427) loss_rpn_box_reg: 0.2188 (0.2500) time: 0.3936 data: 0.0169 max mem: 3653 Epoch: [1] [ 60/172] eta: 0:00:45 lr: 0.005000 loss: 0.4218 (0.4580) loss_classifier: 0.0483 (0.0578) loss_box_reg: 0.0882 (0.1031) loss_objectness: 0.0307 (0.0433) loss_rpn_box_reg: 0.2593 (0.2538) time: 0.3894 data: 0.0178 max mem: 3653 Epoch: [1] [ 70/172] eta: 0:00:41 lr: 0.005000 loss: 0.3961 (0.4510) loss_classifier: 0.0394 (0.0570) loss_box_reg: 0.0882 (0.1006) loss_objectness: 0.0402 (0.0446) loss_rpn_box_reg: 0.2281 (0.2488) time: 0.3935 data: 0.0181 max mem: 3653 Epoch: [1] [ 80/172] eta: 0:00:37 lr: 0.005000 loss: 0.3790 (0.4472) loss_classifier: 0.0453 (0.0572) loss_box_reg: 0.0682 (0.0984) loss_objectness: 0.0418 (0.0438) loss_rpn_box_reg: 0.2042 (0.2478) time: 0.3953 data: 0.0177 max mem: 3653 Epoch: [1] [ 90/172] eta: 0:00:33 lr: 0.005000 loss: 0.3808 (0.4449) loss_classifier: 0.0469 (0.0571) loss_box_reg: 0.0708 (0.0980) loss_objectness: 0.0395 (0.0434) loss_rpn_box_reg: 0.2135 (0.2464) time: 0.3975 data: 0.0181 max mem: 3653 Epoch: [1] [100/172] eta: 0:00:28 lr: 0.005000 loss: 0.3808 (0.4359) loss_classifier: 0.0435 (0.0560) loss_box_reg: 0.0666 (0.0948) loss_objectness: 0.0317 (0.0436) loss_rpn_box_reg: 0.1940 (0.2415) time: 0.3925 data: 0.0190 max mem: 3653 Epoch: [1] [110/172] eta: 0:00:24 lr: 0.005000 loss: 0.3406 (0.4294) loss_classifier: 0.0471 (0.0567) loss_box_reg: 0.0740 (0.0945) loss_objectness: 0.0294 (0.0429) loss_rpn_box_reg: 0.1792 (0.2353) time: 0.3974 data: 0.0202 max mem: 3653 Epoch: [1] [120/172] eta: 0:00:20 lr: 0.005000 loss: 0.3406 (0.4261) loss_classifier: 0.0634 (0.0571) loss_box_reg: 0.0847 (0.0943) loss_objectness: 0.0346 (0.0425) loss_rpn_box_reg: 0.1663 (0.2322) time: 0.4003 data: 0.0187 max mem: 3653 Epoch: [1] [130/172] eta: 0:00:16 lr: 0.005000 loss: 0.3767 (0.4237) loss_classifier: 0.0571 (0.0571) loss_box_reg: 0.0989 (0.0941) loss_objectness: 0.0299 (0.0420) loss_rpn_box_reg: 0.1905 (0.2304) time: 0.3966 data: 0.0174 max mem: 3653 Epoch: [1] [140/172] eta: 0:00:12 lr: 0.005000 loss: 0.3495 (0.4152) loss_classifier: 0.0441 (0.0559) loss_box_reg: 0.0719 (0.0923) loss_objectness: 0.0239 (0.0410) loss_rpn_box_reg: 0.1873 (0.2260) time: 0.4033 data: 0.0173 max mem: 3653 Epoch: [1] [150/172] eta: 0:00:08 lr: 0.005000 loss: 0.3297 (0.4108) loss_classifier: 0.0381 (0.0552) loss_box_reg: 0.0719 (0.0926) loss_objectness: 0.0203 (0.0397) loss_rpn_box_reg: 0.1693 (0.2233) time: 0.3982 data: 0.0162 max mem: 3653 Epoch: [1] [160/172] eta: 0:00:04 lr: 0.005000 loss: 0.3103 (0.4051) loss_classifier: 0.0325 (0.0539) loss_box_reg: 0.0743 (0.0917) loss_objectness: 0.0222 (0.0389) loss_rpn_box_reg: 0.1682 (0.2207) time: 0.3935 data: 0.0176 max mem: 3653 Epoch: [1] [170/172] eta: 0:00:00 lr: 0.005000 loss: 0.3399 (0.4062) loss_classifier: 0.0416 (0.0537) loss_box_reg: 0.0678 (0.0916) loss_objectness: 0.0264 (0.0407) loss_rpn_box_reg: 0.1919 (0.2202) time: 0.3873 data: 0.0181 max mem: 3653 Epoch: [1] [171/172] eta: 0:00:00 lr: 0.005000 loss: 0.3557 (0.4065) loss_classifier: 0.0416 (0.0545) loss_box_reg: 0.0678 (0.0918) loss_objectness: 0.0266 (0.0407) loss_rpn_box_reg: 0.1919 (0.2195) time: 0.3742 data: 0.0180 max mem: 3653 Epoch: [1] Total time: 0:01:08 (0.3989 s / it) creating index... index created! Test: [ 0/38] eta: 0:00:16 model_time: 0.1042 (0.1042) evaluator_time: 0.0084 (0.0084) time: 0.4242 data: 0.3035 max mem: 3653 Test: [37/38] eta: 0:00:00 model_time: 0.0752 (0.0770) evaluator_time: 0.0030 (0.0043) time: 0.0982 data: 0.0085 max mem: 3653 Test: Total time: 0:00:04 (0.1138 s / it) Averaged stats: model_time: 0.0752 (0.0770) evaluator_time: 0.0030 (0.0043) Accumulating evaluation results... DONE (t=0.01s). IoU metric: bbox Average Precision (AP) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.475 Average Precision (AP) @[ IoU=0.50 | area= all | maxDets=100 ] = 0.843 Average Precision (AP) @[ IoU=0.75 | area= all | maxDets=100 ] = 0.554 Average Precision (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.475 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 1 ] = 0.210 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 10 ] = 0.604 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.623 Average Recall (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.623 Epoch: [2] [ 0/172] eta: 0:04:17 lr: 0.005000 loss: 0.3114 (0.3114) loss_classifier: 0.0300 (0.0300) loss_box_reg: 0.0575 (0.0575) loss_objectness: 0.0379 (0.0379) loss_rpn_box_reg: 0.1860 (0.1860) time: 1.4990 data: 1.0470 max mem: 3653 Epoch: [2] [ 10/172] eta: 0:01:21 lr: 0.005000 loss: 0.2944 (0.3059) loss_classifier: 0.0429 (0.0454) loss_box_reg: 0.0573 (0.0688) loss_objectness: 0.0261 (0.0241) loss_rpn_box_reg: 0.1660 (0.1676) time: 0.5004 data: 0.1102 max mem: 3653 Epoch: [2] [ 20/172] eta: 0:01:08 lr: 0.005000 loss: 0.2944 (0.3279) loss_classifier: 0.0458 (0.0485) loss_box_reg: 0.0702 (0.0840) loss_objectness: 0.0272 (0.0303) loss_rpn_box_reg: 0.1460 (0.1651) time: 0.3971 data: 0.0170 max mem: 3653 Epoch: [2] [ 30/172] eta: 0:01:01 lr: 0.005000 loss: 0.2883 (0.3135) loss_classifier: 0.0430 (0.0447) loss_box_reg: 0.0702 (0.0771) loss_objectness: 0.0251 (0.0270) loss_rpn_box_reg: 0.1484 (0.1648) time: 0.3993 data: 0.0184 max mem: 3653 Epoch: [2] [ 40/172] eta: 0:00:56 lr: 0.005000 loss: 0.2843 (0.3074) loss_classifier: 0.0378 (0.0432) loss_box_reg: 0.0624 (0.0745) loss_objectness: 0.0211 (0.0268) loss_rpn_box_reg: 0.1718 (0.1629) time: 0.4021 data: 0.0185 max mem: 3653 Epoch: [2] [ 50/172] eta: 0:00:50 lr: 0.005000 loss: 0.3019 (0.3137) loss_classifier: 0.0405 (0.0453) loss_box_reg: 0.0719 (0.0766) loss_objectness: 0.0261 (0.0258) loss_rpn_box_reg: 0.1660 (0.1660) time: 0.3875 data: 0.0158 max mem: 3653 Epoch: [2] [ 60/172] eta: 0:00:46 lr: 0.005000 loss: 0.2974 (0.3160) loss_classifier: 0.0470 (0.0480) loss_box_reg: 0.0721 (0.0774) loss_objectness: 0.0186 (0.0261) loss_rpn_box_reg: 0.1563 (0.1645) time: 0.3826 data: 0.0151 max mem: 3653 Epoch: [2] [ 70/172] eta: 0:00:42 lr: 0.005000 loss: 0.3042 (0.3176) loss_classifier: 0.0521 (0.0483) loss_box_reg: 0.0737 (0.0796) loss_objectness: 0.0186 (0.0250) loss_rpn_box_reg: 0.1528 (0.1647) time: 0.4054 data: 0.0175 max mem: 3653 Epoch: [2] [ 80/172] eta: 0:00:37 lr: 0.005000 loss: 0.2883 (0.3133) loss_classifier: 0.0472 (0.0480) loss_box_reg: 0.0823 (0.0797) loss_objectness: 0.0172 (0.0249) loss_rpn_box_reg: 0.1357 (0.1607) time: 0.4126 data: 0.0198 max mem: 3653 Epoch: [2] [ 90/172] eta: 0:00:33 lr: 0.005000 loss: 0.2910 (0.3190) loss_classifier: 0.0476 (0.0490) loss_box_reg: 0.0823 (0.0822) loss_objectness: 0.0221 (0.0252) loss_rpn_box_reg: 0.1357 (0.1626) time: 0.4119 data: 0.0202 max mem: 3653 Epoch: [2] [100/172] eta: 0:00:29 lr: 0.005000 loss: 0.3424 (0.3210) loss_classifier: 0.0404 (0.0482) loss_box_reg: 0.0769 (0.0830) loss_objectness: 0.0207 (0.0254) loss_rpn_box_reg: 0.1836 (0.1645) time: 0.4071 data: 0.0184 max mem: 3653 Epoch: [2] [110/172] eta: 0:00:25 lr: 0.005000 loss: 0.3424 (0.3270) loss_classifier: 0.0404 (0.0485) loss_box_reg: 0.0769 (0.0847) loss_objectness: 0.0215 (0.0257) loss_rpn_box_reg: 0.1928 (0.1681) time: 0.3880 data: 0.0163 max mem: 3653 Epoch: [2] [120/172] eta: 0:00:21 lr: 0.005000 loss: 0.3198 (0.3280) loss_classifier: 0.0436 (0.0490) loss_box_reg: 0.0846 (0.0853) loss_objectness: 0.0215 (0.0258) loss_rpn_box_reg: 0.1723 (0.1679) time: 0.3863 data: 0.0167 max mem: 3653 Epoch: [2] [130/172] eta: 0:00:17 lr: 0.005000 loss: 0.3378 (0.3304) loss_classifier: 0.0436 (0.0488) loss_box_reg: 0.0846 (0.0847) loss_objectness: 0.0216 (0.0259) loss_rpn_box_reg: 0.1677 (0.1710) time: 0.3875 data: 0.0168 max mem: 3653 Epoch: [2] [140/172] eta: 0:00:13 lr: 0.005000 loss: 0.3378 (0.3307) loss_classifier: 0.0443 (0.0492) loss_box_reg: 0.0862 (0.0843) loss_objectness: 0.0246 (0.0263) loss_rpn_box_reg: 0.1617 (0.1709) time: 0.4036 data: 0.0184 max mem: 3653 Epoch: [2] [150/172] eta: 0:00:08 lr: 0.005000 loss: 0.3307 (0.3329) loss_classifier: 0.0513 (0.0492) loss_box_reg: 0.0875 (0.0859) loss_objectness: 0.0203 (0.0262) loss_rpn_box_reg: 0.1617 (0.1715) time: 0.4227 data: 0.0205 max mem: 3653 Epoch: [2] [160/172] eta: 0:00:04 lr: 0.005000 loss: 0.3345 (0.3321) loss_classifier: 0.0498 (0.0489) loss_box_reg: 0.0816 (0.0851) loss_objectness: 0.0193 (0.0260) loss_rpn_box_reg: 0.1780 (0.1721) time: 0.4165 data: 0.0204 max mem: 3653 Epoch: [2] [170/172] eta: 0:00:00 lr: 0.005000 loss: 0.3326 (0.3321) loss_classifier: 0.0366 (0.0488) loss_box_reg: 0.0544 (0.0836) loss_objectness: 0.0212 (0.0259) loss_rpn_box_reg: 0.1997 (0.1738) time: 0.3905 data: 0.0183 max mem: 3653 Epoch: [2] [171/172] eta: 0:00:00 lr: 0.005000 loss: 0.3326 (0.3328) loss_classifier: 0.0366 (0.0488) loss_box_reg: 0.0544 (0.0840) loss_objectness: 0.0222 (0.0260) loss_rpn_box_reg: 0.2001 (0.1740) time: 0.3771 data: 0.0180 max mem: 3653 Epoch: [2] Total time: 0:01:09 (0.4050 s / it) creating index... index created! Test: [ 0/38] eta: 0:00:17 model_time: 0.1334 (0.1334) evaluator_time: 0.0171 (0.0171) time: 0.4649 data: 0.3063 max mem: 3653 Test: [37/38] eta: 0:00:00 model_time: 0.0754 (0.0782) evaluator_time: 0.0026 (0.0039) time: 0.0982 data: 0.0083 max mem: 3653 Test: Total time: 0:00:04 (0.1140 s / it) Averaged stats: model_time: 0.0754 (0.0782) evaluator_time: 0.0026 (0.0039) Accumulating evaluation results... DONE (t=0.01s). IoU metric: bbox Average Precision (AP) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.459 Average Precision (AP) @[ IoU=0.50 | area= all | maxDets=100 ] = 0.919 Average Precision (AP) @[ IoU=0.75 | area= all | maxDets=100 ] = 0.366 Average Precision (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.459 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 1 ] = 0.197 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 10 ] = 0.569 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.593 Average Recall (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.593 Epoch: [3] [ 0/172] eta: 0:02:45 lr: 0.000500 loss: 0.2567 (0.2567) loss_classifier: 0.0199 (0.0199) loss_box_reg: 0.0485 (0.0485) loss_objectness: 0.0112 (0.0112) loss_rpn_box_reg: 0.1772 (0.1772) time: 0.9629 data: 0.5316 max mem: 3653 Epoch: [3] [ 10/172] eta: 0:01:15 lr: 0.000500 loss: 0.2798 (0.2744) loss_classifier: 0.0278 (0.0349) loss_box_reg: 0.0496 (0.0549) loss_objectness: 0.0160 (0.0193) loss_rpn_box_reg: 0.1556 (0.1653) time: 0.4654 data: 0.0741 max mem: 3653 Epoch: [3] [ 20/172] eta: 0:01:06 lr: 0.000500 loss: 0.2902 (0.2892) loss_classifier: 0.0291 (0.0363) loss_box_reg: 0.0548 (0.0635) loss_objectness: 0.0166 (0.0222) loss_rpn_box_reg: 0.1594 (0.1673) time: 0.4099 data: 0.0233 max mem: 3653 Epoch: [3] [ 30/172] eta: 0:01:01 lr: 0.000500 loss: 0.3024 (0.2971) loss_classifier: 0.0394 (0.0425) loss_box_reg: 0.0717 (0.0736) loss_objectness: 0.0167 (0.0219) loss_rpn_box_reg: 0.1549 (0.1592) time: 0.4115 data: 0.0185 max mem: 3653 Epoch: [3] [ 40/172] eta: 0:00:55 lr: 0.000500 loss: 0.2902 (0.2965) loss_classifier: 0.0538 (0.0440) loss_box_reg: 0.0905 (0.0761) loss_objectness: 0.0195 (0.0237) loss_rpn_box_reg: 0.1281 (0.1528) time: 0.4065 data: 0.0183 max mem: 3653 Epoch: [3] [ 50/172] eta: 0:00:50 lr: 0.000500 loss: 0.2347 (0.2753) loss_classifier: 0.0429 (0.0422) loss_box_reg: 0.0626 (0.0696) loss_objectness: 0.0233 (0.0243) loss_rpn_box_reg: 0.1068 (0.1392) time: 0.3916 data: 0.0164 max mem: 3653 Epoch: [3] [ 60/172] eta: 0:00:46 lr: 0.000500 loss: 0.2253 (0.2772) loss_classifier: 0.0371 (0.0426) loss_box_reg: 0.0526 (0.0703) loss_objectness: 0.0186 (0.0230) loss_rpn_box_reg: 0.1107 (0.1413) time: 0.3990 data: 0.0179 max mem: 3653 Epoch: [3] [ 70/172] eta: 0:00:42 lr: 0.000500 loss: 0.2465 (0.2703) loss_classifier: 0.0406 (0.0418) loss_box_reg: 0.0526 (0.0694) loss_objectness: 0.0186 (0.0233) loss_rpn_box_reg: 0.1241 (0.1358) time: 0.4093 data: 0.0199 max mem: 3653 Epoch: [3] [ 80/172] eta: 0:00:38 lr: 0.000500 loss: 0.2487 (0.2729) loss_classifier: 0.0399 (0.0425) loss_box_reg: 0.0671 (0.0717) loss_objectness: 0.0194 (0.0230) loss_rpn_box_reg: 0.1241 (0.1357) time: 0.4109 data: 0.0197 max mem: 3653 Epoch: [3] [ 90/172] eta: 0:00:34 lr: 0.000500 loss: 0.2437 (0.2656) loss_classifier: 0.0353 (0.0415) loss_box_reg: 0.0614 (0.0706) loss_objectness: 0.0137 (0.0219) loss_rpn_box_reg: 0.1155 (0.1316) time: 0.4230 data: 0.0197 max mem: 3653 Epoch: [3] [100/172] eta: 0:00:29 lr: 0.000500 loss: 0.2288 (0.2658) loss_classifier: 0.0406 (0.0420) loss_box_reg: 0.0559 (0.0719) loss_objectness: 0.0137 (0.0215) loss_rpn_box_reg: 0.1019 (0.1305) time: 0.4147 data: 0.0200 max mem: 3653 Epoch: [3] [110/172] eta: 0:00:25 lr: 0.000500 loss: 0.2300 (0.2630) loss_classifier: 0.0406 (0.0418) loss_box_reg: 0.0568 (0.0710) loss_objectness: 0.0188 (0.0214) loss_rpn_box_reg: 0.1132 (0.1288) time: 0.4049 data: 0.0210 max mem: 3653 Epoch: [3] [120/172] eta: 0:00:21 lr: 0.000500 loss: 0.2300 (0.2630) loss_classifier: 0.0345 (0.0424) loss_box_reg: 0.0525 (0.0712) loss_objectness: 0.0172 (0.0213) loss_rpn_box_reg: 0.1222 (0.1282) time: 0.4002 data: 0.0191 max mem: 3653 Epoch: [3] [130/172] eta: 0:00:17 lr: 0.000500 loss: 0.2506 (0.2620) loss_classifier: 0.0412 (0.0426) loss_box_reg: 0.0668 (0.0714) loss_objectness: 0.0155 (0.0208) loss_rpn_box_reg: 0.1222 (0.1272) time: 0.3828 data: 0.0172 max mem: 3653 Epoch: [3] [140/172] eta: 0:00:13 lr: 0.000500 loss: 0.2284 (0.2599) loss_classifier: 0.0388 (0.0423) loss_box_reg: 0.0657 (0.0706) loss_objectness: 0.0135 (0.0205) loss_rpn_box_reg: 0.1132 (0.1264) time: 0.3961 data: 0.0175 max mem: 3653 Epoch: [3] [150/172] eta: 0:00:08 lr: 0.000500 loss: 0.2251 (0.2604) loss_classifier: 0.0374 (0.0426) loss_box_reg: 0.0590 (0.0713) loss_objectness: 0.0166 (0.0205) loss_rpn_box_reg: 0.1187 (0.1260) time: 0.3965 data: 0.0182 max mem: 3653 Epoch: [3] [160/172] eta: 0:00:04 lr: 0.000500 loss: 0.2599 (0.2619) loss_classifier: 0.0409 (0.0429) loss_box_reg: 0.0599 (0.0713) loss_objectness: 0.0177 (0.0205) loss_rpn_box_reg: 0.1252 (0.1273) time: 0.3777 data: 0.0174 max mem: 3653 Epoch: [3] [170/172] eta: 0:00:00 lr: 0.000500 loss: 0.2581 (0.2609) loss_classifier: 0.0382 (0.0429) loss_box_reg: 0.0703 (0.0716) loss_objectness: 0.0157 (0.0203) loss_rpn_box_reg: 0.1230 (0.1262) time: 0.3860 data: 0.0165 max mem: 3653 Epoch: [3] [171/172] eta: 0:00:00 lr: 0.000500 loss: 0.2563 (0.2601) loss_classifier: 0.0362 (0.0427) loss_box_reg: 0.0599 (0.0713) loss_objectness: 0.0167 (0.0204) loss_rpn_box_reg: 0.1063 (0.1258) time: 0.3772 data: 0.0163 max mem: 3653 Epoch: [3] Total time: 0:01:09 (0.4042 s / it) creating index... index created! Test: [ 0/38] eta: 0:00:15 model_time: 0.0961 (0.0961) evaluator_time: 0.0059 (0.0059) time: 0.4041 data: 0.2927 max mem: 3653 Test: [37/38] eta: 0:00:00 model_time: 0.0755 (0.0769) evaluator_time: 0.0021 (0.0029) time: 0.0971 data: 0.0083 max mem: 3653 Test: Total time: 0:00:04 (0.1119 s / it) Averaged stats: model_time: 0.0755 (0.0769) evaluator_time: 0.0021 (0.0029) Accumulating evaluation results... DONE (t=0.01s). IoU metric: bbox Average Precision (AP) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.611 Average Precision (AP) @[ IoU=0.50 | area= all | maxDets=100 ] = 0.950 Average Precision (AP) @[ IoU=0.75 | area= all | maxDets=100 ] = 0.761 Average Precision (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.611 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 1 ] = 0.244 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 10 ] = 0.710 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.710 Average Recall (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.710 Epoch: [4] [ 0/172] eta: 0:02:25 lr: 0.000500 loss: 0.2670 (0.2670) loss_classifier: 0.0461 (0.0461) loss_box_reg: 0.0903 (0.0903) loss_objectness: 0.0240 (0.0240) loss_rpn_box_reg: 0.1066 (0.1066) time: 0.8436 data: 0.4360 max mem: 3653 Epoch: [4] [ 10/172] eta: 0:01:18 lr: 0.000500 loss: 0.2378 (0.2428) loss_classifier: 0.0460 (0.0433) loss_box_reg: 0.0636 (0.0717) loss_objectness: 0.0166 (0.0173) loss_rpn_box_reg: 0.1251 (0.1106) time: 0.4845 data: 0.0812 max mem: 3653 Epoch: [4] [ 20/172] eta: 0:01:06 lr: 0.000500 loss: 0.2378 (0.2388) loss_classifier: 0.0388 (0.0417) loss_box_reg: 0.0595 (0.0707) loss_objectness: 0.0130 (0.0149) loss_rpn_box_reg: 0.1251 (0.1116) time: 0.4205 data: 0.0325 max mem: 3653 Epoch: [4] [ 30/172] eta: 0:01:00 lr: 0.000500 loss: 0.2548 (0.2428) loss_classifier: 0.0382 (0.0428) loss_box_reg: 0.0631 (0.0723) loss_objectness: 0.0129 (0.0154) loss_rpn_box_reg: 0.1104 (0.1125) time: 0.3992 data: 0.0196 max mem: 3653 Epoch: [4] [ 40/172] eta: 0:00:55 lr: 0.000500 loss: 0.2156 (0.2415) loss_classifier: 0.0357 (0.0410) loss_box_reg: 0.0626 (0.0688) loss_objectness: 0.0177 (0.0189) loss_rpn_box_reg: 0.0934 (0.1128) time: 0.4018 data: 0.0181 max mem: 3653 Epoch: [4] [ 50/172] eta: 0:00:50 lr: 0.000500 loss: 0.2181 (0.2424) loss_classifier: 0.0357 (0.0410) loss_box_reg: 0.0622 (0.0677) loss_objectness: 0.0177 (0.0186) loss_rpn_box_reg: 0.1013 (0.1150) time: 0.3986 data: 0.0171 max mem: 3653 Epoch: [4] [ 60/172] eta: 0:00:46 lr: 0.000500 loss: 0.2501 (0.2400) loss_classifier: 0.0408 (0.0411) loss_box_reg: 0.0630 (0.0671) loss_objectness: 0.0156 (0.0182) loss_rpn_box_reg: 0.1110 (0.1136) time: 0.4086 data: 0.0191 max mem: 3653 Epoch: [4] [ 70/172] eta: 0:00:42 lr: 0.000500 loss: 0.1937 (0.2372) loss_classifier: 0.0408 (0.0410) loss_box_reg: 0.0614 (0.0666) loss_objectness: 0.0131 (0.0180) loss_rpn_box_reg: 0.0915 (0.1116) time: 0.4110 data: 0.0200 max mem: 3653 Epoch: [4] [ 80/172] eta: 0:00:38 lr: 0.000500 loss: 0.2044 (0.2381) loss_classifier: 0.0408 (0.0417) loss_box_reg: 0.0568 (0.0684) loss_objectness: 0.0152 (0.0184) loss_rpn_box_reg: 0.0915 (0.1095) time: 0.4035 data: 0.0189 max mem: 3653 Epoch: [4] [ 90/172] eta: 0:00:33 lr: 0.000500 loss: 0.2413 (0.2384) loss_classifier: 0.0436 (0.0415) loss_box_reg: 0.0772 (0.0691) loss_objectness: 0.0164 (0.0181) loss_rpn_box_reg: 0.0980 (0.1097) time: 0.3968 data: 0.0182 max mem: 3653 Epoch: [4] [100/172] eta: 0:00:29 lr: 0.000500 loss: 0.2468 (0.2395) loss_classifier: 0.0437 (0.0419) loss_box_reg: 0.0772 (0.0704) loss_objectness: 0.0164 (0.0181) loss_rpn_box_reg: 0.0963 (0.1092) time: 0.4042 data: 0.0178 max mem: 3653 Epoch: [4] [110/172] eta: 0:00:25 lr: 0.000500 loss: 0.2576 (0.2445) loss_classifier: 0.0528 (0.0435) loss_box_reg: 0.0752 (0.0727) loss_objectness: 0.0151 (0.0178) loss_rpn_box_reg: 0.1000 (0.1105) time: 0.4005 data: 0.0171 max mem: 3653 Epoch: [4] [120/172] eta: 0:00:21 lr: 0.000500 loss: 0.2490 (0.2431) loss_classifier: 0.0504 (0.0435) loss_box_reg: 0.0665 (0.0722) loss_objectness: 0.0151 (0.0179) loss_rpn_box_reg: 0.1000 (0.1095) time: 0.3799 data: 0.0182 max mem: 3653 Epoch: [4] [130/172] eta: 0:00:16 lr: 0.000500 loss: 0.2263 (0.2443) loss_classifier: 0.0458 (0.0436) loss_box_reg: 0.0668 (0.0728) loss_objectness: 0.0172 (0.0180) loss_rpn_box_reg: 0.1067 (0.1099) time: 0.3775 data: 0.0183 max mem: 3653 Epoch: [4] [140/172] eta: 0:00:12 lr: 0.000500 loss: 0.2385 (0.2449) loss_classifier: 0.0384 (0.0433) loss_box_reg: 0.0571 (0.0726) loss_objectness: 0.0172 (0.0180) loss_rpn_box_reg: 0.1111 (0.1110) time: 0.3860 data: 0.0187 max mem: 3653 Epoch: [4] [150/172] eta: 0:00:08 lr: 0.000500 loss: 0.1909 (0.2414) loss_classifier: 0.0313 (0.0425) loss_box_reg: 0.0469 (0.0713) loss_objectness: 0.0122 (0.0177) loss_rpn_box_reg: 0.0976 (0.1099) time: 0.3989 data: 0.0200 max mem: 3653 Epoch: [4] [160/172] eta: 0:00:04 lr: 0.000500 loss: 0.1979 (0.2418) loss_classifier: 0.0348 (0.0425) loss_box_reg: 0.0571 (0.0719) loss_objectness: 0.0097 (0.0173) loss_rpn_box_reg: 0.0961 (0.1101) time: 0.4054 data: 0.0192 max mem: 3653 Epoch: [4] [170/172] eta: 0:00:00 lr: 0.000500 loss: 0.2559 (0.2433) loss_classifier: 0.0475 (0.0430) loss_box_reg: 0.0825 (0.0732) loss_objectness: 0.0151 (0.0174) loss_rpn_box_reg: 0.0961 (0.1097) time: 0.3978 data: 0.0172 max mem: 3653 Epoch: [4] [171/172] eta: 0:00:00 lr: 0.000500 loss: 0.2603 (0.2445) loss_classifier: 0.0479 (0.0432) loss_box_reg: 0.0918 (0.0735) loss_objectness: 0.0151 (0.0174) loss_rpn_box_reg: 0.1129 (0.1103) time: 0.3847 data: 0.0170 max mem: 3653 Epoch: [4] Total time: 0:01:09 (0.4025 s / it) creating index... index created! Test: [ 0/38] eta: 0:00:15 model_time: 0.0937 (0.0937) evaluator_time: 0.0056 (0.0056) time: 0.3998 data: 0.2909 max mem: 3653 Test: [37/38] eta: 0:00:00 model_time: 0.0760 (0.0766) evaluator_time: 0.0020 (0.0028) time: 0.0975 data: 0.0086 max mem: 3653 Test: Total time: 0:00:04 (0.1126 s / it) Averaged stats: model_time: 0.0760 (0.0766) evaluator_time: 0.0020 (0.0028) Accumulating evaluation results... DONE (t=0.01s). IoU metric: bbox Average Precision (AP) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.631 Average Precision (AP) @[ IoU=0.50 | area= all | maxDets=100 ] = 0.972 Average Precision (AP) @[ IoU=0.75 | area= all | maxDets=100 ] = 0.787 Average Precision (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.631 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 1 ] = 0.240 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 10 ] = 0.715 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.719 Average Recall (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.719 Epoch: [5] [ 0/172] eta: 0:04:09 lr: 0.000500 loss: 0.2193 (0.2193) loss_classifier: 0.0425 (0.0425) loss_box_reg: 0.0542 (0.0542) loss_objectness: 0.0197 (0.0197) loss_rpn_box_reg: 0.1028 (0.1028) time: 1.4492 data: 0.9452 max mem: 3653 Epoch: [5] [ 10/172] eta: 0:01:21 lr: 0.000500 loss: 0.1998 (0.1990) loss_classifier: 0.0401 (0.0406) loss_box_reg: 0.0542 (0.0524) loss_objectness: 0.0197 (0.0181) loss_rpn_box_reg: 0.0896 (0.0879) time: 0.5005 data: 0.1022 max mem: 3653 Epoch: [5] [ 20/172] eta: 0:01:08 lr: 0.000500 loss: 0.1998 (0.2304) loss_classifier: 0.0384 (0.0406) loss_box_reg: 0.0561 (0.0632) loss_objectness: 0.0150 (0.0222) loss_rpn_box_reg: 0.0967 (0.1045) time: 0.4024 data: 0.0166 max mem: 3653 Epoch: [5] [ 30/172] eta: 0:01:02 lr: 0.000500 loss: 0.2375 (0.2341) loss_classifier: 0.0393 (0.0423) loss_box_reg: 0.0629 (0.0635) loss_objectness: 0.0146 (0.0205) loss_rpn_box_reg: 0.1082 (0.1078) time: 0.4075 data: 0.0177 max mem: 3653 Epoch: [5] [ 40/172] eta: 0:00:56 lr: 0.000500 loss: 0.2380 (0.2330) loss_classifier: 0.0418 (0.0421) loss_box_reg: 0.0595 (0.0629) loss_objectness: 0.0117 (0.0198) loss_rpn_box_reg: 0.1152 (0.1082) time: 0.4037 data: 0.0193 max mem: 3653 Epoch: [5] [ 50/172] eta: 0:00:52 lr: 0.000500 loss: 0.2348 (0.2324) loss_classifier: 0.0443 (0.0421) loss_box_reg: 0.0699 (0.0657) loss_objectness: 0.0117 (0.0190) loss_rpn_box_reg: 0.1050 (0.1056) time: 0.4078 data: 0.0185 max mem: 3653 Epoch: [5] [ 60/172] eta: 0:00:46 lr: 0.000500 loss: 0.2456 (0.2349) loss_classifier: 0.0412 (0.0420) loss_box_reg: 0.0874 (0.0684) loss_objectness: 0.0119 (0.0181) loss_rpn_box_reg: 0.1085 (0.1064) time: 0.3994 data: 0.0169 max mem: 3653 Epoch: [5] [ 70/172] eta: 0:00:42 lr: 0.000500 loss: 0.2294 (0.2328) loss_classifier: 0.0371 (0.0412) loss_box_reg: 0.0633 (0.0691) loss_objectness: 0.0119 (0.0174) loss_rpn_box_reg: 0.1012 (0.1052) time: 0.3763 data: 0.0160 max mem: 3653 Epoch: [5] [ 80/172] eta: 0:00:38 lr: 0.000500 loss: 0.2243 (0.2344) loss_classifier: 0.0398 (0.0416) loss_box_reg: 0.0629 (0.0703) loss_objectness: 0.0142 (0.0175) loss_rpn_box_reg: 0.0949 (0.1050) time: 0.4038 data: 0.0189 max mem: 3653 Epoch: [5] [ 90/172] eta: 0:00:33 lr: 0.000500 loss: 0.2259 (0.2371) loss_classifier: 0.0398 (0.0417) loss_box_reg: 0.0685 (0.0709) loss_objectness: 0.0160 (0.0174) loss_rpn_box_reg: 0.0942 (0.1071) time: 0.4081 data: 0.0199 max mem: 3653 Epoch: [5] [100/172] eta: 0:00:29 lr: 0.000500 loss: 0.2224 (0.2352) loss_classifier: 0.0353 (0.0413) loss_box_reg: 0.0617 (0.0697) loss_objectness: 0.0173 (0.0178) loss_rpn_box_reg: 0.0938 (0.1064) time: 0.3799 data: 0.0184 max mem: 3653 Epoch: [5] [110/172] eta: 0:00:25 lr: 0.000500 loss: 0.2100 (0.2337) loss_classifier: 0.0353 (0.0411) loss_box_reg: 0.0611 (0.0696) loss_objectness: 0.0173 (0.0176) loss_rpn_box_reg: 0.0938 (0.1054) time: 0.3868 data: 0.0184 max mem: 3653 Epoch: [5] [120/172] eta: 0:00:21 lr: 0.000500 loss: 0.2298 (0.2331) loss_classifier: 0.0386 (0.0409) loss_box_reg: 0.0667 (0.0702) loss_objectness: 0.0143 (0.0173) loss_rpn_box_reg: 0.0981 (0.1047) time: 0.4027 data: 0.0180 max mem: 3653 Epoch: [5] [130/172] eta: 0:00:17 lr: 0.000500 loss: 0.2538 (0.2381) loss_classifier: 0.0411 (0.0416) loss_box_reg: 0.0790 (0.0718) loss_objectness: 0.0130 (0.0172) loss_rpn_box_reg: 0.1173 (0.1076) time: 0.3999 data: 0.0164 max mem: 3653 Epoch: [5] [140/172] eta: 0:00:13 lr: 0.000500 loss: 0.2849 (0.2394) loss_classifier: 0.0480 (0.0418) loss_box_reg: 0.0657 (0.0720) loss_objectness: 0.0114 (0.0169) loss_rpn_box_reg: 0.1315 (0.1087) time: 0.4006 data: 0.0163 max mem: 3653 Epoch: [5] [150/172] eta: 0:00:08 lr: 0.000500 loss: 0.2292 (0.2372) loss_classifier: 0.0394 (0.0418) loss_box_reg: 0.0591 (0.0713) loss_objectness: 0.0134 (0.0172) loss_rpn_box_reg: 0.0949 (0.1070) time: 0.4058 data: 0.0192 max mem: 3653 Epoch: [5] [160/172] eta: 0:00:04 lr: 0.000500 loss: 0.2060 (0.2361) loss_classifier: 0.0427 (0.0418) loss_box_reg: 0.0565 (0.0706) loss_objectness: 0.0138 (0.0169) loss_rpn_box_reg: 0.0864 (0.1068) time: 0.4073 data: 0.0205 max mem: 3653 Epoch: [5] [170/172] eta: 0:00:00 lr: 0.000500 loss: 0.2060 (0.2356) loss_classifier: 0.0456 (0.0419) loss_box_reg: 0.0510 (0.0700) loss_objectness: 0.0132 (0.0169) loss_rpn_box_reg: 0.0962 (0.1068) time: 0.4077 data: 0.0174 max mem: 3653 Epoch: [5] [171/172] eta: 0:00:00 lr: 0.000500 loss: 0.2176 (0.2367) loss_classifier: 0.0465 (0.0419) loss_box_reg: 0.0523 (0.0702) loss_objectness: 0.0132 (0.0169) loss_rpn_box_reg: 0.0995 (0.1076) time: 0.3948 data: 0.0173 max mem: 3653 Epoch: [5] Total time: 0:01:09 (0.4059 s / it) creating index... index created! Test: [ 0/38] eta: 0:00:15 model_time: 0.0960 (0.0960) evaluator_time: 0.0057 (0.0057) time: 0.4114 data: 0.2993 max mem: 3653 Test: [37/38] eta: 0:00:00 model_time: 0.0757 (0.0766) evaluator_time: 0.0020 (0.0028) time: 0.0975 data: 0.0086 max mem: 3653 Test: Total time: 0:00:04 (0.1116 s / it) Averaged stats: model_time: 0.0757 (0.0766) evaluator_time: 0.0020 (0.0028) Accumulating evaluation results... DONE (t=0.01s). IoU metric: bbox Average Precision (AP) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.649 Average Precision (AP) @[ IoU=0.50 | area= all | maxDets=100 ] = 0.984 Average Precision (AP) @[ IoU=0.75 | area= all | maxDets=100 ] = 0.756 Average Precision (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.649 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 1 ] = 0.257 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 10 ] = 0.739 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.744 Average Recall (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.744 Epoch: [6] [ 0/172] eta: 0:03:02 lr: 0.000050 loss: 0.0911 (0.0911) loss_classifier: 0.0196 (0.0196) loss_box_reg: 0.0107 (0.0107) loss_objectness: 0.0203 (0.0203) loss_rpn_box_reg: 0.0405 (0.0405) time: 1.0631 data: 0.5812 max mem: 3653 Epoch: [6] [ 10/172] eta: 0:01:16 lr: 0.000050 loss: 0.2235 (0.2172) loss_classifier: 0.0374 (0.0369) loss_box_reg: 0.0668 (0.0628) loss_objectness: 0.0169 (0.0174) loss_rpn_box_reg: 0.1017 (0.1001) time: 0.4737 data: 0.0825 max mem: 3653 Epoch: [6] [ 20/172] eta: 0:01:06 lr: 0.000050 loss: 0.2235 (0.2239) loss_classifier: 0.0419 (0.0429) loss_box_reg: 0.0668 (0.0689) loss_objectness: 0.0143 (0.0159) loss_rpn_box_reg: 0.0920 (0.0962) time: 0.4065 data: 0.0246 max mem: 3653 Epoch: [6] [ 30/172] eta: 0:01:00 lr: 0.000050 loss: 0.2233 (0.2361) loss_classifier: 0.0489 (0.0440) loss_box_reg: 0.0711 (0.0735) loss_objectness: 0.0144 (0.0163) loss_rpn_box_reg: 0.0920 (0.1022) time: 0.3958 data: 0.0162 max mem: 3653 Epoch: [6] [ 40/172] eta: 0:00:54 lr: 0.000050 loss: 0.2233 (0.2356) loss_classifier: 0.0412 (0.0436) loss_box_reg: 0.0711 (0.0739) loss_objectness: 0.0135 (0.0158) loss_rpn_box_reg: 0.0999 (0.1023) time: 0.3930 data: 0.0172 max mem: 3653 Epoch: [6] [ 50/172] eta: 0:00:50 lr: 0.000050 loss: 0.2063 (0.2251) loss_classifier: 0.0404 (0.0426) loss_box_reg: 0.0626 (0.0690) loss_objectness: 0.0135 (0.0162) loss_rpn_box_reg: 0.0872 (0.0973) time: 0.3954 data: 0.0179 max mem: 3653 Epoch: [6] [ 60/172] eta: 0:00:46 lr: 0.000050 loss: 0.1877 (0.2230) loss_classifier: 0.0381 (0.0421) loss_box_reg: 0.0655 (0.0699) loss_objectness: 0.0103 (0.0149) loss_rpn_box_reg: 0.0732 (0.0962) time: 0.4076 data: 0.0183 max mem: 3653 Epoch: [6] [ 70/172] eta: 0:00:42 lr: 0.000050 loss: 0.1870 (0.2181) loss_classifier: 0.0381 (0.0416) loss_box_reg: 0.0663 (0.0680) loss_objectness: 0.0104 (0.0149) loss_rpn_box_reg: 0.0817 (0.0935) time: 0.4166 data: 0.0199 max mem: 3653 Epoch: [6] [ 80/172] eta: 0:00:37 lr: 0.000050 loss: 0.1870 (0.2215) loss_classifier: 0.0322 (0.0412) loss_box_reg: 0.0474 (0.0685) loss_objectness: 0.0132 (0.0152) loss_rpn_box_reg: 0.0882 (0.0966) time: 0.3971 data: 0.0179 max mem: 3653 Epoch: [6] [ 90/172] eta: 0:00:33 lr: 0.000050 loss: 0.1693 (0.2201) loss_classifier: 0.0309 (0.0413) loss_box_reg: 0.0460 (0.0679) loss_objectness: 0.0128 (0.0150) loss_rpn_box_reg: 0.0987 (0.0960) time: 0.3876 data: 0.0167 max mem: 3653 Epoch: [6] [100/172] eta: 0:00:29 lr: 0.000050 loss: 0.1999 (0.2244) loss_classifier: 0.0410 (0.0423) loss_box_reg: 0.0555 (0.0688) loss_objectness: 0.0143 (0.0166) loss_rpn_box_reg: 0.0847 (0.0968) time: 0.3925 data: 0.0182 max mem: 3653 Epoch: [6] [110/172] eta: 0:00:25 lr: 0.000050 loss: 0.2395 (0.2254) loss_classifier: 0.0471 (0.0422) loss_box_reg: 0.0739 (0.0690) loss_objectness: 0.0127 (0.0162) loss_rpn_box_reg: 0.1042 (0.0981) time: 0.3890 data: 0.0169 max mem: 3653 Epoch: [6] [120/172] eta: 0:00:20 lr: 0.000050 loss: 0.1940 (0.2228) loss_classifier: 0.0331 (0.0414) loss_box_reg: 0.0575 (0.0676) loss_objectness: 0.0100 (0.0161) loss_rpn_box_reg: 0.1020 (0.0977) time: 0.3909 data: 0.0179 max mem: 3653 Epoch: [6] [130/172] eta: 0:00:16 lr: 0.000050 loss: 0.1722 (0.2217) loss_classifier: 0.0311 (0.0411) loss_box_reg: 0.0477 (0.0672) loss_objectness: 0.0125 (0.0159) loss_rpn_box_reg: 0.0806 (0.0976) time: 0.3980 data: 0.0192 max mem: 3653 Epoch: [6] [140/172] eta: 0:00:12 lr: 0.000050 loss: 0.1853 (0.2221) loss_classifier: 0.0318 (0.0409) loss_box_reg: 0.0529 (0.0674) loss_objectness: 0.0136 (0.0157) loss_rpn_box_reg: 0.0848 (0.0981) time: 0.4046 data: 0.0196 max mem: 3653 Epoch: [6] [150/172] eta: 0:00:08 lr: 0.000050 loss: 0.2106 (0.2234) loss_classifier: 0.0387 (0.0412) loss_box_reg: 0.0600 (0.0678) loss_objectness: 0.0111 (0.0158) loss_rpn_box_reg: 0.0860 (0.0987) time: 0.3942 data: 0.0193 max mem: 3653 Epoch: [6] [160/172] eta: 0:00:04 lr: 0.000050 loss: 0.2106 (0.2214) loss_classifier: 0.0368 (0.0407) loss_box_reg: 0.0603 (0.0672) loss_objectness: 0.0124 (0.0157) loss_rpn_box_reg: 0.0897 (0.0977) time: 0.4050 data: 0.0196 max mem: 3653 Epoch: [6] [170/172] eta: 0:00:00 lr: 0.000050 loss: 0.2204 (0.2231) loss_classifier: 0.0337 (0.0408) loss_box_reg: 0.0603 (0.0678) loss_objectness: 0.0139 (0.0159) loss_rpn_box_reg: 0.0987 (0.0987) time: 0.4065 data: 0.0194 max mem: 3653 Epoch: [6] [171/172] eta: 0:00:00 lr: 0.000050 loss: 0.2204 (0.2230) loss_classifier: 0.0337 (0.0408) loss_box_reg: 0.0603 (0.0677) loss_objectness: 0.0136 (0.0158) loss_rpn_box_reg: 0.0987 (0.0986) time: 0.3978 data: 0.0194 max mem: 3653 Epoch: [6] Total time: 0:01:09 (0.4022 s / it) creating index... index created! Test: [ 0/38] eta: 0:00:16 model_time: 0.0948 (0.0948) evaluator_time: 0.0161 (0.0161) time: 0.4211 data: 0.2969 max mem: 3653 Test: [37/38] eta: 0:00:00 model_time: 0.0756 (0.0768) evaluator_time: 0.0019 (0.0030) time: 0.0976 data: 0.0084 max mem: 3653 Test: Total time: 0:00:04 (0.1125 s / it) Averaged stats: model_time: 0.0756 (0.0768) evaluator_time: 0.0019 (0.0030) Accumulating evaluation results... DONE (t=0.01s). IoU metric: bbox Average Precision (AP) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.659 Average Precision (AP) @[ IoU=0.50 | area= all | maxDets=100 ] = 0.984 Average Precision (AP) @[ IoU=0.75 | area= all | maxDets=100 ] = 0.801 Average Precision (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.659 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 1 ] = 0.260 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 10 ] = 0.743 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.743 Average Recall (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.743 Epoch: [7] [ 0/172] eta: 0:04:15 lr: 0.000050 loss: 0.2163 (0.2163) loss_classifier: 0.0377 (0.0377) loss_box_reg: 0.0683 (0.0683) loss_objectness: 0.0147 (0.0147) loss_rpn_box_reg: 0.0956 (0.0956) time: 1.4831 data: 0.9995 max mem: 3653 Epoch: [7] [ 10/172] eta: 0:01:23 lr: 0.000050 loss: 0.2153 (0.2136) loss_classifier: 0.0377 (0.0366) loss_box_reg: 0.0718 (0.0650) loss_objectness: 0.0127 (0.0127) loss_rpn_box_reg: 0.0956 (0.0993) time: 0.5145 data: 0.1189 max mem: 3653 Epoch: [7] [ 20/172] eta: 0:01:11 lr: 0.000050 loss: 0.2342 (0.2259) loss_classifier: 0.0394 (0.0414) loss_box_reg: 0.0780 (0.0742) loss_objectness: 0.0127 (0.0138) loss_rpn_box_reg: 0.0975 (0.0966) time: 0.4215 data: 0.0245 max mem: 3653 Epoch: [7] [ 30/172] eta: 0:01:03 lr: 0.000050 loss: 0.2558 (0.2303) loss_classifier: 0.0450 (0.0422) loss_box_reg: 0.0865 (0.0764) loss_objectness: 0.0130 (0.0149) loss_rpn_box_reg: 0.0924 (0.0968) time: 0.4079 data: 0.0182 max mem: 3653 Epoch: [7] [ 40/172] eta: 0:00:56 lr: 0.000050 loss: 0.2021 (0.2246) loss_classifier: 0.0382 (0.0408) loss_box_reg: 0.0682 (0.0728) loss_objectness: 0.0112 (0.0145) loss_rpn_box_reg: 0.0904 (0.0965) time: 0.3863 data: 0.0174 max mem: 3653 Epoch: [7] [ 50/172] eta: 0:00:51 lr: 0.000050 loss: 0.1810 (0.2175) loss_classifier: 0.0293 (0.0392) loss_box_reg: 0.0466 (0.0694) loss_objectness: 0.0109 (0.0150) loss_rpn_box_reg: 0.0838 (0.0939) time: 0.3903 data: 0.0176 max mem: 3653 Epoch: [7] [ 60/172] eta: 0:00:47 lr: 0.000050 loss: 0.1673 (0.2096) loss_classifier: 0.0327 (0.0386) loss_box_reg: 0.0379 (0.0644) loss_objectness: 0.0144 (0.0154) loss_rpn_box_reg: 0.0724 (0.0911) time: 0.4110 data: 0.0210 max mem: 3653 Epoch: [7] [ 70/172] eta: 0:00:43 lr: 0.000050 loss: 0.1700 (0.2105) loss_classifier: 0.0327 (0.0388) loss_box_reg: 0.0427 (0.0641) loss_objectness: 0.0121 (0.0150) loss_rpn_box_reg: 0.0833 (0.0925) time: 0.4203 data: 0.0226 max mem: 3653 Epoch: [7] [ 80/172] eta: 0:00:38 lr: 0.000050 loss: 0.2341 (0.2147) loss_classifier: 0.0333 (0.0390) loss_box_reg: 0.0598 (0.0646) loss_objectness: 0.0121 (0.0155) loss_rpn_box_reg: 0.1088 (0.0956) time: 0.4028 data: 0.0180 max mem: 3653 Epoch: [7] [ 90/172] eta: 0:00:33 lr: 0.000050 loss: 0.2495 (0.2158) loss_classifier: 0.0343 (0.0390) loss_box_reg: 0.0640 (0.0647) loss_objectness: 0.0163 (0.0157) loss_rpn_box_reg: 0.1089 (0.0964) time: 0.3820 data: 0.0148 max mem: 3653 Epoch: [7] [100/172] eta: 0:00:29 lr: 0.000050 loss: 0.2433 (0.2201) loss_classifier: 0.0425 (0.0394) loss_box_reg: 0.0567 (0.0659) loss_objectness: 0.0141 (0.0163) loss_rpn_box_reg: 0.1042 (0.0986) time: 0.3748 data: 0.0156 max mem: 3653 Epoch: [7] [110/172] eta: 0:00:25 lr: 0.000050 loss: 0.2037 (0.2188) loss_classifier: 0.0441 (0.0401) loss_box_reg: 0.0613 (0.0661) loss_objectness: 0.0131 (0.0160) loss_rpn_box_reg: 0.0823 (0.0965) time: 0.3815 data: 0.0182 max mem: 3653 Epoch: [7] [120/172] eta: 0:00:21 lr: 0.000050 loss: 0.1815 (0.2160) loss_classifier: 0.0363 (0.0396) loss_box_reg: 0.0588 (0.0652) loss_objectness: 0.0131 (0.0161) loss_rpn_box_reg: 0.0749 (0.0951) time: 0.3897 data: 0.0196 max mem: 3653 Epoch: [7] [130/172] eta: 0:00:17 lr: 0.000050 loss: 0.1994 (0.2173) loss_classifier: 0.0348 (0.0397) loss_box_reg: 0.0635 (0.0655) loss_objectness: 0.0157 (0.0164) loss_rpn_box_reg: 0.0869 (0.0958) time: 0.3933 data: 0.0173 max mem: 3653 Epoch: [7] [140/172] eta: 0:00:12 lr: 0.000050 loss: 0.2316 (0.2192) loss_classifier: 0.0433 (0.0400) loss_box_reg: 0.0674 (0.0663) loss_objectness: 0.0157 (0.0165) loss_rpn_box_reg: 0.0974 (0.0964) time: 0.3961 data: 0.0178 max mem: 3653 Epoch: [7] [150/172] eta: 0:00:08 lr: 0.000050 loss: 0.2052 (0.2192) loss_classifier: 0.0336 (0.0398) loss_box_reg: 0.0670 (0.0665) loss_objectness: 0.0138 (0.0163) loss_rpn_box_reg: 0.0887 (0.0966) time: 0.3843 data: 0.0178 max mem: 3653 Epoch: [7] [160/172] eta: 0:00:04 lr: 0.000050 loss: 0.2124 (0.2195) loss_classifier: 0.0336 (0.0398) loss_box_reg: 0.0632 (0.0669) loss_objectness: 0.0107 (0.0161) loss_rpn_box_reg: 0.0906 (0.0968) time: 0.3854 data: 0.0174 max mem: 3653 Epoch: [7] [170/172] eta: 0:00:00 lr: 0.000050 loss: 0.2188 (0.2204) loss_classifier: 0.0412 (0.0400) loss_box_reg: 0.0539 (0.0666) loss_objectness: 0.0104 (0.0158) loss_rpn_box_reg: 0.1051 (0.0980) time: 0.3880 data: 0.0172 max mem: 3653 Epoch: [7] [171/172] eta: 0:00:00 lr: 0.000050 loss: 0.2188 (0.2209) loss_classifier: 0.0412 (0.0402) loss_box_reg: 0.0539 (0.0671) loss_objectness: 0.0120 (0.0158) loss_rpn_box_reg: 0.1051 (0.0979) time: 0.3793 data: 0.0164 max mem: 3653 Epoch: [7] Total time: 0:01:08 (0.4007 s / it) creating index... index created! Test: [ 0/38] eta: 0:00:17 model_time: 0.1393 (0.1393) evaluator_time: 0.0058 (0.0058) time: 0.4551 data: 0.3007 max mem: 3653 Test: [37/38] eta: 0:00:00 model_time: 0.0751 (0.0777) evaluator_time: 0.0019 (0.0026) time: 0.0977 data: 0.0084 max mem: 3653 Test: Total time: 0:00:04 (0.1124 s / it) Averaged stats: model_time: 0.0751 (0.0777) evaluator_time: 0.0019 (0.0026) Accumulating evaluation results... DONE (t=0.01s). IoU metric: bbox Average Precision (AP) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.644 Average Precision (AP) @[ IoU=0.50 | area= all | maxDets=100 ] = 0.983 Average Precision (AP) @[ IoU=0.75 | area= all | maxDets=100 ] = 0.775 Average Precision (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.644 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 1 ] = 0.253 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 10 ] = 0.727 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.727 Average Recall (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.727 Epoch: [8] [ 0/172] eta: 0:02:52 lr: 0.000050 loss: 0.1665 (0.1665) loss_classifier: 0.0371 (0.0371) loss_box_reg: 0.0397 (0.0397) loss_objectness: 0.0394 (0.0394) loss_rpn_box_reg: 0.0502 (0.0502) time: 1.0055 data: 0.6306 max mem: 3653 Epoch: [8] [ 10/172] eta: 0:01:13 lr: 0.000050 loss: 0.1818 (0.1894) loss_classifier: 0.0314 (0.0355) loss_box_reg: 0.0429 (0.0559) loss_objectness: 0.0143 (0.0190) loss_rpn_box_reg: 0.0753 (0.0790) time: 0.4546 data: 0.0731 max mem: 3653 Epoch: [8] [ 20/172] eta: 0:01:04 lr: 0.000050 loss: 0.1818 (0.1865) loss_classifier: 0.0286 (0.0341) loss_box_reg: 0.0429 (0.0532) loss_objectness: 0.0108 (0.0164) loss_rpn_box_reg: 0.0828 (0.0829) time: 0.3967 data: 0.0178 max mem: 3653 Epoch: [8] [ 30/172] eta: 0:00:58 lr: 0.000050 loss: 0.1950 (0.2087) loss_classifier: 0.0329 (0.0382) loss_box_reg: 0.0602 (0.0625) loss_objectness: 0.0148 (0.0175) loss_rpn_box_reg: 0.0887 (0.0904) time: 0.3935 data: 0.0172 max mem: 3653 Epoch: [8] [ 40/172] eta: 0:00:53 lr: 0.000050 loss: 0.2368 (0.2168) loss_classifier: 0.0427 (0.0395) loss_box_reg: 0.0657 (0.0637) loss_objectness: 0.0174 (0.0173) loss_rpn_box_reg: 0.0930 (0.0962) time: 0.3794 data: 0.0164 max mem: 3653 Epoch: [8] [ 50/172] eta: 0:00:48 lr: 0.000050 loss: 0.2298 (0.2216) loss_classifier: 0.0411 (0.0405) loss_box_reg: 0.0626 (0.0657) loss_objectness: 0.0123 (0.0164) loss_rpn_box_reg: 0.1057 (0.0990) time: 0.3791 data: 0.0166 max mem: 3653 Epoch: [8] [ 60/172] eta: 0:00:44 lr: 0.000050 loss: 0.2050 (0.2194) loss_classifier: 0.0377 (0.0399) loss_box_reg: 0.0587 (0.0666) loss_objectness: 0.0123 (0.0160) loss_rpn_box_reg: 0.0964 (0.0969) time: 0.3955 data: 0.0168 max mem: 3653 Epoch: [8] [ 70/172] eta: 0:00:40 lr: 0.000050 loss: 0.2125 (0.2245) loss_classifier: 0.0351 (0.0408) loss_box_reg: 0.0612 (0.0673) loss_objectness: 0.0100 (0.0165) loss_rpn_box_reg: 0.0872 (0.0999) time: 0.3892 data: 0.0167 max mem: 3653 Epoch: [8] [ 80/172] eta: 0:00:36 lr: 0.000050 loss: 0.2365 (0.2265) loss_classifier: 0.0347 (0.0410) loss_box_reg: 0.0738 (0.0682) loss_objectness: 0.0128 (0.0165) loss_rpn_box_reg: 0.0952 (0.1009) time: 0.3863 data: 0.0167 max mem: 3653 Epoch: [8] [ 90/172] eta: 0:00:32 lr: 0.000050 loss: 0.2047 (0.2238) loss_classifier: 0.0347 (0.0403) loss_box_reg: 0.0706 (0.0670) loss_objectness: 0.0147 (0.0165) loss_rpn_box_reg: 0.0740 (0.1000) time: 0.3927 data: 0.0186 max mem: 3653 Epoch: [8] [100/172] eta: 0:00:28 lr: 0.000050 loss: 0.1732 (0.2208) loss_classifier: 0.0307 (0.0396) loss_box_reg: 0.0498 (0.0663) loss_objectness: 0.0147 (0.0165) loss_rpn_box_reg: 0.0755 (0.0984) time: 0.3906 data: 0.0184 max mem: 3653 Epoch: [8] [110/172] eta: 0:00:24 lr: 0.000050 loss: 0.2197 (0.2239) loss_classifier: 0.0368 (0.0404) loss_box_reg: 0.0676 (0.0677) loss_objectness: 0.0155 (0.0165) loss_rpn_box_reg: 0.0997 (0.0993) time: 0.3951 data: 0.0170 max mem: 3653 Epoch: [8] [120/172] eta: 0:00:20 lr: 0.000050 loss: 0.2197 (0.2239) loss_classifier: 0.0437 (0.0405) loss_box_reg: 0.0669 (0.0682) loss_objectness: 0.0155 (0.0164) loss_rpn_box_reg: 0.0990 (0.0989) time: 0.4091 data: 0.0186 max mem: 3653 Epoch: [8] [130/172] eta: 0:00:16 lr: 0.000050 loss: 0.1931 (0.2229) loss_classifier: 0.0425 (0.0407) loss_box_reg: 0.0669 (0.0685) loss_objectness: 0.0114 (0.0158) loss_rpn_box_reg: 0.0770 (0.0979) time: 0.4176 data: 0.0204 max mem: 3653 Epoch: [8] [140/172] eta: 0:00:12 lr: 0.000050 loss: 0.1902 (0.2229) loss_classifier: 0.0390 (0.0407) loss_box_reg: 0.0565 (0.0681) loss_objectness: 0.0111 (0.0158) loss_rpn_box_reg: 0.0834 (0.0982) time: 0.4276 data: 0.0216 max mem: 3653 Epoch: [8] [150/172] eta: 0:00:08 lr: 0.000050 loss: 0.1774 (0.2208) loss_classifier: 0.0380 (0.0405) loss_box_reg: 0.0478 (0.0673) loss_objectness: 0.0136 (0.0158) loss_rpn_box_reg: 0.0778 (0.0972) time: 0.4201 data: 0.0201 max mem: 3653 Epoch: [8] [160/172] eta: 0:00:04 lr: 0.000050 loss: 0.1855 (0.2207) loss_classifier: 0.0375 (0.0405) loss_box_reg: 0.0538 (0.0669) loss_objectness: 0.0117 (0.0156) loss_rpn_box_reg: 0.0914 (0.0976) time: 0.3992 data: 0.0192 max mem: 3653 Epoch: [8] [170/172] eta: 0:00:00 lr: 0.000050 loss: 0.1955 (0.2197) loss_classifier: 0.0328 (0.0403) loss_box_reg: 0.0538 (0.0664) loss_objectness: 0.0117 (0.0157) loss_rpn_box_reg: 0.0926 (0.0973) time: 0.3917 data: 0.0184 max mem: 3653 Epoch: [8] [171/172] eta: 0:00:00 lr: 0.000050 loss: 0.2114 (0.2199) loss_classifier: 0.0375 (0.0403) loss_box_reg: 0.0569 (0.0664) loss_objectness: 0.0117 (0.0156) loss_rpn_box_reg: 0.0986 (0.0976) time: 0.3835 data: 0.0181 max mem: 3653 Epoch: [8] Total time: 0:01:08 (0.4004 s / it) creating index... index created! Test: [ 0/38] eta: 0:00:16 model_time: 0.1063 (0.1063) evaluator_time: 0.0057 (0.0057) time: 0.4269 data: 0.3066 max mem: 3653 Test: [37/38] eta: 0:00:00 model_time: 0.0754 (0.0770) evaluator_time: 0.0019 (0.0027) time: 0.0972 data: 0.0084 max mem: 3653 Test: Total time: 0:00:04 (0.1119 s / it) Averaged stats: model_time: 0.0754 (0.0770) evaluator_time: 0.0019 (0.0027) Accumulating evaluation results... DONE (t=0.01s). IoU metric: bbox Average Precision (AP) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.653 Average Precision (AP) @[ IoU=0.50 | area= all | maxDets=100 ] = 0.986 Average Precision (AP) @[ IoU=0.75 | area= all | maxDets=100 ] = 0.779 Average Precision (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.653 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 1 ] = 0.261 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 10 ] = 0.735 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.735 Average Recall (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.735 Epoch: [9] [ 0/172] eta: 0:02:47 lr: 0.000005 loss: 0.2251 (0.2251) loss_classifier: 0.0381 (0.0381) loss_box_reg: 0.0688 (0.0688) loss_objectness: 0.0134 (0.0134) loss_rpn_box_reg: 0.1047 (0.1047) time: 0.9755 data: 0.5910 max mem: 3653 Epoch: [9] [ 10/172] eta: 0:01:14 lr: 0.000005 loss: 0.2251 (0.2174) loss_classifier: 0.0381 (0.0379) loss_box_reg: 0.0702 (0.0717) loss_objectness: 0.0134 (0.0144) loss_rpn_box_reg: 0.0977 (0.0934) time: 0.4580 data: 0.0956 max mem: 3653 Epoch: [9] [ 20/172] eta: 0:01:05 lr: 0.000005 loss: 0.2127 (0.2332) loss_classifier: 0.0384 (0.0429) loss_box_reg: 0.0702 (0.0805) loss_objectness: 0.0129 (0.0143) loss_rpn_box_reg: 0.0882 (0.0956) time: 0.4017 data: 0.0316 max mem: 3653 Epoch: [9] [ 30/172] eta: 0:00:59 lr: 0.000005 loss: 0.2095 (0.2307) loss_classifier: 0.0426 (0.0434) loss_box_reg: 0.0692 (0.0787) loss_objectness: 0.0109 (0.0135) loss_rpn_box_reg: 0.0882 (0.0951) time: 0.3949 data: 0.0162 max mem: 3653 Epoch: [9] [ 40/172] eta: 0:00:54 lr: 0.000005 loss: 0.1649 (0.2188) loss_classifier: 0.0306 (0.0402) loss_box_reg: 0.0548 (0.0728) loss_objectness: 0.0127 (0.0146) loss_rpn_box_reg: 0.0725 (0.0912) time: 0.3935 data: 0.0163 max mem: 3653 Epoch: [9] [ 50/172] eta: 0:00:49 lr: 0.000005 loss: 0.1877 (0.2253) loss_classifier: 0.0302 (0.0401) loss_box_reg: 0.0616 (0.0719) loss_objectness: 0.0132 (0.0165) loss_rpn_box_reg: 0.0872 (0.0967) time: 0.3884 data: 0.0171 max mem: 3653 Epoch: [9] [ 60/172] eta: 0:00:44 lr: 0.000005 loss: 0.2077 (0.2234) loss_classifier: 0.0390 (0.0403) loss_box_reg: 0.0639 (0.0715) loss_objectness: 0.0108 (0.0161) loss_rpn_box_reg: 0.0936 (0.0955) time: 0.3784 data: 0.0157 max mem: 3653 Epoch: [9] [ 70/172] eta: 0:00:41 lr: 0.000005 loss: 0.2024 (0.2206) loss_classifier: 0.0432 (0.0408) loss_box_reg: 0.0693 (0.0705) loss_objectness: 0.0134 (0.0162) loss_rpn_box_reg: 0.0821 (0.0931) time: 0.3969 data: 0.0177 max mem: 3653 Epoch: [9] [ 80/172] eta: 0:00:37 lr: 0.000005 loss: 0.2066 (0.2209) loss_classifier: 0.0432 (0.0409) loss_box_reg: 0.0693 (0.0707) loss_objectness: 0.0117 (0.0155) loss_rpn_box_reg: 0.0808 (0.0938) time: 0.4072 data: 0.0199 max mem: 3653 Epoch: [9] [ 90/172] eta: 0:00:32 lr: 0.000005 loss: 0.2510 (0.2234) loss_classifier: 0.0393 (0.0410) loss_box_reg: 0.0758 (0.0714) loss_objectness: 0.0094 (0.0155) loss_rpn_box_reg: 0.0967 (0.0954) time: 0.3906 data: 0.0183 max mem: 3653 Epoch: [9] [100/172] eta: 0:00:28 lr: 0.000005 loss: 0.2466 (0.2240) loss_classifier: 0.0376 (0.0403) loss_box_reg: 0.0758 (0.0713) loss_objectness: 0.0152 (0.0155) loss_rpn_box_reg: 0.0974 (0.0968) time: 0.3895 data: 0.0173 max mem: 3653 Epoch: [9] [110/172] eta: 0:00:24 lr: 0.000005 loss: 0.2253 (0.2247) loss_classifier: 0.0395 (0.0406) loss_box_reg: 0.0664 (0.0711) loss_objectness: 0.0152 (0.0156) loss_rpn_box_reg: 0.0997 (0.0974) time: 0.3935 data: 0.0172 max mem: 3653 Epoch: [9] [120/172] eta: 0:00:20 lr: 0.000005 loss: 0.2065 (0.2232) loss_classifier: 0.0440 (0.0407) loss_box_reg: 0.0629 (0.0699) loss_objectness: 0.0119 (0.0153) loss_rpn_box_reg: 0.0975 (0.0973) time: 0.3903 data: 0.0177 max mem: 3653 Epoch: [9] [130/172] eta: 0:00:16 lr: 0.000005 loss: 0.2103 (0.2226) loss_classifier: 0.0399 (0.0408) loss_box_reg: 0.0599 (0.0696) loss_objectness: 0.0091 (0.0151) loss_rpn_box_reg: 0.0975 (0.0972) time: 0.3849 data: 0.0190 max mem: 3653 Epoch: [9] [140/172] eta: 0:00:12 lr: 0.000005 loss: 0.2089 (0.2224) loss_classifier: 0.0399 (0.0408) loss_box_reg: 0.0599 (0.0689) loss_objectness: 0.0132 (0.0155) loss_rpn_box_reg: 0.0895 (0.0971) time: 0.3900 data: 0.0200 max mem: 3653 Epoch: [9] [150/172] eta: 0:00:08 lr: 0.000005 loss: 0.1931 (0.2220) loss_classifier: 0.0358 (0.0406) loss_box_reg: 0.0548 (0.0683) loss_objectness: 0.0149 (0.0154) loss_rpn_box_reg: 0.0968 (0.0978) time: 0.4125 data: 0.0199 max mem: 3653 Epoch: [9] [160/172] eta: 0:00:04 lr: 0.000005 loss: 0.1521 (0.2191) loss_classifier: 0.0274 (0.0400) loss_box_reg: 0.0378 (0.0670) loss_objectness: 0.0119 (0.0152) loss_rpn_box_reg: 0.0790 (0.0968) time: 0.4104 data: 0.0184 max mem: 3653 Epoch: [9] [170/172] eta: 0:00:00 lr: 0.000005 loss: 0.1573 (0.2182) loss_classifier: 0.0304 (0.0398) loss_box_reg: 0.0400 (0.0668) loss_objectness: 0.0151 (0.0153) loss_rpn_box_reg: 0.0786 (0.0963) time: 0.4049 data: 0.0179 max mem: 3653 Epoch: [9] [171/172] eta: 0:00:00 lr: 0.000005 loss: 0.1573 (0.2183) loss_classifier: 0.0299 (0.0397) loss_box_reg: 0.0400 (0.0668) loss_objectness: 0.0151 (0.0153) loss_rpn_box_reg: 0.0786 (0.0965) time: 0.3954 data: 0.0175 max mem: 3653 Epoch: [9] Total time: 0:01:08 (0.3993 s / it) creating index... index created! Test: [ 0/38] eta: 0:00:15 model_time: 0.0975 (0.0975) evaluator_time: 0.0059 (0.0059) time: 0.4084 data: 0.2966 max mem: 3653 Test: [37/38] eta: 0:00:00 model_time: 0.0756 (0.0768) evaluator_time: 0.0018 (0.0028) time: 0.0972 data: 0.0086 max mem: 3653 Test: Total time: 0:00:04 (0.1129 s / it) Averaged stats: model_time: 0.0756 (0.0768) evaluator_time: 0.0018 (0.0028) Accumulating evaluation results... DONE (t=0.01s). IoU metric: bbox Average Precision (AP) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.650 Average Precision (AP) @[ IoU=0.50 | area= all | maxDets=100 ] = 0.983 Average Precision (AP) @[ IoU=0.75 | area= all | maxDets=100 ] = 0.779 Average Precision (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.650 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 1 ] = 0.262 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 10 ] = 0.735 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.735 Average Recall (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.735 Epoch: [10] [ 0/172] eta: 0:02:37 lr: 0.000005 loss: 0.4098 (0.4098) loss_classifier: 0.0798 (0.0798) loss_box_reg: 0.1409 (0.1409) loss_objectness: 0.0156 (0.0156) loss_rpn_box_reg: 0.1735 (0.1735) time: 0.9132 data: 0.5459 max mem: 3653 Epoch: [10] [ 10/172] eta: 0:01:12 lr: 0.000005 loss: 0.2730 (0.2702) loss_classifier: 0.0522 (0.0487) loss_box_reg: 0.0938 (0.0886) loss_objectness: 0.0144 (0.0167) loss_rpn_box_reg: 0.1189 (0.1161) time: 0.4494 data: 0.0718 max mem: 3653 Epoch: [10] [ 20/172] eta: 0:01:06 lr: 0.000005 loss: 0.2380 (0.2556) loss_classifier: 0.0445 (0.0471) loss_box_reg: 0.0681 (0.0877) loss_objectness: 0.0117 (0.0147) loss_rpn_box_reg: 0.0975 (0.1061) time: 0.4141 data: 0.0218 max mem: 3653 Epoch: [10] [ 30/172] eta: 0:01:01 lr: 0.000005 loss: 0.2067 (0.2408) loss_classifier: 0.0345 (0.0432) loss_box_reg: 0.0654 (0.0785) loss_objectness: 0.0118 (0.0150) loss_rpn_box_reg: 0.0935 (0.1041) time: 0.4195 data: 0.0198 max mem: 3653 Epoch: [10] [ 40/172] eta: 0:00:56 lr: 0.000005 loss: 0.1924 (0.2306) loss_classifier: 0.0315 (0.0413) loss_box_reg: 0.0561 (0.0730) loss_objectness: 0.0127 (0.0145) loss_rpn_box_reg: 0.0839 (0.1017) time: 0.4108 data: 0.0193 max mem: 3653 Epoch: [10] [ 50/172] eta: 0:00:51 lr: 0.000005 loss: 0.1950 (0.2242) loss_classifier: 0.0337 (0.0402) loss_box_reg: 0.0556 (0.0698) loss_objectness: 0.0129 (0.0144) loss_rpn_box_reg: 0.0906 (0.0998) time: 0.4042 data: 0.0177 max mem: 3653 Epoch: [10] [ 60/172] eta: 0:00:46 lr: 0.000005 loss: 0.2012 (0.2249) loss_classifier: 0.0344 (0.0399) loss_box_reg: 0.0620 (0.0707) loss_objectness: 0.0126 (0.0141) loss_rpn_box_reg: 0.0915 (0.1001) time: 0.3909 data: 0.0173 max mem: 3653 Epoch: [10] [ 70/172] eta: 0:00:41 lr: 0.000005 loss: 0.2246 (0.2281) loss_classifier: 0.0344 (0.0400) loss_box_reg: 0.0620 (0.0700) loss_objectness: 0.0132 (0.0158) loss_rpn_box_reg: 0.1018 (0.1023) time: 0.3823 data: 0.0169 max mem: 3653 Epoch: [10] [ 80/172] eta: 0:00:37 lr: 0.000005 loss: 0.1883 (0.2255) loss_classifier: 0.0289 (0.0392) loss_box_reg: 0.0600 (0.0687) loss_objectness: 0.0144 (0.0161) loss_rpn_box_reg: 0.0964 (0.1016) time: 0.3846 data: 0.0157 max mem: 3653 Epoch: [10] [ 90/172] eta: 0:00:33 lr: 0.000005 loss: 0.1854 (0.2218) loss_classifier: 0.0299 (0.0388) loss_box_reg: 0.0418 (0.0679) loss_objectness: 0.0145 (0.0159) loss_rpn_box_reg: 0.0814 (0.0993) time: 0.4028 data: 0.0179 max mem: 3653 Epoch: [10] [100/172] eta: 0:00:29 lr: 0.000005 loss: 0.1748 (0.2208) loss_classifier: 0.0371 (0.0389) loss_box_reg: 0.0583 (0.0682) loss_objectness: 0.0109 (0.0158) loss_rpn_box_reg: 0.0707 (0.0978) time: 0.4256 data: 0.0217 max mem: 3653 Epoch: [10] [110/172] eta: 0:00:25 lr: 0.000005 loss: 0.1812 (0.2195) loss_classifier: 0.0400 (0.0390) loss_box_reg: 0.0566 (0.0674) loss_objectness: 0.0104 (0.0155) loss_rpn_box_reg: 0.0834 (0.0976) time: 0.4092 data: 0.0199 max mem: 3653 Epoch: [10] [120/172] eta: 0:00:21 lr: 0.000005 loss: 0.1680 (0.2168) loss_classifier: 0.0340 (0.0386) loss_box_reg: 0.0421 (0.0662) loss_objectness: 0.0119 (0.0156) loss_rpn_box_reg: 0.0877 (0.0964) time: 0.3926 data: 0.0171 max mem: 3653 Epoch: [10] [130/172] eta: 0:00:17 lr: 0.000005 loss: 0.1848 (0.2174) loss_classifier: 0.0292 (0.0388) loss_box_reg: 0.0509 (0.0662) loss_objectness: 0.0119 (0.0158) loss_rpn_box_reg: 0.0905 (0.0966) time: 0.3890 data: 0.0165 max mem: 3653 Epoch: [10] [140/172] eta: 0:00:12 lr: 0.000005 loss: 0.2170 (0.2186) loss_classifier: 0.0412 (0.0392) loss_box_reg: 0.0659 (0.0667) loss_objectness: 0.0079 (0.0158) loss_rpn_box_reg: 0.1040 (0.0969) time: 0.3847 data: 0.0162 max mem: 3653 Epoch: [10] [150/172] eta: 0:00:08 lr: 0.000005 loss: 0.2170 (0.2180) loss_classifier: 0.0424 (0.0394) loss_box_reg: 0.0669 (0.0667) loss_objectness: 0.0110 (0.0159) loss_rpn_box_reg: 0.0861 (0.0960) time: 0.3954 data: 0.0170 max mem: 3653 Epoch: [10] [160/172] eta: 0:00:04 lr: 0.000005 loss: 0.2155 (0.2190) loss_classifier: 0.0424 (0.0400) loss_box_reg: 0.0669 (0.0667) loss_objectness: 0.0146 (0.0158) loss_rpn_box_reg: 0.0905 (0.0966) time: 0.4053 data: 0.0182 max mem: 3653 Epoch: [10] [170/172] eta: 0:00:00 lr: 0.000005 loss: 0.2145 (0.2185) loss_classifier: 0.0410 (0.0400) loss_box_reg: 0.0521 (0.0666) loss_objectness: 0.0125 (0.0158) loss_rpn_box_reg: 0.0862 (0.0961) time: 0.3967 data: 0.0173 max mem: 3653 Epoch: [10] [171/172] eta: 0:00:00 lr: 0.000005 loss: 0.2169 (0.2196) loss_classifier: 0.0429 (0.0400) loss_box_reg: 0.0557 (0.0666) loss_objectness: 0.0125 (0.0161) loss_rpn_box_reg: 0.0862 (0.0969) time: 0.3888 data: 0.0170 max mem: 3653 Epoch: [10] Total time: 0:01:09 (0.4024 s / it) creating index... index created! Test: [ 0/38] eta: 0:00:16 model_time: 0.0930 (0.0930) evaluator_time: 0.0054 (0.0054) time: 0.4215 data: 0.3128 max mem: 3653 Test: [37/38] eta: 0:00:00 model_time: 0.0756 (0.0764) evaluator_time: 0.0018 (0.0027) time: 0.0970 data: 0.0086 max mem: 3653 Test: Total time: 0:00:04 (0.1123 s / it) Averaged stats: model_time: 0.0756 (0.0764) evaluator_time: 0.0018 (0.0027) Accumulating evaluation results... DONE (t=0.01s). IoU metric: bbox Average Precision (AP) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.649 Average Precision (AP) @[ IoU=0.50 | area= all | maxDets=100 ] = 0.983 Average Precision (AP) @[ IoU=0.75 | area= all | maxDets=100 ] = 0.779 Average Precision (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.649 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 1 ] = 0.262 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 10 ] = 0.734 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.734 Average Recall (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.734 Epoch: [11] [ 0/172] eta: 0:02:51 lr: 0.000005 loss: 0.2761 (0.2761) loss_classifier: 0.0376 (0.0376) loss_box_reg: 0.0952 (0.0952) loss_objectness: 0.0053 (0.0053) loss_rpn_box_reg: 0.1380 (0.1380) time: 0.9991 data: 0.6305 max mem: 3653 Epoch: [11] [ 10/172] eta: 0:01:13 lr: 0.000005 loss: 0.2280 (0.2286) loss_classifier: 0.0376 (0.0423) loss_box_reg: 0.0682 (0.0720) loss_objectness: 0.0121 (0.0155) loss_rpn_box_reg: 0.1016 (0.0989) time: 0.4555 data: 0.0789 max mem: 3653 Epoch: [11] [ 20/172] eta: 0:01:05 lr: 0.000005 loss: 0.2414 (0.2385) loss_classifier: 0.0398 (0.0414) loss_box_reg: 0.0616 (0.0727) loss_objectness: 0.0121 (0.0149) loss_rpn_box_reg: 0.1075 (0.1095) time: 0.4013 data: 0.0210 max mem: 3653 Epoch: [11] [ 30/172] eta: 0:00:58 lr: 0.000005 loss: 0.2161 (0.2248) loss_classifier: 0.0353 (0.0399) loss_box_reg: 0.0620 (0.0672) loss_objectness: 0.0148 (0.0163) loss_rpn_box_reg: 0.0930 (0.1014) time: 0.3931 data: 0.0173 max mem: 3653 Epoch: [11] [ 40/172] eta: 0:00:54 lr: 0.000005 loss: 0.2082 (0.2306) loss_classifier: 0.0371 (0.0412) loss_box_reg: 0.0652 (0.0707) loss_objectness: 0.0142 (0.0154) loss_rpn_box_reg: 0.0889 (0.1033) time: 0.3984 data: 0.0195 max mem: 3653 Epoch: [11] [ 50/172] eta: 0:00:49 lr: 0.000005 loss: 0.2036 (0.2320) loss_classifier: 0.0332 (0.0398) loss_box_reg: 0.0631 (0.0686) loss_objectness: 0.0119 (0.0181) loss_rpn_box_reg: 0.0941 (0.1055) time: 0.3984 data: 0.0196 max mem: 3653 Epoch: [11] [ 60/172] eta: 0:00:45 lr: 0.000005 loss: 0.2014 (0.2315) loss_classifier: 0.0332 (0.0406) loss_box_reg: 0.0524 (0.0687) loss_objectness: 0.0149 (0.0177) loss_rpn_box_reg: 0.0889 (0.1046) time: 0.3942 data: 0.0178 max mem: 3653 Epoch: [11] [ 70/172] eta: 0:00:41 lr: 0.000005 loss: 0.2014 (0.2289) loss_classifier: 0.0334 (0.0396) loss_box_reg: 0.0510 (0.0677) loss_objectness: 0.0137 (0.0179) loss_rpn_box_reg: 0.0889 (0.1038) time: 0.4017 data: 0.0186 max mem: 3653 Epoch: [11] [ 80/172] eta: 0:00:37 lr: 0.000005 loss: 0.2039 (0.2283) loss_classifier: 0.0308 (0.0398) loss_box_reg: 0.0568 (0.0673) loss_objectness: 0.0154 (0.0179) loss_rpn_box_reg: 0.0866 (0.1033) time: 0.3946 data: 0.0167 max mem: 3653 Epoch: [11] [ 90/172] eta: 0:00:33 lr: 0.000005 loss: 0.2546 (0.2298) loss_classifier: 0.0422 (0.0407) loss_box_reg: 0.0775 (0.0690) loss_objectness: 0.0135 (0.0177) loss_rpn_box_reg: 0.0857 (0.1024) time: 0.3883 data: 0.0168 max mem: 3653 Epoch: [11] [100/172] eta: 0:00:29 lr: 0.000005 loss: 0.1841 (0.2262) loss_classifier: 0.0375 (0.0405) loss_box_reg: 0.0610 (0.0687) loss_objectness: 0.0109 (0.0169) loss_rpn_box_reg: 0.0825 (0.1000) time: 0.4079 data: 0.0197 max mem: 3653 Epoch: [11] [110/172] eta: 0:00:24 lr: 0.000005 loss: 0.1655 (0.2235) loss_classifier: 0.0389 (0.0401) loss_box_reg: 0.0478 (0.0673) loss_objectness: 0.0107 (0.0167) loss_rpn_box_reg: 0.0838 (0.0994) time: 0.4032 data: 0.0198 max mem: 3653 Epoch: [11] [120/172] eta: 0:00:20 lr: 0.000005 loss: 0.2033 (0.2234) loss_classifier: 0.0394 (0.0400) loss_box_reg: 0.0586 (0.0676) loss_objectness: 0.0127 (0.0167) loss_rpn_box_reg: 0.0885 (0.0991) time: 0.3835 data: 0.0193 max mem: 3653 Epoch: [11] [130/172] eta: 0:00:16 lr: 0.000005 loss: 0.2339 (0.2253) loss_classifier: 0.0386 (0.0404) loss_box_reg: 0.0819 (0.0692) loss_objectness: 0.0113 (0.0163) loss_rpn_box_reg: 0.0897 (0.0994) time: 0.3981 data: 0.0196 max mem: 3653 Epoch: [11] [140/172] eta: 0:00:12 lr: 0.000005 loss: 0.2309 (0.2272) loss_classifier: 0.0386 (0.0409) loss_box_reg: 0.0819 (0.0696) loss_objectness: 0.0113 (0.0165) loss_rpn_box_reg: 0.0985 (0.1002) time: 0.4026 data: 0.0179 max mem: 3653 Epoch: [11] [150/172] eta: 0:00:08 lr: 0.000005 loss: 0.2025 (0.2246) loss_classifier: 0.0352 (0.0406) loss_box_reg: 0.0606 (0.0691) loss_objectness: 0.0100 (0.0160) loss_rpn_box_reg: 0.0920 (0.0989) time: 0.4034 data: 0.0175 max mem: 3653 Epoch: [11] [160/172] eta: 0:00:04 lr: 0.000005 loss: 0.1582 (0.2219) loss_classifier: 0.0263 (0.0400) loss_box_reg: 0.0485 (0.0681) loss_objectness: 0.0089 (0.0160) loss_rpn_box_reg: 0.0665 (0.0977) time: 0.3893 data: 0.0171 max mem: 3653 Epoch: [11] [170/172] eta: 0:00:00 lr: 0.000005 loss: 0.1588 (0.2191) loss_classifier: 0.0311 (0.0398) loss_box_reg: 0.0418 (0.0667) loss_objectness: 0.0137 (0.0160) loss_rpn_box_reg: 0.0801 (0.0965) time: 0.3803 data: 0.0150 max mem: 3653 Epoch: [11] [171/172] eta: 0:00:00 lr: 0.000005 loss: 0.1664 (0.2190) loss_classifier: 0.0324 (0.0398) loss_box_reg: 0.0437 (0.0667) loss_objectness: 0.0137 (0.0160) loss_rpn_box_reg: 0.0802 (0.0965) time: 0.3726 data: 0.0155 max mem: 3653 Epoch: [11] Total time: 0:01:08 (0.3991 s / it) creating index... index created! Test: [ 0/38] eta: 0:00:15 model_time: 0.0947 (0.0947) evaluator_time: 0.0053 (0.0053) time: 0.4125 data: 0.3041 max mem: 3653 Test: [37/38] eta: 0:00:00 model_time: 0.0753 (0.0768) evaluator_time: 0.0019 (0.0029) time: 0.0975 data: 0.0088 max mem: 3653 Test: Total time: 0:00:04 (0.1120 s / it) Averaged stats: model_time: 0.0753 (0.0768) evaluator_time: 0.0019 (0.0029) Accumulating evaluation results... DONE (t=0.01s). IoU metric: bbox Average Precision (AP) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.647 Average Precision (AP) @[ IoU=0.50 | area= all | maxDets=100 ] = 0.983 Average Precision (AP) @[ IoU=0.75 | area= all | maxDets=100 ] = 0.779 Average Precision (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.647 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 1 ] = 0.262 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 10 ] = 0.733 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.733 Average Recall (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.733 Epoch: [12] [ 0/172] eta: 0:02:40 lr: 0.000001 loss: 0.2052 (0.2052) loss_classifier: 0.0362 (0.0362) loss_box_reg: 0.0436 (0.0436) loss_objectness: 0.0088 (0.0088) loss_rpn_box_reg: 0.1166 (0.1166) time: 0.9341 data: 0.5416 max mem: 3653 Epoch: [12] [ 10/172] eta: 0:01:11 lr: 0.000001 loss: 0.1908 (0.1897) loss_classifier: 0.0331 (0.0309) loss_box_reg: 0.0554 (0.0564) loss_objectness: 0.0088 (0.0147) loss_rpn_box_reg: 0.0915 (0.0878) time: 0.4436 data: 0.0645 max mem: 3653 Epoch: [12] [ 20/172] eta: 0:01:03 lr: 0.000001 loss: 0.2104 (0.2115) loss_classifier: 0.0340 (0.0359) loss_box_reg: 0.0626 (0.0690) loss_objectness: 0.0087 (0.0155) loss_rpn_box_reg: 0.0886 (0.0911) time: 0.3912 data: 0.0165 max mem: 3653 Epoch: [12] [ 30/172] eta: 0:00:58 lr: 0.000001 loss: 0.2127 (0.2186) loss_classifier: 0.0397 (0.0372) loss_box_reg: 0.0723 (0.0677) loss_objectness: 0.0092 (0.0161) loss_rpn_box_reg: 0.0964 (0.0975) time: 0.3925 data: 0.0170 max mem: 3653 Epoch: [12] [ 40/172] eta: 0:00:54 lr: 0.000001 loss: 0.2191 (0.2223) loss_classifier: 0.0397 (0.0391) loss_box_reg: 0.0723 (0.0709) loss_objectness: 0.0139 (0.0156) loss_rpn_box_reg: 0.0955 (0.0967) time: 0.4020 data: 0.0179 max mem: 3653 Epoch: [12] [ 50/172] eta: 0:00:49 lr: 0.000001 loss: 0.2239 (0.2242) loss_classifier: 0.0381 (0.0394) loss_box_reg: 0.0723 (0.0692) loss_objectness: 0.0118 (0.0150) loss_rpn_box_reg: 0.0990 (0.1006) time: 0.3996 data: 0.0179 max mem: 3653 Epoch: [12] [ 60/172] eta: 0:00:45 lr: 0.000001 loss: 0.2423 (0.2289) loss_classifier: 0.0450 (0.0404) loss_box_reg: 0.0640 (0.0680) loss_objectness: 0.0103 (0.0160) loss_rpn_box_reg: 0.1074 (0.1044) time: 0.3891 data: 0.0175 max mem: 3653 Epoch: [12] [ 70/172] eta: 0:00:41 lr: 0.000001 loss: 0.2498 (0.2375) loss_classifier: 0.0502 (0.0420) loss_box_reg: 0.0747 (0.0721) loss_objectness: 0.0115 (0.0168) loss_rpn_box_reg: 0.1047 (0.1065) time: 0.4030 data: 0.0198 max mem: 3653 Epoch: [12] [ 80/172] eta: 0:00:37 lr: 0.000001 loss: 0.2079 (0.2322) loss_classifier: 0.0402 (0.0410) loss_box_reg: 0.0679 (0.0698) loss_objectness: 0.0143 (0.0166) loss_rpn_box_reg: 0.0936 (0.1049) time: 0.4091 data: 0.0205 max mem: 3653 Epoch: [12] [ 90/172] eta: 0:00:33 lr: 0.000001 loss: 0.1916 (0.2291) loss_classifier: 0.0395 (0.0415) loss_box_reg: 0.0521 (0.0687) loss_objectness: 0.0143 (0.0168) loss_rpn_box_reg: 0.0657 (0.1021) time: 0.4021 data: 0.0195 max mem: 3653 Epoch: [12] [100/172] eta: 0:00:29 lr: 0.000001 loss: 0.2013 (0.2288) loss_classifier: 0.0407 (0.0417) loss_box_reg: 0.0653 (0.0689) loss_objectness: 0.0119 (0.0164) loss_rpn_box_reg: 0.0770 (0.1018) time: 0.4004 data: 0.0185 max mem: 3653 Epoch: [12] [110/172] eta: 0:00:25 lr: 0.000001 loss: 0.1754 (0.2224) loss_classifier: 0.0390 (0.0410) loss_box_reg: 0.0523 (0.0670) loss_objectness: 0.0116 (0.0159) loss_rpn_box_reg: 0.0750 (0.0985) time: 0.4127 data: 0.0194 max mem: 3653 Epoch: [12] [120/172] eta: 0:00:21 lr: 0.000001 loss: 0.1754 (0.2237) loss_classifier: 0.0371 (0.0408) loss_box_reg: 0.0523 (0.0672) loss_objectness: 0.0147 (0.0161) loss_rpn_box_reg: 0.0776 (0.0995) time: 0.4123 data: 0.0209 max mem: 3653 Epoch: [12] [130/172] eta: 0:00:16 lr: 0.000001 loss: 0.2033 (0.2233) loss_classifier: 0.0357 (0.0404) loss_box_reg: 0.0686 (0.0676) loss_objectness: 0.0162 (0.0161) loss_rpn_box_reg: 0.0960 (0.0993) time: 0.3874 data: 0.0174 max mem: 3653 Epoch: [12] [140/172] eta: 0:00:12 lr: 0.000001 loss: 0.1902 (0.2206) loss_classifier: 0.0333 (0.0400) loss_box_reg: 0.0650 (0.0667) loss_objectness: 0.0128 (0.0158) loss_rpn_box_reg: 0.0739 (0.0981) time: 0.3836 data: 0.0161 max mem: 3653 Epoch: [12] [150/172] eta: 0:00:08 lr: 0.000001 loss: 0.2022 (0.2215) loss_classifier: 0.0397 (0.0405) loss_box_reg: 0.0679 (0.0672) loss_objectness: 0.0102 (0.0157) loss_rpn_box_reg: 0.0850 (0.0980) time: 0.3865 data: 0.0166 max mem: 3653 Epoch: [12] [160/172] eta: 0:00:04 lr: 0.000001 loss: 0.2184 (0.2217) loss_classifier: 0.0407 (0.0404) loss_box_reg: 0.0725 (0.0678) loss_objectness: 0.0144 (0.0160) loss_rpn_box_reg: 0.0850 (0.0975) time: 0.3849 data: 0.0173 max mem: 3653 Epoch: [12] [170/172] eta: 0:00:00 lr: 0.000001 loss: 0.1810 (0.2193) loss_classifier: 0.0364 (0.0399) loss_box_reg: 0.0586 (0.0669) loss_objectness: 0.0145 (0.0158) loss_rpn_box_reg: 0.0796 (0.0968) time: 0.3988 data: 0.0185 max mem: 3653 Epoch: [12] [171/172] eta: 0:00:00 lr: 0.000001 loss: 0.1678 (0.2187) loss_classifier: 0.0364 (0.0398) loss_box_reg: 0.0528 (0.0668) loss_objectness: 0.0145 (0.0158) loss_rpn_box_reg: 0.0796 (0.0963) time: 0.3912 data: 0.0184 max mem: 3653 Epoch: [12] Total time: 0:01:08 (0.4003 s / it) creating index... index created! Test: [ 0/38] eta: 0:00:17 model_time: 0.1450 (0.1450) evaluator_time: 0.0064 (0.0064) time: 0.4543 data: 0.2938 max mem: 3653 Test: [37/38] eta: 0:00:00 model_time: 0.0752 (0.0779) evaluator_time: 0.0018 (0.0027) time: 0.0972 data: 0.0086 max mem: 3653 Test: Total time: 0:00:04 (0.1130 s / it) Averaged stats: model_time: 0.0752 (0.0779) evaluator_time: 0.0018 (0.0027) Accumulating evaluation results... DONE (t=0.01s). IoU metric: bbox Average Precision (AP) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.647 Average Precision (AP) @[ IoU=0.50 | area= all | maxDets=100 ] = 0.984 Average Precision (AP) @[ IoU=0.75 | area= all | maxDets=100 ] = 0.779 Average Precision (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.647 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 1 ] = 0.262 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 10 ] = 0.733 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.733 Average Recall (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.733 Epoch: [13] [ 0/172] eta: 0:02:56 lr: 0.000001 loss: 0.3354 (0.3354) loss_classifier: 0.0535 (0.0535) loss_box_reg: 0.1102 (0.1102) loss_objectness: 0.0185 (0.0185) loss_rpn_box_reg: 0.1532 (0.1532) time: 1.0258 data: 0.5857 max mem: 3653 Epoch: [13] [ 10/172] eta: 0:01:11 lr: 0.000001 loss: 0.1821 (0.1937) loss_classifier: 0.0305 (0.0301) loss_box_reg: 0.0516 (0.0519) loss_objectness: 0.0127 (0.0135) loss_rpn_box_reg: 0.0910 (0.0982) time: 0.4390 data: 0.0666 max mem: 3653 Epoch: [13] [ 20/172] eta: 0:01:03 lr: 0.000001 loss: 0.2039 (0.2172) loss_classifier: 0.0331 (0.0382) loss_box_reg: 0.0530 (0.0638) loss_objectness: 0.0127 (0.0167) loss_rpn_box_reg: 0.0901 (0.0985) time: 0.3895 data: 0.0171 max mem: 3653 Epoch: [13] [ 30/172] eta: 0:00:59 lr: 0.000001 loss: 0.2018 (0.2085) loss_classifier: 0.0368 (0.0372) loss_box_reg: 0.0528 (0.0598) loss_objectness: 0.0155 (0.0164) loss_rpn_box_reg: 0.0901 (0.0951) time: 0.4028 data: 0.0179 max mem: 3653 Epoch: [13] [ 40/172] eta: 0:00:54 lr: 0.000001 loss: 0.2009 (0.2075) loss_classifier: 0.0390 (0.0384) loss_box_reg: 0.0528 (0.0603) loss_objectness: 0.0155 (0.0162) loss_rpn_box_reg: 0.0836 (0.0927) time: 0.4040 data: 0.0173 max mem: 3653 Epoch: [13] [ 50/172] eta: 0:00:49 lr: 0.000001 loss: 0.2009 (0.2100) loss_classifier: 0.0390 (0.0388) loss_box_reg: 0.0565 (0.0617) loss_objectness: 0.0147 (0.0161) loss_rpn_box_reg: 0.0846 (0.0934) time: 0.3899 data: 0.0178 max mem: 3653 Epoch: [13] [ 60/172] eta: 0:00:45 lr: 0.000001 loss: 0.2069 (0.2133) loss_classifier: 0.0353 (0.0390) loss_box_reg: 0.0565 (0.0630) loss_objectness: 0.0117 (0.0156) loss_rpn_box_reg: 0.0967 (0.0956) time: 0.3821 data: 0.0186 max mem: 3653 Epoch: [13] [ 70/172] eta: 0:00:40 lr: 0.000001 loss: 0.2361 (0.2217) loss_classifier: 0.0366 (0.0406) loss_box_reg: 0.0673 (0.0672) loss_objectness: 0.0104 (0.0151) loss_rpn_box_reg: 0.1113 (0.0988) time: 0.3810 data: 0.0189 max mem: 3653 Epoch: [13] [ 80/172] eta: 0:00:36 lr: 0.000001 loss: 0.2559 (0.2249) loss_classifier: 0.0420 (0.0416) loss_box_reg: 0.0826 (0.0689) loss_objectness: 0.0099 (0.0146) loss_rpn_box_reg: 0.1113 (0.0999) time: 0.3952 data: 0.0188 max mem: 3653 Epoch: [13] [ 90/172] eta: 0:00:32 lr: 0.000001 loss: 0.2311 (0.2250) loss_classifier: 0.0397 (0.0413) loss_box_reg: 0.0704 (0.0686) loss_objectness: 0.0111 (0.0145) loss_rpn_box_reg: 0.0972 (0.1006) time: 0.3974 data: 0.0192 max mem: 3653 Epoch: [13] [100/172] eta: 0:00:28 lr: 0.000001 loss: 0.1783 (0.2210) loss_classifier: 0.0277 (0.0408) loss_box_reg: 0.0588 (0.0684) loss_objectness: 0.0112 (0.0145) loss_rpn_box_reg: 0.0783 (0.0974) time: 0.3945 data: 0.0183 max mem: 3653 Epoch: [13] [110/172] eta: 0:00:24 lr: 0.000001 loss: 0.1819 (0.2214) loss_classifier: 0.0298 (0.0408) loss_box_reg: 0.0676 (0.0691) loss_objectness: 0.0131 (0.0150) loss_rpn_box_reg: 0.0652 (0.0966) time: 0.4020 data: 0.0178 max mem: 3653 Epoch: [13] [120/172] eta: 0:00:20 lr: 0.000001 loss: 0.2323 (0.2208) loss_classifier: 0.0392 (0.0408) loss_box_reg: 0.0696 (0.0689) loss_objectness: 0.0163 (0.0150) loss_rpn_box_reg: 0.0914 (0.0961) time: 0.3820 data: 0.0173 max mem: 3653 Epoch: [13] [130/172] eta: 0:00:16 lr: 0.000001 loss: 0.2361 (0.2219) loss_classifier: 0.0428 (0.0413) loss_box_reg: 0.0709 (0.0700) loss_objectness: 0.0145 (0.0147) loss_rpn_box_reg: 0.0914 (0.0958) time: 0.3940 data: 0.0172 max mem: 3653 Epoch: [13] [140/172] eta: 0:00:12 lr: 0.000001 loss: 0.2208 (0.2213) loss_classifier: 0.0418 (0.0410) loss_box_reg: 0.0781 (0.0695) loss_objectness: 0.0063 (0.0144) loss_rpn_box_reg: 0.0955 (0.0964) time: 0.4201 data: 0.0198 max mem: 3653 Epoch: [13] [150/172] eta: 0:00:08 lr: 0.000001 loss: 0.2062 (0.2198) loss_classifier: 0.0319 (0.0404) loss_box_reg: 0.0540 (0.0685) loss_objectness: 0.0096 (0.0145) loss_rpn_box_reg: 0.0939 (0.0964) time: 0.4061 data: 0.0197 max mem: 3653 Epoch: [13] [160/172] eta: 0:00:04 lr: 0.000001 loss: 0.1887 (0.2167) loss_classifier: 0.0290 (0.0396) loss_box_reg: 0.0445 (0.0670) loss_objectness: 0.0124 (0.0144) loss_rpn_box_reg: 0.0836 (0.0957) time: 0.3880 data: 0.0169 max mem: 3653 Epoch: [13] [170/172] eta: 0:00:00 lr: 0.000001 loss: 0.1878 (0.2178) loss_classifier: 0.0331 (0.0399) loss_box_reg: 0.0445 (0.0670) loss_objectness: 0.0106 (0.0148) loss_rpn_box_reg: 0.0836 (0.0962) time: 0.3820 data: 0.0167 max mem: 3653 Epoch: [13] [171/172] eta: 0:00:00 lr: 0.000001 loss: 0.1720 (0.2174) loss_classifier: 0.0291 (0.0398) loss_box_reg: 0.0439 (0.0667) loss_objectness: 0.0097 (0.0147) loss_rpn_box_reg: 0.0851 (0.0961) time: 0.3730 data: 0.0165 max mem: 3653 Epoch: [13] Total time: 0:01:08 (0.3967 s / it) creating index... index created! Test: [ 0/38] eta: 0:00:15 model_time: 0.0935 (0.0935) evaluator_time: 0.0057 (0.0057) time: 0.4138 data: 0.3043 max mem: 3653 Test: [37/38] eta: 0:00:00 model_time: 0.0758 (0.0771) evaluator_time: 0.0018 (0.0026) time: 0.0974 data: 0.0087 max mem: 3653 Test: Total time: 0:00:04 (0.1123 s / it) Averaged stats: model_time: 0.0758 (0.0771) evaluator_time: 0.0018 (0.0026) Accumulating evaluation results... DONE (t=0.01s). IoU metric: bbox Average Precision (AP) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.647 Average Precision (AP) @[ IoU=0.50 | area= all | maxDets=100 ] = 0.984 Average Precision (AP) @[ IoU=0.75 | area= all | maxDets=100 ] = 0.779 Average Precision (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.647 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 1 ] = 0.262 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 10 ] = 0.733 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.733 Average Recall (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.733 Epoch: [14] [ 0/172] eta: 0:04:04 lr: 0.000001 loss: 0.2291 (0.2291) loss_classifier: 0.0582 (0.0582) loss_box_reg: 0.0723 (0.0723) loss_objectness: 0.0076 (0.0076) loss_rpn_box_reg: 0.0911 (0.0911) time: 1.4213 data: 0.9372 max mem: 3653 Epoch: [14] [ 10/172] eta: 0:01:19 lr: 0.000001 loss: 0.2291 (0.2542) loss_classifier: 0.0452 (0.0497) loss_box_reg: 0.0615 (0.0800) loss_objectness: 0.0136 (0.0191) loss_rpn_box_reg: 0.0941 (0.1054) time: 0.4922 data: 0.1006 max mem: 3653 Epoch: [14] [ 20/172] eta: 0:01:07 lr: 0.000001 loss: 0.2034 (0.2282) loss_classifier: 0.0303 (0.0407) loss_box_reg: 0.0489 (0.0719) loss_objectness: 0.0120 (0.0160) loss_rpn_box_reg: 0.0831 (0.0997) time: 0.3924 data: 0.0166 max mem: 3653 Epoch: [14] [ 30/172] eta: 0:01:00 lr: 0.000001 loss: 0.2328 (0.2396) loss_classifier: 0.0413 (0.0434) loss_box_reg: 0.0763 (0.0765) loss_objectness: 0.0095 (0.0156) loss_rpn_box_reg: 0.0950 (0.1040) time: 0.3899 data: 0.0159 max mem: 3653 Epoch: [14] [ 40/172] eta: 0:00:54 lr: 0.000001 loss: 0.2346 (0.2287) loss_classifier: 0.0476 (0.0430) loss_box_reg: 0.0756 (0.0714) loss_objectness: 0.0152 (0.0166) loss_rpn_box_reg: 0.0918 (0.0976) time: 0.3895 data: 0.0149 max mem: 3653 Epoch: [14] [ 50/172] eta: 0:00:49 lr: 0.000001 loss: 0.1848 (0.2246) loss_classifier: 0.0356 (0.0411) loss_box_reg: 0.0519 (0.0683) loss_objectness: 0.0118 (0.0156) loss_rpn_box_reg: 0.0899 (0.0996) time: 0.3790 data: 0.0150 max mem: 3653 Epoch: [14] [ 60/172] eta: 0:00:45 lr: 0.000001 loss: 0.1995 (0.2213) loss_classifier: 0.0371 (0.0409) loss_box_reg: 0.0540 (0.0665) loss_objectness: 0.0101 (0.0154) loss_rpn_box_reg: 0.0945 (0.0985) time: 0.3958 data: 0.0182 max mem: 3653 Epoch: [14] [ 70/172] eta: 0:00:41 lr: 0.000001 loss: 0.2050 (0.2221) loss_classifier: 0.0385 (0.0410) loss_box_reg: 0.0559 (0.0677) loss_objectness: 0.0117 (0.0149) loss_rpn_box_reg: 0.0945 (0.0985) time: 0.4161 data: 0.0218 max mem: 3653 Epoch: [14] [ 80/172] eta: 0:00:37 lr: 0.000001 loss: 0.2050 (0.2209) loss_classifier: 0.0365 (0.0409) loss_box_reg: 0.0554 (0.0677) loss_objectness: 0.0119 (0.0150) loss_rpn_box_reg: 0.0831 (0.0973) time: 0.3981 data: 0.0211 max mem: 3653 Epoch: [14] [ 90/172] eta: 0:00:33 lr: 0.000001 loss: 0.1711 (0.2199) loss_classifier: 0.0343 (0.0407) loss_box_reg: 0.0541 (0.0678) loss_objectness: 0.0120 (0.0149) loss_rpn_box_reg: 0.0741 (0.0965) time: 0.3956 data: 0.0189 max mem: 3653 Epoch: [14] [100/172] eta: 0:00:29 lr: 0.000001 loss: 0.1943 (0.2211) loss_classifier: 0.0343 (0.0408) loss_box_reg: 0.0604 (0.0677) loss_objectness: 0.0096 (0.0156) loss_rpn_box_reg: 0.0776 (0.0971) time: 0.4147 data: 0.0197 max mem: 3653 Epoch: [14] [110/172] eta: 0:00:25 lr: 0.000001 loss: 0.1998 (0.2199) loss_classifier: 0.0363 (0.0403) loss_box_reg: 0.0597 (0.0672) loss_objectness: 0.0099 (0.0153) loss_rpn_box_reg: 0.0861 (0.0969) time: 0.4006 data: 0.0183 max mem: 3653 Epoch: [14] [120/172] eta: 0:00:21 lr: 0.000001 loss: 0.2073 (0.2215) loss_classifier: 0.0379 (0.0405) loss_box_reg: 0.0636 (0.0679) loss_objectness: 0.0153 (0.0154) loss_rpn_box_reg: 0.0866 (0.0976) time: 0.3851 data: 0.0159 max mem: 3653 Epoch: [14] [130/172] eta: 0:00:16 lr: 0.000001 loss: 0.2073 (0.2205) loss_classifier: 0.0406 (0.0405) loss_box_reg: 0.0636 (0.0677) loss_objectness: 0.0155 (0.0157) loss_rpn_box_reg: 0.0883 (0.0967) time: 0.3957 data: 0.0175 max mem: 3653 Epoch: [14] [140/172] eta: 0:00:12 lr: 0.000001 loss: 0.2004 (0.2209) loss_classifier: 0.0330 (0.0404) loss_box_reg: 0.0558 (0.0678) loss_objectness: 0.0144 (0.0155) loss_rpn_box_reg: 0.0883 (0.0972) time: 0.3877 data: 0.0182 max mem: 3653 Epoch: [14] [150/172] eta: 0:00:08 lr: 0.000001 loss: 0.1929 (0.2187) loss_classifier: 0.0315 (0.0401) loss_box_reg: 0.0547 (0.0670) loss_objectness: 0.0127 (0.0155) loss_rpn_box_reg: 0.0832 (0.0962) time: 0.3773 data: 0.0169 max mem: 3653 Epoch: [14] [160/172] eta: 0:00:04 lr: 0.000001 loss: 0.1941 (0.2207) loss_classifier: 0.0406 (0.0406) loss_box_reg: 0.0634 (0.0679) loss_objectness: 0.0143 (0.0154) loss_rpn_box_reg: 0.0832 (0.0967) time: 0.3940 data: 0.0178 max mem: 3653 Epoch: [14] [170/172] eta: 0:00:00 lr: 0.000001 loss: 0.1917 (0.2185) loss_classifier: 0.0437 (0.0404) loss_box_reg: 0.0576 (0.0667) loss_objectness: 0.0079 (0.0151) loss_rpn_box_reg: 0.0855 (0.0963) time: 0.4035 data: 0.0192 max mem: 3653 Epoch: [14] [171/172] eta: 0:00:00 lr: 0.000001 loss: 0.1820 (0.2179) loss_classifier: 0.0406 (0.0402) loss_box_reg: 0.0517 (0.0665) loss_objectness: 0.0087 (0.0151) loss_rpn_box_reg: 0.0841 (0.0961) time: 0.3916 data: 0.0199 max mem: 3653 Epoch: [14] Total time: 0:01:08 (0.4004 s / it) creating index... index created! Test: [ 0/38] eta: 0:00:17 model_time: 0.1135 (0.1135) evaluator_time: 0.0057 (0.0057) time: 0.4514 data: 0.3236 max mem: 3653 Test: [37/38] eta: 0:00:00 model_time: 0.0756 (0.0775) evaluator_time: 0.0019 (0.0028) time: 0.0977 data: 0.0087 max mem: 3653 Test: Total time: 0:00:04 (0.1136 s / it) Averaged stats: model_time: 0.0756 (0.0775) evaluator_time: 0.0019 (0.0028) Accumulating evaluation results... DONE (t=0.01s). IoU metric: bbox Average Precision (AP) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.647 Average Precision (AP) @[ IoU=0.50 | area= all | maxDets=100 ] = 0.983 Average Precision (AP) @[ IoU=0.75 | area= all | maxDets=100 ] = 0.779 Average Precision (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.647 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 1 ] = 0.262 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 10 ] = 0.733 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.733 Average Recall (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.733 Epoch: [15] [ 0/172] eta: 0:04:22 lr: 0.000000 loss: 0.1552 (0.1552) loss_classifier: 0.0209 (0.0209) loss_box_reg: 0.0465 (0.0465) loss_objectness: 0.0108 (0.0108) loss_rpn_box_reg: 0.0769 (0.0769) time: 1.5236 data: 1.0813 max mem: 3653 Epoch: [15] [ 10/172] eta: 0:01:20 lr: 0.000000 loss: 0.1926 (0.2081) loss_classifier: 0.0443 (0.0395) loss_box_reg: 0.0567 (0.0663) loss_objectness: 0.0134 (0.0137) loss_rpn_box_reg: 0.0858 (0.0886) time: 0.4977 data: 0.1126 max mem: 3653 Epoch: [15] [ 20/172] eta: 0:01:10 lr: 0.000000 loss: 0.1926 (0.2151) loss_classifier: 0.0443 (0.0443) loss_box_reg: 0.0567 (0.0693) loss_objectness: 0.0148 (0.0159) loss_rpn_box_reg: 0.0801 (0.0857) time: 0.4109 data: 0.0188 max mem: 3653 Epoch: [15] [ 30/172] eta: 0:01:03 lr: 0.000000 loss: 0.1889 (0.2092) loss_classifier: 0.0397 (0.0420) loss_box_reg: 0.0585 (0.0669) loss_objectness: 0.0148 (0.0151) loss_rpn_box_reg: 0.0801 (0.0853) time: 0.4227 data: 0.0213 max mem: 3653 Epoch: [15] [ 40/172] eta: 0:00:57 lr: 0.000000 loss: 0.2150 (0.2142) loss_classifier: 0.0380 (0.0420) loss_box_reg: 0.0600 (0.0690) loss_objectness: 0.0143 (0.0154) loss_rpn_box_reg: 0.0850 (0.0877) time: 0.4025 data: 0.0187 max mem: 3653 Epoch: [15] [ 50/172] eta: 0:00:51 lr: 0.000000 loss: 0.2260 (0.2186) loss_classifier: 0.0368 (0.0408) loss_box_reg: 0.0659 (0.0675) loss_objectness: 0.0147 (0.0161) loss_rpn_box_reg: 0.1028 (0.0942) time: 0.3833 data: 0.0161 max mem: 3653 Epoch: [15] [ 60/172] eta: 0:00:46 lr: 0.000000 loss: 0.2144 (0.2171) loss_classifier: 0.0389 (0.0403) loss_box_reg: 0.0624 (0.0658) loss_objectness: 0.0131 (0.0165) loss_rpn_box_reg: 0.0966 (0.0946) time: 0.3893 data: 0.0169 max mem: 3653 Epoch: [15] [ 70/172] eta: 0:00:42 lr: 0.000000 loss: 0.1863 (0.2188) loss_classifier: 0.0410 (0.0422) loss_box_reg: 0.0510 (0.0665) loss_objectness: 0.0155 (0.0166) loss_rpn_box_reg: 0.0758 (0.0934) time: 0.3934 data: 0.0178 max mem: 3653 Epoch: [15] [ 80/172] eta: 0:00:38 lr: 0.000000 loss: 0.2235 (0.2221) loss_classifier: 0.0424 (0.0420) loss_box_reg: 0.0744 (0.0680) loss_objectness: 0.0179 (0.0176) loss_rpn_box_reg: 0.0850 (0.0945) time: 0.3968 data: 0.0182 max mem: 3653 Epoch: [15] [ 90/172] eta: 0:00:33 lr: 0.000000 loss: 0.2235 (0.2240) loss_classifier: 0.0326 (0.0422) loss_box_reg: 0.0744 (0.0680) loss_objectness: 0.0171 (0.0175) loss_rpn_box_reg: 0.1092 (0.0964) time: 0.3947 data: 0.0180 max mem: 3653 Epoch: [15] [100/172] eta: 0:00:29 lr: 0.000000 loss: 0.1997 (0.2218) loss_classifier: 0.0324 (0.0417) loss_box_reg: 0.0541 (0.0666) loss_objectness: 0.0135 (0.0169) loss_rpn_box_reg: 0.1092 (0.0966) time: 0.4039 data: 0.0182 max mem: 3653 Epoch: [15] [110/172] eta: 0:00:25 lr: 0.000000 loss: 0.1777 (0.2195) loss_classifier: 0.0318 (0.0409) loss_box_reg: 0.0421 (0.0658) loss_objectness: 0.0108 (0.0166) loss_rpn_box_reg: 0.0841 (0.0962) time: 0.4137 data: 0.0183 max mem: 3653 Epoch: [15] [120/172] eta: 0:00:21 lr: 0.000000 loss: 0.1975 (0.2208) loss_classifier: 0.0320 (0.0410) loss_box_reg: 0.0571 (0.0666) loss_objectness: 0.0084 (0.0162) loss_rpn_box_reg: 0.0880 (0.0970) time: 0.3999 data: 0.0181 max mem: 3653 Epoch: [15] [130/172] eta: 0:00:17 lr: 0.000000 loss: 0.2088 (0.2207) loss_classifier: 0.0342 (0.0410) loss_box_reg: 0.0624 (0.0669) loss_objectness: 0.0091 (0.0161) loss_rpn_box_reg: 0.1021 (0.0967) time: 0.3942 data: 0.0174 max mem: 3653 Epoch: [15] [140/172] eta: 0:00:13 lr: 0.000000 loss: 0.1767 (0.2203) loss_classifier: 0.0285 (0.0408) loss_box_reg: 0.0532 (0.0669) loss_objectness: 0.0129 (0.0161) loss_rpn_box_reg: 0.0861 (0.0965) time: 0.3919 data: 0.0168 max mem: 3653 Epoch: [15] [150/172] eta: 0:00:08 lr: 0.000000 loss: 0.2358 (0.2227) loss_classifier: 0.0415 (0.0412) loss_box_reg: 0.0704 (0.0683) loss_objectness: 0.0136 (0.0160) loss_rpn_box_reg: 0.0946 (0.0972) time: 0.3969 data: 0.0187 max mem: 3653 Epoch: [15] [160/172] eta: 0:00:04 lr: 0.000000 loss: 0.2071 (0.2202) loss_classifier: 0.0397 (0.0406) loss_box_reg: 0.0623 (0.0671) loss_objectness: 0.0133 (0.0159) loss_rpn_box_reg: 0.0872 (0.0967) time: 0.3974 data: 0.0188 max mem: 3653 Epoch: [15] [170/172] eta: 0:00:00 lr: 0.000000 loss: 0.1643 (0.2188) loss_classifier: 0.0242 (0.0402) loss_box_reg: 0.0466 (0.0667) loss_objectness: 0.0113 (0.0157) loss_rpn_box_reg: 0.0773 (0.0963) time: 0.4013 data: 0.0182 max mem: 3653 Epoch: [15] [171/172] eta: 0:00:00 lr: 0.000000 loss: 0.1798 (0.2197) loss_classifier: 0.0278 (0.0402) loss_box_reg: 0.0554 (0.0670) loss_objectness: 0.0097 (0.0156) loss_rpn_box_reg: 0.0823 (0.0969) time: 0.3880 data: 0.0181 max mem: 3653 Epoch: [15] Total time: 0:01:09 (0.4057 s / it) creating index... index created! Test: [ 0/38] eta: 0:00:16 model_time: 0.0955 (0.0955) evaluator_time: 0.0065 (0.0065) time: 0.4261 data: 0.3051 max mem: 3653 Test: [37/38] eta: 0:00:00 model_time: 0.0754 (0.0767) evaluator_time: 0.0018 (0.0027) time: 0.0975 data: 0.0088 max mem: 3653 Test: Total time: 0:00:04 (0.1132 s / it) Averaged stats: model_time: 0.0754 (0.0767) evaluator_time: 0.0018 (0.0027) Accumulating evaluation results... DONE (t=0.01s). IoU metric: bbox Average Precision (AP) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.647 Average Precision (AP) @[ IoU=0.50 | area= all | maxDets=100 ] = 0.983 Average Precision (AP) @[ IoU=0.75 | area= all | maxDets=100 ] = 0.779 Average Precision (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.647 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 1 ] = 0.262 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 10 ] = 0.733 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.733 Average Recall (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.733 Epoch: [16] [ 0/172] eta: 0:02:48 lr: 0.000000 loss: 0.2877 (0.2877) loss_classifier: 0.0399 (0.0399) loss_box_reg: 0.0700 (0.0700) loss_objectness: 0.0231 (0.0231) loss_rpn_box_reg: 0.1547 (0.1547) time: 0.9781 data: 0.6071 max mem: 3653 Epoch: [16] [ 10/172] eta: 0:01:15 lr: 0.000000 loss: 0.2341 (0.2113) loss_classifier: 0.0339 (0.0359) loss_box_reg: 0.0675 (0.0606) loss_objectness: 0.0114 (0.0115) loss_rpn_box_reg: 0.0971 (0.1034) time: 0.4657 data: 0.0751 max mem: 3653 Epoch: [16] [ 20/172] eta: 0:01:05 lr: 0.000000 loss: 0.1978 (0.2012) loss_classifier: 0.0310 (0.0345) loss_box_reg: 0.0556 (0.0594) loss_objectness: 0.0116 (0.0145) loss_rpn_box_reg: 0.0872 (0.0928) time: 0.4039 data: 0.0207 max mem: 3653 Epoch: [16] [ 30/172] eta: 0:00:59 lr: 0.000000 loss: 0.1828 (0.2111) loss_classifier: 0.0310 (0.0374) loss_box_reg: 0.0431 (0.0640) loss_objectness: 0.0103 (0.0132) loss_rpn_box_reg: 0.0901 (0.0966) time: 0.3890 data: 0.0180 max mem: 3653 Epoch: [16] [ 40/172] eta: 0:00:54 lr: 0.000000 loss: 0.2136 (0.2126) loss_classifier: 0.0362 (0.0371) loss_box_reg: 0.0585 (0.0653) loss_objectness: 0.0082 (0.0138) loss_rpn_box_reg: 0.0892 (0.0964) time: 0.3923 data: 0.0173 max mem: 3653 Epoch: [16] [ 50/172] eta: 0:00:49 lr: 0.000000 loss: 0.2214 (0.2140) loss_classifier: 0.0378 (0.0382) loss_box_reg: 0.0637 (0.0661) loss_objectness: 0.0115 (0.0135) loss_rpn_box_reg: 0.0783 (0.0961) time: 0.3890 data: 0.0169 max mem: 3653 Epoch: [16] [ 60/172] eta: 0:00:45 lr: 0.000000 loss: 0.2131 (0.2136) loss_classifier: 0.0378 (0.0381) loss_box_reg: 0.0554 (0.0641) loss_objectness: 0.0156 (0.0141) loss_rpn_box_reg: 0.0809 (0.0973) time: 0.3971 data: 0.0170 max mem: 3653 Epoch: [16] [ 70/172] eta: 0:00:41 lr: 0.000000 loss: 0.1777 (0.2086) loss_classifier: 0.0314 (0.0375) loss_box_reg: 0.0512 (0.0626) loss_objectness: 0.0112 (0.0134) loss_rpn_box_reg: 0.0809 (0.0951) time: 0.4065 data: 0.0179 max mem: 3653 Epoch: [16] [ 80/172] eta: 0:00:37 lr: 0.000000 loss: 0.2100 (0.2083) loss_classifier: 0.0341 (0.0375) loss_box_reg: 0.0609 (0.0626) loss_objectness: 0.0090 (0.0132) loss_rpn_box_reg: 0.0865 (0.0950) time: 0.3982 data: 0.0167 max mem: 3653 Epoch: [16] [ 90/172] eta: 0:00:33 lr: 0.000000 loss: 0.2161 (0.2114) loss_classifier: 0.0409 (0.0382) loss_box_reg: 0.0613 (0.0639) loss_objectness: 0.0150 (0.0135) loss_rpn_box_reg: 0.1047 (0.0958) time: 0.3965 data: 0.0175 max mem: 3653 Epoch: [16] [100/172] eta: 0:00:28 lr: 0.000000 loss: 0.1913 (0.2094) loss_classifier: 0.0374 (0.0381) loss_box_reg: 0.0634 (0.0639) loss_objectness: 0.0171 (0.0138) loss_rpn_box_reg: 0.0828 (0.0936) time: 0.3925 data: 0.0191 max mem: 3653 Epoch: [16] [110/172] eta: 0:00:24 lr: 0.000000 loss: 0.1999 (0.2098) loss_classifier: 0.0351 (0.0384) loss_box_reg: 0.0582 (0.0633) loss_objectness: 0.0126 (0.0136) loss_rpn_box_reg: 0.0924 (0.0945) time: 0.3859 data: 0.0178 max mem: 3653 Epoch: [16] [120/172] eta: 0:00:20 lr: 0.000000 loss: 0.2128 (0.2128) loss_classifier: 0.0410 (0.0390) loss_box_reg: 0.0563 (0.0647) loss_objectness: 0.0113 (0.0136) loss_rpn_box_reg: 0.1035 (0.0956) time: 0.3770 data: 0.0157 max mem: 3653 Epoch: [16] [130/172] eta: 0:00:16 lr: 0.000000 loss: 0.2004 (0.2128) loss_classifier: 0.0421 (0.0395) loss_box_reg: 0.0568 (0.0653) loss_objectness: 0.0111 (0.0134) loss_rpn_box_reg: 0.0813 (0.0946) time: 0.3908 data: 0.0179 max mem: 3653 Epoch: [16] [140/172] eta: 0:00:12 lr: 0.000000 loss: 0.1879 (0.2115) loss_classifier: 0.0421 (0.0390) loss_box_reg: 0.0568 (0.0646) loss_objectness: 0.0111 (0.0135) loss_rpn_box_reg: 0.0788 (0.0943) time: 0.3890 data: 0.0189 max mem: 3653 Epoch: [16] [150/172] eta: 0:00:08 lr: 0.000000 loss: 0.1864 (0.2120) loss_classifier: 0.0296 (0.0389) loss_box_reg: 0.0543 (0.0647) loss_objectness: 0.0158 (0.0140) loss_rpn_box_reg: 0.0888 (0.0944) time: 0.3748 data: 0.0171 max mem: 3653 Epoch: [16] [160/172] eta: 0:00:04 lr: 0.000000 loss: 0.2283 (0.2150) loss_classifier: 0.0385 (0.0395) loss_box_reg: 0.0602 (0.0658) loss_objectness: 0.0158 (0.0141) loss_rpn_box_reg: 0.1025 (0.0957) time: 0.4005 data: 0.0185 max mem: 3653 Epoch: [16] [170/172] eta: 0:00:00 lr: 0.000000 loss: 0.2567 (0.2169) loss_classifier: 0.0419 (0.0395) loss_box_reg: 0.0672 (0.0664) loss_objectness: 0.0138 (0.0147) loss_rpn_box_reg: 0.1113 (0.0962) time: 0.4210 data: 0.0198 max mem: 3653 Epoch: [16] [171/172] eta: 0:00:00 lr: 0.000000 loss: 0.2567 (0.2186) loss_classifier: 0.0419 (0.0398) loss_box_reg: 0.0672 (0.0673) loss_objectness: 0.0145 (0.0148) loss_rpn_box_reg: 0.1128 (0.0966) time: 0.4083 data: 0.0200 max mem: 3653 Epoch: [16] Total time: 0:01:08 (0.3982 s / it) creating index... index created! Test: [ 0/38] eta: 0:00:17 model_time: 0.1193 (0.1193) evaluator_time: 0.0052 (0.0052) time: 0.4477 data: 0.3148 max mem: 3653 Test: [37/38] eta: 0:00:00 model_time: 0.0756 (0.0771) evaluator_time: 0.0019 (0.0025) time: 0.0980 data: 0.0088 max mem: 3653 Test: Total time: 0:00:04 (0.1126 s / it) Averaged stats: model_time: 0.0756 (0.0771) evaluator_time: 0.0019 (0.0025) Accumulating evaluation results... DONE (t=0.01s). IoU metric: bbox Average Precision (AP) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.647 Average Precision (AP) @[ IoU=0.50 | area= all | maxDets=100 ] = 0.983 Average Precision (AP) @[ IoU=0.75 | area= all | maxDets=100 ] = 0.779 Average Precision (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.647 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 1 ] = 0.262 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 10 ] = 0.733 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.733 Average Recall (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.733 Epoch: [17] [ 0/172] eta: 0:02:33 lr: 0.000000 loss: 0.2413 (0.2413) loss_classifier: 0.0419 (0.0419) loss_box_reg: 0.1009 (0.1009) loss_objectness: 0.0211 (0.0211) loss_rpn_box_reg: 0.0774 (0.0774) time: 0.8910 data: 0.4862 max mem: 3653 Epoch: [17] [ 10/172] eta: 0:01:13 lr: 0.000000 loss: 0.2413 (0.2323) loss_classifier: 0.0323 (0.0368) loss_box_reg: 0.0616 (0.0719) loss_objectness: 0.0180 (0.0168) loss_rpn_box_reg: 0.1069 (0.1068) time: 0.4549 data: 0.0620 max mem: 3653 Epoch: [17] [ 20/172] eta: 0:01:04 lr: 0.000000 loss: 0.2145 (0.2223) loss_classifier: 0.0325 (0.0382) loss_box_reg: 0.0616 (0.0689) loss_objectness: 0.0127 (0.0145) loss_rpn_box_reg: 0.1029 (0.1006) time: 0.3982 data: 0.0184 max mem: 3653 Epoch: [17] [ 30/172] eta: 0:00:58 lr: 0.000000 loss: 0.2145 (0.2265) loss_classifier: 0.0418 (0.0415) loss_box_reg: 0.0719 (0.0729) loss_objectness: 0.0122 (0.0144) loss_rpn_box_reg: 0.0896 (0.0977) time: 0.3898 data: 0.0167 max mem: 3653 Epoch: [17] [ 40/172] eta: 0:00:53 lr: 0.000000 loss: 0.2106 (0.2198) loss_classifier: 0.0380 (0.0392) loss_box_reg: 0.0679 (0.0697) loss_objectness: 0.0122 (0.0142) loss_rpn_box_reg: 0.0839 (0.0967) time: 0.3937 data: 0.0168 max mem: 3653 Epoch: [17] [ 50/172] eta: 0:00:49 lr: 0.000000 loss: 0.1934 (0.2145) loss_classifier: 0.0322 (0.0393) loss_box_reg: 0.0516 (0.0671) loss_objectness: 0.0130 (0.0138) loss_rpn_box_reg: 0.0839 (0.0944) time: 0.3884 data: 0.0190 max mem: 3653 Epoch: [17] [ 60/172] eta: 0:00:45 lr: 0.000000 loss: 0.2117 (0.2211) loss_classifier: 0.0410 (0.0410) loss_box_reg: 0.0619 (0.0701) loss_objectness: 0.0114 (0.0135) loss_rpn_box_reg: 0.0956 (0.0965) time: 0.4027 data: 0.0212 max mem: 3653 Epoch: [17] [ 70/172] eta: 0:00:41 lr: 0.000000 loss: 0.2188 (0.2181) loss_classifier: 0.0422 (0.0411) loss_box_reg: 0.0664 (0.0676) loss_objectness: 0.0114 (0.0141) loss_rpn_box_reg: 0.0958 (0.0952) time: 0.4177 data: 0.0203 max mem: 3653 Epoch: [17] [ 80/172] eta: 0:00:37 lr: 0.000000 loss: 0.1829 (0.2170) loss_classifier: 0.0351 (0.0401) loss_box_reg: 0.0604 (0.0667) loss_objectness: 0.0156 (0.0145) loss_rpn_box_reg: 0.0908 (0.0957) time: 0.3939 data: 0.0180 max mem: 3653 Epoch: [17] [ 90/172] eta: 0:00:33 lr: 0.000000 loss: 0.1784 (0.2119) loss_classifier: 0.0348 (0.0396) loss_box_reg: 0.0487 (0.0647) loss_objectness: 0.0134 (0.0138) loss_rpn_box_reg: 0.0852 (0.0937) time: 0.3958 data: 0.0183 max mem: 3653 Epoch: [17] [100/172] eta: 0:00:28 lr: 0.000000 loss: 0.2128 (0.2160) loss_classifier: 0.0411 (0.0403) loss_box_reg: 0.0584 (0.0658) loss_objectness: 0.0147 (0.0146) loss_rpn_box_reg: 0.0931 (0.0952) time: 0.3960 data: 0.0171 max mem: 3653 Epoch: [17] [110/172] eta: 0:00:24 lr: 0.000000 loss: 0.2193 (0.2148) loss_classifier: 0.0411 (0.0400) loss_box_reg: 0.0616 (0.0655) loss_objectness: 0.0157 (0.0144) loss_rpn_box_reg: 0.1013 (0.0949) time: 0.3917 data: 0.0175 max mem: 3653 Epoch: [17] [120/172] eta: 0:00:20 lr: 0.000000 loss: 0.2159 (0.2162) loss_classifier: 0.0436 (0.0404) loss_box_reg: 0.0646 (0.0667) loss_objectness: 0.0109 (0.0149) loss_rpn_box_reg: 0.0922 (0.0943) time: 0.3947 data: 0.0182 max mem: 3653 Epoch: [17] [130/172] eta: 0:00:16 lr: 0.000000 loss: 0.2106 (0.2159) loss_classifier: 0.0389 (0.0404) loss_box_reg: 0.0603 (0.0663) loss_objectness: 0.0141 (0.0149) loss_rpn_box_reg: 0.0759 (0.0942) time: 0.3854 data: 0.0169 max mem: 3653 Epoch: [17] [140/172] eta: 0:00:12 lr: 0.000000 loss: 0.1960 (0.2179) loss_classifier: 0.0342 (0.0400) loss_box_reg: 0.0546 (0.0663) loss_objectness: 0.0154 (0.0159) loss_rpn_box_reg: 0.0883 (0.0956) time: 0.3857 data: 0.0167 max mem: 3653 Epoch: [17] [150/172] eta: 0:00:08 lr: 0.000000 loss: 0.1840 (0.2165) loss_classifier: 0.0289 (0.0394) loss_box_reg: 0.0546 (0.0654) loss_objectness: 0.0156 (0.0158) loss_rpn_box_reg: 0.0978 (0.0959) time: 0.3767 data: 0.0159 max mem: 3653 Epoch: [17] [160/172] eta: 0:00:04 lr: 0.000000 loss: 0.2450 (0.2190) loss_classifier: 0.0372 (0.0397) loss_box_reg: 0.0589 (0.0663) loss_objectness: 0.0132 (0.0157) loss_rpn_box_reg: 0.0998 (0.0973) time: 0.3993 data: 0.0178 max mem: 3653 Epoch: [17] [170/172] eta: 0:00:00 lr: 0.000000 loss: 0.2450 (0.2187) loss_classifier: 0.0415 (0.0399) loss_box_reg: 0.0723 (0.0667) loss_objectness: 0.0122 (0.0157) loss_rpn_box_reg: 0.0954 (0.0964) time: 0.4263 data: 0.0192 max mem: 3653 Epoch: [17] [171/172] eta: 0:00:00 lr: 0.000000 loss: 0.2450 (0.2196) loss_classifier: 0.0415 (0.0401) loss_box_reg: 0.0723 (0.0669) loss_objectness: 0.0132 (0.0159) loss_rpn_box_reg: 0.0954 (0.0968) time: 0.4141 data: 0.0191 max mem: 3653 Epoch: [17] Total time: 0:01:08 (0.3996 s / it) creating index... index created! Test: [ 0/38] eta: 0:00:16 model_time: 0.0931 (0.0931) evaluator_time: 0.0056 (0.0056) time: 0.4221 data: 0.3099 max mem: 3653 Test: [37/38] eta: 0:00:00 model_time: 0.0756 (0.0774) evaluator_time: 0.0019 (0.0029) time: 0.0973 data: 0.0088 max mem: 3653 Test: Total time: 0:00:04 (0.1131 s / it) Averaged stats: model_time: 0.0756 (0.0774) evaluator_time: 0.0019 (0.0029) Accumulating evaluation results... DONE (t=0.01s). IoU metric: bbox Average Precision (AP) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.647 Average Precision (AP) @[ IoU=0.50 | area= all | maxDets=100 ] = 0.983 Average Precision (AP) @[ IoU=0.75 | area= all | maxDets=100 ] = 0.779 Average Precision (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.647 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 1 ] = 0.262 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 10 ] = 0.733 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.733 Average Recall (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.733 Epoch: [18] [ 0/172] eta: 0:02:35 lr: 0.000000 loss: 0.3293 (0.3293) loss_classifier: 0.0839 (0.0839) loss_box_reg: 0.1258 (0.1258) loss_objectness: 0.0164 (0.0164) loss_rpn_box_reg: 0.1032 (0.1032) time: 0.9061 data: 0.5189 max mem: 3653 Epoch: [18] [ 10/172] eta: 0:01:13 lr: 0.000000 loss: 0.2334 (0.2351) loss_classifier: 0.0426 (0.0467) loss_box_reg: 0.0696 (0.0734) loss_objectness: 0.0153 (0.0163) loss_rpn_box_reg: 0.1037 (0.0987) time: 0.4517 data: 0.0649 max mem: 3653 Epoch: [18] [ 20/172] eta: 0:01:03 lr: 0.000000 loss: 0.2141 (0.2246) loss_classifier: 0.0390 (0.0407) loss_box_reg: 0.0557 (0.0704) loss_objectness: 0.0140 (0.0160) loss_rpn_box_reg: 0.0957 (0.0975) time: 0.3930 data: 0.0185 max mem: 3653 Epoch: [18] [ 30/172] eta: 0:00:59 lr: 0.000000 loss: 0.1907 (0.2249) loss_classifier: 0.0370 (0.0407) loss_box_reg: 0.0604 (0.0713) loss_objectness: 0.0141 (0.0162) loss_rpn_box_reg: 0.0874 (0.0967) time: 0.4032 data: 0.0193 max mem: 3653 Epoch: [18] [ 40/172] eta: 0:00:54 lr: 0.000000 loss: 0.1897 (0.2158) loss_classifier: 0.0297 (0.0389) loss_box_reg: 0.0554 (0.0667) loss_objectness: 0.0168 (0.0182) loss_rpn_box_reg: 0.0811 (0.0920) time: 0.4124 data: 0.0190 max mem: 3653 Epoch: [18] [ 50/172] eta: 0:00:51 lr: 0.000000 loss: 0.1618 (0.2047) loss_classifier: 0.0246 (0.0365) loss_box_reg: 0.0404 (0.0614) loss_objectness: 0.0132 (0.0171) loss_rpn_box_reg: 0.0673 (0.0897) time: 0.4155 data: 0.0192 max mem: 3653 Epoch: [18] [ 60/172] eta: 0:00:46 lr: 0.000000 loss: 0.1552 (0.1975) loss_classifier: 0.0300 (0.0360) loss_box_reg: 0.0422 (0.0593) loss_objectness: 0.0112 (0.0160) loss_rpn_box_reg: 0.0712 (0.0862) time: 0.4163 data: 0.0210 max mem: 3653 Epoch: [18] [ 70/172] eta: 0:00:42 lr: 0.000000 loss: 0.1716 (0.2008) loss_classifier: 0.0314 (0.0358) loss_box_reg: 0.0523 (0.0595) loss_objectness: 0.0085 (0.0151) loss_rpn_box_reg: 0.0865 (0.0905) time: 0.3978 data: 0.0185 max mem: 3653 Epoch: [18] [ 80/172] eta: 0:00:37 lr: 0.000000 loss: 0.2481 (0.2069) loss_classifier: 0.0391 (0.0373) loss_box_reg: 0.0595 (0.0612) loss_objectness: 0.0085 (0.0149) loss_rpn_box_reg: 0.1155 (0.0935) time: 0.3975 data: 0.0187 max mem: 3653 Epoch: [18] [ 90/172] eta: 0:00:33 lr: 0.000000 loss: 0.2481 (0.2122) loss_classifier: 0.0426 (0.0382) loss_box_reg: 0.0751 (0.0636) loss_objectness: 0.0124 (0.0148) loss_rpn_box_reg: 0.1155 (0.0957) time: 0.3908 data: 0.0179 max mem: 3653 Epoch: [18] [100/172] eta: 0:00:29 lr: 0.000000 loss: 0.2281 (0.2126) loss_classifier: 0.0336 (0.0381) loss_box_reg: 0.0762 (0.0645) loss_objectness: 0.0149 (0.0151) loss_rpn_box_reg: 0.0906 (0.0949) time: 0.3819 data: 0.0144 max mem: 3653 Epoch: [18] [110/172] eta: 0:00:25 lr: 0.000000 loss: 0.1974 (0.2126) loss_classifier: 0.0324 (0.0379) loss_box_reg: 0.0708 (0.0645) loss_objectness: 0.0154 (0.0150) loss_rpn_box_reg: 0.0847 (0.0952) time: 0.3861 data: 0.0151 max mem: 3653 Epoch: [18] [120/172] eta: 0:00:20 lr: 0.000000 loss: 0.2140 (0.2157) loss_classifier: 0.0352 (0.0391) loss_box_reg: 0.0708 (0.0658) loss_objectness: 0.0100 (0.0148) loss_rpn_box_reg: 0.0946 (0.0960) time: 0.3939 data: 0.0185 max mem: 3653 Epoch: [18] [130/172] eta: 0:00:17 lr: 0.000000 loss: 0.1989 (0.2144) loss_classifier: 0.0415 (0.0391) loss_box_reg: 0.0664 (0.0662) loss_objectness: 0.0074 (0.0143) loss_rpn_box_reg: 0.0925 (0.0948) time: 0.4097 data: 0.0200 max mem: 3653 Epoch: [18] [140/172] eta: 0:00:12 lr: 0.000000 loss: 0.2157 (0.2158) loss_classifier: 0.0406 (0.0393) loss_box_reg: 0.0654 (0.0665) loss_objectness: 0.0111 (0.0144) loss_rpn_box_reg: 0.0846 (0.0956) time: 0.3958 data: 0.0170 max mem: 3653 Epoch: [18] [150/172] eta: 0:00:08 lr: 0.000000 loss: 0.2007 (0.2162) loss_classifier: 0.0361 (0.0392) loss_box_reg: 0.0607 (0.0661) loss_objectness: 0.0125 (0.0152) loss_rpn_box_reg: 0.0910 (0.0957) time: 0.3885 data: 0.0163 max mem: 3653 Epoch: [18] [160/172] eta: 0:00:04 lr: 0.000000 loss: 0.1958 (0.2167) loss_classifier: 0.0337 (0.0394) loss_box_reg: 0.0571 (0.0664) loss_objectness: 0.0130 (0.0151) loss_rpn_box_reg: 0.0808 (0.0958) time: 0.3948 data: 0.0186 max mem: 3653 Epoch: [18] [170/172] eta: 0:00:00 lr: 0.000000 loss: 0.1985 (0.2180) loss_classifier: 0.0434 (0.0398) loss_box_reg: 0.0530 (0.0667) loss_objectness: 0.0130 (0.0151) loss_rpn_box_reg: 0.0808 (0.0965) time: 0.3867 data: 0.0191 max mem: 3653 Epoch: [18] [171/172] eta: 0:00:00 lr: 0.000000 loss: 0.1985 (0.2180) loss_classifier: 0.0440 (0.0398) loss_box_reg: 0.0589 (0.0668) loss_objectness: 0.0130 (0.0151) loss_rpn_box_reg: 0.0806 (0.0963) time: 0.3763 data: 0.0186 max mem: 3653 Epoch: [18] Total time: 0:01:08 (0.4001 s / it) creating index... index created! Test: [ 0/38] eta: 0:00:15 model_time: 0.1114 (0.1114) evaluator_time: 0.0123 (0.0123) time: 0.4195 data: 0.2872 max mem: 3653 Test: [37/38] eta: 0:00:00 model_time: 0.0756 (0.0771) evaluator_time: 0.0019 (0.0028) time: 0.0976 data: 0.0087 max mem: 3653 Test: Total time: 0:00:04 (0.1117 s / it) Averaged stats: model_time: 0.0756 (0.0771) evaluator_time: 0.0019 (0.0028) Accumulating evaluation results... DONE (t=0.01s). IoU metric: bbox Average Precision (AP) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.647 Average Precision (AP) @[ IoU=0.50 | area= all | maxDets=100 ] = 0.983 Average Precision (AP) @[ IoU=0.75 | area= all | maxDets=100 ] = 0.779 Average Precision (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.647 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 1 ] = 0.262 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 10 ] = 0.733 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.733 Average Recall (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.733 Epoch: [19] [ 0/172] eta: 0:04:20 lr: 0.000000 loss: 0.2436 (0.2436) loss_classifier: 0.0539 (0.0539) loss_box_reg: 0.1006 (0.1006) loss_objectness: 0.0054 (0.0054) loss_rpn_box_reg: 0.0837 (0.0837) time: 1.5169 data: 1.0562 max mem: 3653 Epoch: [19] [ 10/172] eta: 0:01:22 lr: 0.000000 loss: 0.2436 (0.2453) loss_classifier: 0.0475 (0.0471) loss_box_reg: 0.0930 (0.0888) loss_objectness: 0.0116 (0.0123) loss_rpn_box_reg: 0.0911 (0.0971) time: 0.5070 data: 0.1109 max mem: 3653 Epoch: [19] [ 20/172] eta: 0:01:10 lr: 0.000000 loss: 0.2047 (0.2161) loss_classifier: 0.0360 (0.0412) loss_box_reg: 0.0623 (0.0713) loss_objectness: 0.0116 (0.0142) loss_rpn_box_reg: 0.0868 (0.0893) time: 0.4090 data: 0.0183 max mem: 3653 Epoch: [19] [ 30/172] eta: 0:01:01 lr: 0.000000 loss: 0.1745 (0.2211) loss_classifier: 0.0349 (0.0417) loss_box_reg: 0.0499 (0.0690) loss_objectness: 0.0100 (0.0151) loss_rpn_box_reg: 0.0868 (0.0952) time: 0.3931 data: 0.0178 max mem: 3653 Epoch: [19] [ 40/172] eta: 0:00:56 lr: 0.000000 loss: 0.1989 (0.2207) loss_classifier: 0.0373 (0.0421) loss_box_reg: 0.0582 (0.0696) loss_objectness: 0.0129 (0.0158) loss_rpn_box_reg: 0.0818 (0.0932) time: 0.3874 data: 0.0172 max mem: 3653 Epoch: [19] [ 50/172] eta: 0:00:51 lr: 0.000000 loss: 0.1989 (0.2212) loss_classifier: 0.0405 (0.0419) loss_box_reg: 0.0655 (0.0707) loss_objectness: 0.0136 (0.0158) loss_rpn_box_reg: 0.0815 (0.0929) time: 0.4050 data: 0.0201 max mem: 3653 Epoch: [19] [ 60/172] eta: 0:00:46 lr: 0.000000 loss: 0.1938 (0.2191) loss_classifier: 0.0350 (0.0404) loss_box_reg: 0.0587 (0.0696) loss_objectness: 0.0094 (0.0152) loss_rpn_box_reg: 0.0824 (0.0938) time: 0.3920 data: 0.0186 max mem: 3653 Epoch: [19] [ 70/172] eta: 0:00:41 lr: 0.000000 loss: 0.1756 (0.2156) loss_classifier: 0.0325 (0.0395) loss_box_reg: 0.0587 (0.0680) loss_objectness: 0.0125 (0.0151) loss_rpn_box_reg: 0.0895 (0.0930) time: 0.3735 data: 0.0175 max mem: 3653 Epoch: [19] [ 80/172] eta: 0:00:37 lr: 0.000000 loss: 0.2038 (0.2169) loss_classifier: 0.0369 (0.0414) loss_box_reg: 0.0703 (0.0694) loss_objectness: 0.0107 (0.0146) loss_rpn_box_reg: 0.0800 (0.0915) time: 0.3846 data: 0.0194 max mem: 3653 Epoch: [19] [ 90/172] eta: 0:00:33 lr: 0.000000 loss: 0.2276 (0.2165) loss_classifier: 0.0381 (0.0407) loss_box_reg: 0.0700 (0.0691) loss_objectness: 0.0107 (0.0146) loss_rpn_box_reg: 0.0776 (0.0921) time: 0.4134 data: 0.0211 max mem: 3653 Epoch: [19] [100/172] eta: 0:00:29 lr: 0.000000 loss: 0.2276 (0.2154) loss_classifier: 0.0312 (0.0403) loss_box_reg: 0.0465 (0.0681) loss_objectness: 0.0095 (0.0143) loss_rpn_box_reg: 0.0996 (0.0927) time: 0.4203 data: 0.0215 max mem: 3653 Epoch: [19] [110/172] eta: 0:00:25 lr: 0.000000 loss: 0.1847 (0.2149) loss_classifier: 0.0389 (0.0408) loss_box_reg: 0.0465 (0.0675) loss_objectness: 0.0121 (0.0145) loss_rpn_box_reg: 0.0920 (0.0921) time: 0.4065 data: 0.0187 max mem: 3653 Epoch: [19] [120/172] eta: 0:00:21 lr: 0.000000 loss: 0.1847 (0.2134) loss_classifier: 0.0389 (0.0404) loss_box_reg: 0.0487 (0.0672) loss_objectness: 0.0121 (0.0143) loss_rpn_box_reg: 0.0787 (0.0915) time: 0.4069 data: 0.0184 max mem: 3653 Epoch: [19] [130/172] eta: 0:00:17 lr: 0.000000 loss: 0.1955 (0.2189) loss_classifier: 0.0370 (0.0407) loss_box_reg: 0.0647 (0.0683) loss_objectness: 0.0116 (0.0156) loss_rpn_box_reg: 0.0902 (0.0942) time: 0.4005 data: 0.0188 max mem: 3653 Epoch: [19] [140/172] eta: 0:00:12 lr: 0.000000 loss: 0.2235 (0.2193) loss_classifier: 0.0417 (0.0407) loss_box_reg: 0.0729 (0.0682) loss_objectness: 0.0160 (0.0157) loss_rpn_box_reg: 0.1029 (0.0947) time: 0.3844 data: 0.0168 max mem: 3653 Epoch: [19] [150/172] eta: 0:00:08 lr: 0.000000 loss: 0.1912 (0.2171) loss_classifier: 0.0348 (0.0400) loss_box_reg: 0.0610 (0.0676) loss_objectness: 0.0158 (0.0157) loss_rpn_box_reg: 0.0987 (0.0940) time: 0.3813 data: 0.0168 max mem: 3653 Epoch: [19] [160/172] eta: 0:00:04 lr: 0.000000 loss: 0.1912 (0.2186) loss_classifier: 0.0337 (0.0400) loss_box_reg: 0.0443 (0.0670) loss_objectness: 0.0164 (0.0159) loss_rpn_box_reg: 0.0993 (0.0957) time: 0.3908 data: 0.0176 max mem: 3653 Epoch: [19] [170/172] eta: 0:00:00 lr: 0.000000 loss: 0.2071 (0.2182) loss_classifier: 0.0326 (0.0398) loss_box_reg: 0.0520 (0.0669) loss_objectness: 0.0188 (0.0159) loss_rpn_box_reg: 0.0948 (0.0958) time: 0.4084 data: 0.0188 max mem: 3653 Epoch: [19] [171/172] eta: 0:00:00 lr: 0.000000 loss: 0.2119 (0.2185) loss_classifier: 0.0326 (0.0398) loss_box_reg: 0.0520 (0.0667) loss_objectness: 0.0188 (0.0158) loss_rpn_box_reg: 0.0993 (0.0961) time: 0.4005 data: 0.0186 max mem: 3653 Epoch: [19] Total time: 0:01:09 (0.4041 s / it) creating index... index created! Test: [ 0/38] eta: 0:00:16 model_time: 0.1035 (0.1035) evaluator_time: 0.0055 (0.0055) time: 0.4264 data: 0.3092 max mem: 3653 Test: [37/38] eta: 0:00:00 model_time: 0.0754 (0.0766) evaluator_time: 0.0018 (0.0027) time: 0.0971 data: 0.0087 max mem: 3653 Test: Total time: 0:00:04 (0.1132 s / it) Averaged stats: model_time: 0.0754 (0.0766) evaluator_time: 0.0018 (0.0027) Accumulating evaluation results... DONE (t=0.01s). IoU metric: bbox Average Precision (AP) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.647 Average Precision (AP) @[ IoU=0.50 | area= all | maxDets=100 ] = 0.983 Average Precision (AP) @[ IoU=0.75 | area= all | maxDets=100 ] = 0.779 Average Precision (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.647 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 1 ] = 0.262 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 10 ] = 0.733 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.733 Average Recall (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.733 Epoch: [20] [ 0/172] eta: 0:04:12 lr: 0.000000 loss: 0.3613 (0.3613) loss_classifier: 0.0588 (0.0588) loss_box_reg: 0.1200 (0.1200) loss_objectness: 0.0043 (0.0043) loss_rpn_box_reg: 0.1782 (0.1782) time: 1.4703 data: 1.0203 max mem: 3653 Epoch: [20] [ 10/172] eta: 0:01:21 lr: 0.000000 loss: 0.1808 (0.1996) loss_classifier: 0.0359 (0.0340) loss_box_reg: 0.0468 (0.0531) loss_objectness: 0.0101 (0.0113) loss_rpn_box_reg: 0.0872 (0.1011) time: 0.5053 data: 0.1076 max mem: 3653 Epoch: [20] [ 20/172] eta: 0:01:09 lr: 0.000000 loss: 0.1880 (0.2215) loss_classifier: 0.0359 (0.0368) loss_box_reg: 0.0468 (0.0623) loss_objectness: 0.0132 (0.0157) loss_rpn_box_reg: 0.1000 (0.1067) time: 0.4034 data: 0.0179 max mem: 3653 Epoch: [20] [ 30/172] eta: 0:01:02 lr: 0.000000 loss: 0.2173 (0.2179) loss_classifier: 0.0380 (0.0397) loss_box_reg: 0.0651 (0.0636) loss_objectness: 0.0167 (0.0159) loss_rpn_box_reg: 0.0853 (0.0986) time: 0.4035 data: 0.0196 max mem: 3653 Epoch: [20] [ 40/172] eta: 0:00:56 lr: 0.000000 loss: 0.1948 (0.2113) loss_classifier: 0.0352 (0.0381) loss_box_reg: 0.0543 (0.0629) loss_objectness: 0.0092 (0.0150) loss_rpn_box_reg: 0.0826 (0.0953) time: 0.3998 data: 0.0195 max mem: 3653 Epoch: [20] [ 50/172] eta: 0:00:51 lr: 0.000000 loss: 0.2007 (0.2195) loss_classifier: 0.0384 (0.0408) loss_box_reg: 0.0595 (0.0665) loss_objectness: 0.0130 (0.0153) loss_rpn_box_reg: 0.0886 (0.0969) time: 0.3932 data: 0.0184 max mem: 3653 Epoch: [20] [ 60/172] eta: 0:00:46 lr: 0.000000 loss: 0.2394 (0.2244) loss_classifier: 0.0460 (0.0410) loss_box_reg: 0.0666 (0.0686) loss_objectness: 0.0154 (0.0157) loss_rpn_box_reg: 0.1029 (0.0991) time: 0.3914 data: 0.0172 max mem: 3653 Epoch: [20] [ 70/172] eta: 0:00:42 lr: 0.000000 loss: 0.1996 (0.2181) loss_classifier: 0.0358 (0.0398) loss_box_reg: 0.0607 (0.0665) loss_objectness: 0.0148 (0.0150) loss_rpn_box_reg: 0.0994 (0.0968) time: 0.4004 data: 0.0183 max mem: 3653 Epoch: [20] [ 80/172] eta: 0:00:38 lr: 0.000000 loss: 0.1903 (0.2232) loss_classifier: 0.0358 (0.0403) loss_box_reg: 0.0540 (0.0688) loss_objectness: 0.0087 (0.0145) loss_rpn_box_reg: 0.0910 (0.0995) time: 0.4131 data: 0.0193 max mem: 3653 Epoch: [20] [ 90/172] eta: 0:00:34 lr: 0.000000 loss: 0.2458 (0.2262) loss_classifier: 0.0459 (0.0417) loss_box_reg: 0.0668 (0.0700) loss_objectness: 0.0094 (0.0149) loss_rpn_box_reg: 0.1012 (0.0996) time: 0.4171 data: 0.0194 max mem: 3653 Epoch: [20] [100/172] eta: 0:00:29 lr: 0.000000 loss: 0.2206 (0.2249) loss_classifier: 0.0446 (0.0414) loss_box_reg: 0.0609 (0.0696) loss_objectness: 0.0094 (0.0145) loss_rpn_box_reg: 0.0934 (0.0993) time: 0.4063 data: 0.0189 max mem: 3653 Epoch: [20] [110/172] eta: 0:00:25 lr: 0.000000 loss: 0.1852 (0.2222) loss_classifier: 0.0329 (0.0406) loss_box_reg: 0.0538 (0.0684) loss_objectness: 0.0117 (0.0148) loss_rpn_box_reg: 0.0918 (0.0984) time: 0.3798 data: 0.0170 max mem: 3653 Epoch: [20] [120/172] eta: 0:00:21 lr: 0.000000 loss: 0.2011 (0.2226) loss_classifier: 0.0329 (0.0411) loss_box_reg: 0.0605 (0.0692) loss_objectness: 0.0122 (0.0147) loss_rpn_box_reg: 0.0918 (0.0977) time: 0.3848 data: 0.0174 max mem: 3653 Epoch: [20] [130/172] eta: 0:00:17 lr: 0.000000 loss: 0.2312 (0.2230) loss_classifier: 0.0464 (0.0415) loss_box_reg: 0.0765 (0.0691) loss_objectness: 0.0112 (0.0145) loss_rpn_box_reg: 0.0958 (0.0980) time: 0.3964 data: 0.0181 max mem: 3653 Epoch: [20] [140/172] eta: 0:00:13 lr: 0.000000 loss: 0.1781 (0.2209) loss_classifier: 0.0375 (0.0409) loss_box_reg: 0.0427 (0.0677) loss_objectness: 0.0128 (0.0154) loss_rpn_box_reg: 0.0863 (0.0969) time: 0.3920 data: 0.0178 max mem: 3653 Epoch: [20] [150/172] eta: 0:00:08 lr: 0.000000 loss: 0.1480 (0.2211) loss_classifier: 0.0267 (0.0411) loss_box_reg: 0.0484 (0.0684) loss_objectness: 0.0138 (0.0152) loss_rpn_box_reg: 0.0728 (0.0964) time: 0.3994 data: 0.0174 max mem: 3653 Epoch: [20] [160/172] eta: 0:00:04 lr: 0.000000 loss: 0.2239 (0.2214) loss_classifier: 0.0349 (0.0409) loss_box_reg: 0.0670 (0.0679) loss_objectness: 0.0145 (0.0154) loss_rpn_box_reg: 0.0953 (0.0972) time: 0.4031 data: 0.0166 max mem: 3653 Epoch: [20] [170/172] eta: 0:00:00 lr: 0.000000 loss: 0.1974 (0.2191) loss_classifier: 0.0333 (0.0403) loss_box_reg: 0.0527 (0.0670) loss_objectness: 0.0141 (0.0152) loss_rpn_box_reg: 0.0919 (0.0966) time: 0.3995 data: 0.0164 max mem: 3653 Epoch: [20] [171/172] eta: 0:00:00 lr: 0.000000 loss: 0.1974 (0.2183) loss_classifier: 0.0322 (0.0401) loss_box_reg: 0.0527 (0.0667) loss_objectness: 0.0141 (0.0152) loss_rpn_box_reg: 0.0894 (0.0963) time: 0.3866 data: 0.0164 max mem: 3653 Epoch: [20] Total time: 0:01:09 (0.4049 s / it) creating index... index created! Test: [ 0/38] eta: 0:00:18 model_time: 0.1279 (0.1279) evaluator_time: 0.0242 (0.0242) time: 0.4885 data: 0.3271 max mem: 3653 Test: [37/38] eta: 0:00:00 model_time: 0.0752 (0.0771) evaluator_time: 0.0019 (0.0032) time: 0.0979 data: 0.0088 max mem: 3653 Test: Total time: 0:00:04 (0.1136 s / it) Averaged stats: model_time: 0.0752 (0.0771) evaluator_time: 0.0019 (0.0032) Accumulating evaluation results... DONE (t=0.01s). IoU metric: bbox Average Precision (AP) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.647 Average Precision (AP) @[ IoU=0.50 | area= all | maxDets=100 ] = 0.983 Average Precision (AP) @[ IoU=0.75 | area= all | maxDets=100 ] = 0.779 Average Precision (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.647 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 1 ] = 0.262 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 10 ] = 0.733 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.733 Average Recall (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.733 Epoch: [21] [ 0/172] eta: 0:02:47 lr: 0.000000 loss: 0.4824 (0.4824) loss_classifier: 0.0990 (0.0990) loss_box_reg: 0.1707 (0.1707) loss_objectness: 0.0371 (0.0371) loss_rpn_box_reg: 0.1756 (0.1756) time: 0.9744 data: 0.6014 max mem: 3653 Epoch: [21] [ 10/172] eta: 0:01:14 lr: 0.000000 loss: 0.2410 (0.2438) loss_classifier: 0.0435 (0.0469) loss_box_reg: 0.0779 (0.0821) loss_objectness: 0.0113 (0.0167) loss_rpn_box_reg: 0.0799 (0.0981) time: 0.4628 data: 0.0747 max mem: 3653 Epoch: [21] [ 20/172] eta: 0:01:05 lr: 0.000000 loss: 0.2061 (0.2211) loss_classifier: 0.0384 (0.0424) loss_box_reg: 0.0642 (0.0689) loss_objectness: 0.0092 (0.0130) loss_rpn_box_reg: 0.0799 (0.0967) time: 0.4052 data: 0.0202 max mem: 3653 Epoch: [21] [ 30/172] eta: 0:01:00 lr: 0.000000 loss: 0.2038 (0.2142) loss_classifier: 0.0329 (0.0386) loss_box_reg: 0.0536 (0.0652) loss_objectness: 0.0104 (0.0145) loss_rpn_box_reg: 0.0925 (0.0959) time: 0.4007 data: 0.0183 max mem: 3653 Epoch: [21] [ 40/172] eta: 0:00:54 lr: 0.000000 loss: 0.1951 (0.2154) loss_classifier: 0.0330 (0.0389) loss_box_reg: 0.0531 (0.0642) loss_objectness: 0.0152 (0.0154) loss_rpn_box_reg: 0.1027 (0.0968) time: 0.3897 data: 0.0165 max mem: 3653 Epoch: [21] [ 50/172] eta: 0:00:49 lr: 0.000000 loss: 0.2276 (0.2184) loss_classifier: 0.0400 (0.0394) loss_box_reg: 0.0649 (0.0668) loss_objectness: 0.0172 (0.0161) loss_rpn_box_reg: 0.1003 (0.0962) time: 0.3834 data: 0.0159 max mem: 3653 Epoch: [21] [ 60/172] eta: 0:00:45 lr: 0.000000 loss: 0.1924 (0.2120) loss_classifier: 0.0394 (0.0383) loss_box_reg: 0.0598 (0.0650) loss_objectness: 0.0124 (0.0153) loss_rpn_box_reg: 0.0797 (0.0933) time: 0.4018 data: 0.0199 max mem: 3653 Epoch: [21] [ 70/172] eta: 0:00:41 lr: 0.000000 loss: 0.1872 (0.2153) loss_classifier: 0.0363 (0.0391) loss_box_reg: 0.0524 (0.0659) loss_objectness: 0.0112 (0.0154) loss_rpn_box_reg: 0.0881 (0.0949) time: 0.3992 data: 0.0217 max mem: 3653 Epoch: [21] [ 80/172] eta: 0:00:37 lr: 0.000000 loss: 0.2242 (0.2176) loss_classifier: 0.0419 (0.0391) loss_box_reg: 0.0666 (0.0656) loss_objectness: 0.0174 (0.0160) loss_rpn_box_reg: 0.1057 (0.0969) time: 0.3954 data: 0.0206 max mem: 3653 Epoch: [21] [ 90/172] eta: 0:00:33 lr: 0.000000 loss: 0.2227 (0.2171) loss_classifier: 0.0430 (0.0398) loss_box_reg: 0.0651 (0.0653) loss_objectness: 0.0161 (0.0160) loss_rpn_box_reg: 0.0950 (0.0960) time: 0.4045 data: 0.0208 max mem: 3653 Epoch: [21] [100/172] eta: 0:00:29 lr: 0.000000 loss: 0.2056 (0.2155) loss_classifier: 0.0403 (0.0393) loss_box_reg: 0.0525 (0.0649) loss_objectness: 0.0135 (0.0157) loss_rpn_box_reg: 0.0810 (0.0957) time: 0.4031 data: 0.0202 max mem: 3653 Epoch: [21] [110/172] eta: 0:00:25 lr: 0.000000 loss: 0.2229 (0.2182) loss_classifier: 0.0403 (0.0398) loss_box_reg: 0.0571 (0.0657) loss_objectness: 0.0145 (0.0165) loss_rpn_box_reg: 0.0891 (0.0962) time: 0.3974 data: 0.0202 max mem: 3653 Epoch: [21] [120/172] eta: 0:00:20 lr: 0.000000 loss: 0.2378 (0.2194) loss_classifier: 0.0437 (0.0403) loss_box_reg: 0.0750 (0.0665) loss_objectness: 0.0192 (0.0167) loss_rpn_box_reg: 0.0987 (0.0959) time: 0.3855 data: 0.0187 max mem: 3653 Epoch: [21] [130/172] eta: 0:00:16 lr: 0.000000 loss: 0.1995 (0.2189) loss_classifier: 0.0392 (0.0397) loss_box_reg: 0.0527 (0.0657) loss_objectness: 0.0128 (0.0164) loss_rpn_box_reg: 0.1054 (0.0971) time: 0.3735 data: 0.0161 max mem: 3653 Epoch: [21] [140/172] eta: 0:00:12 lr: 0.000000 loss: 0.2174 (0.2193) loss_classifier: 0.0378 (0.0399) loss_box_reg: 0.0549 (0.0664) loss_objectness: 0.0086 (0.0163) loss_rpn_box_reg: 0.0965 (0.0967) time: 0.3786 data: 0.0160 max mem: 3653 Epoch: [21] [150/172] eta: 0:00:08 lr: 0.000000 loss: 0.2179 (0.2182) loss_classifier: 0.0382 (0.0395) loss_box_reg: 0.0664 (0.0660) loss_objectness: 0.0103 (0.0161) loss_rpn_box_reg: 0.0910 (0.0966) time: 0.4007 data: 0.0170 max mem: 3653 Epoch: [21] [160/172] eta: 0:00:04 lr: 0.000000 loss: 0.2222 (0.2208) loss_classifier: 0.0393 (0.0404) loss_box_reg: 0.0744 (0.0675) loss_objectness: 0.0147 (0.0162) loss_rpn_box_reg: 0.0964 (0.0967) time: 0.3972 data: 0.0173 max mem: 3653 Epoch: [21] [170/172] eta: 0:00:00 lr: 0.000000 loss: 0.2146 (0.2190) loss_classifier: 0.0332 (0.0401) loss_box_reg: 0.0603 (0.0669) loss_objectness: 0.0126 (0.0158) loss_rpn_box_reg: 0.0845 (0.0962) time: 0.4016 data: 0.0176 max mem: 3653 Epoch: [21] [171/172] eta: 0:00:00 lr: 0.000000 loss: 0.2146 (0.2184) loss_classifier: 0.0321 (0.0399) loss_box_reg: 0.0537 (0.0666) loss_objectness: 0.0126 (0.0158) loss_rpn_box_reg: 0.0845 (0.0960) time: 0.3872 data: 0.0170 max mem: 3653 Epoch: [21] Total time: 0:01:08 (0.3988 s / it) creating index... index created! Test: [ 0/38] eta: 0:00:16 model_time: 0.1003 (0.1003) evaluator_time: 0.0065 (0.0065) time: 0.4328 data: 0.3100 max mem: 3653 Test: [37/38] eta: 0:00:00 model_time: 0.0754 (0.0763) evaluator_time: 0.0018 (0.0027) time: 0.0969 data: 0.0086 max mem: 3653 Test: Total time: 0:00:04 (0.1132 s / it) Averaged stats: model_time: 0.0754 (0.0763) evaluator_time: 0.0018 (0.0027) Accumulating evaluation results... DONE (t=0.01s). IoU metric: bbox Average Precision (AP) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.647 Average Precision (AP) @[ IoU=0.50 | area= all | maxDets=100 ] = 0.983 Average Precision (AP) @[ IoU=0.75 | area= all | maxDets=100 ] = 0.779 Average Precision (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.647 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 1 ] = 0.262 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 10 ] = 0.733 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.733 Average Recall (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.733 Epoch: [22] [ 0/172] eta: 0:02:34 lr: 0.000000 loss: 0.2128 (0.2128) loss_classifier: 0.0360 (0.0360) loss_box_reg: 0.0650 (0.0650) loss_objectness: 0.0140 (0.0140) loss_rpn_box_reg: 0.0978 (0.0978) time: 0.8963 data: 0.4608 max mem: 3653 Epoch: [22] [ 10/172] eta: 0:01:12 lr: 0.000000 loss: 0.2091 (0.2004) loss_classifier: 0.0350 (0.0394) loss_box_reg: 0.0597 (0.0569) loss_objectness: 0.0176 (0.0167) loss_rpn_box_reg: 0.0809 (0.0874) time: 0.4496 data: 0.0697 max mem: 3653 Epoch: [22] [ 20/172] eta: 0:01:04 lr: 0.000000 loss: 0.2091 (0.2137) loss_classifier: 0.0349 (0.0407) loss_box_reg: 0.0595 (0.0663) loss_objectness: 0.0138 (0.0137) loss_rpn_box_reg: 0.0856 (0.0929) time: 0.3977 data: 0.0251 max mem: 3653 Epoch: [22] [ 30/172] eta: 0:00:58 lr: 0.000000 loss: 0.2195 (0.2163) loss_classifier: 0.0379 (0.0406) loss_box_reg: 0.0664 (0.0670) loss_objectness: 0.0138 (0.0153) loss_rpn_box_reg: 0.0890 (0.0934) time: 0.3921 data: 0.0198 max mem: 3653 Epoch: [22] [ 40/172] eta: 0:00:54 lr: 0.000000 loss: 0.2128 (0.2244) loss_classifier: 0.0434 (0.0408) loss_box_reg: 0.0713 (0.0685) loss_objectness: 0.0128 (0.0167) loss_rpn_box_reg: 0.0989 (0.0984) time: 0.3997 data: 0.0199 max mem: 3653 Epoch: [22] [ 50/172] eta: 0:00:49 lr: 0.000000 loss: 0.2176 (0.2223) loss_classifier: 0.0332 (0.0396) loss_box_reg: 0.0615 (0.0666) loss_objectness: 0.0122 (0.0165) loss_rpn_box_reg: 0.1031 (0.0995) time: 0.3914 data: 0.0179 max mem: 3653 Epoch: [22] [ 60/172] eta: 0:00:44 lr: 0.000000 loss: 0.1995 (0.2143) loss_classifier: 0.0303 (0.0382) loss_box_reg: 0.0523 (0.0632) loss_objectness: 0.0142 (0.0163) loss_rpn_box_reg: 0.0995 (0.0967) time: 0.3773 data: 0.0154 max mem: 3653 Epoch: [22] [ 70/172] eta: 0:00:40 lr: 0.000000 loss: 0.1741 (0.2114) loss_classifier: 0.0293 (0.0384) loss_box_reg: 0.0506 (0.0625) loss_objectness: 0.0137 (0.0160) loss_rpn_box_reg: 0.0700 (0.0945) time: 0.3936 data: 0.0167 max mem: 3653 Epoch: [22] [ 80/172] eta: 0:00:36 lr: 0.000000 loss: 0.1943 (0.2116) loss_classifier: 0.0365 (0.0384) loss_box_reg: 0.0549 (0.0622) loss_objectness: 0.0117 (0.0162) loss_rpn_box_reg: 0.0728 (0.0949) time: 0.3931 data: 0.0185 max mem: 3653 Epoch: [22] [ 90/172] eta: 0:00:32 lr: 0.000000 loss: 0.2100 (0.2140) loss_classifier: 0.0435 (0.0390) loss_box_reg: 0.0613 (0.0641) loss_objectness: 0.0107 (0.0154) loss_rpn_box_reg: 0.0869 (0.0955) time: 0.3985 data: 0.0189 max mem: 3653 Epoch: [22] [100/172] eta: 0:00:28 lr: 0.000000 loss: 0.2098 (0.2134) loss_classifier: 0.0434 (0.0391) loss_box_reg: 0.0620 (0.0643) loss_objectness: 0.0089 (0.0153) loss_rpn_box_reg: 0.0856 (0.0946) time: 0.4044 data: 0.0185 max mem: 3653 Epoch: [22] [110/172] eta: 0:00:24 lr: 0.000000 loss: 0.2098 (0.2164) loss_classifier: 0.0423 (0.0394) loss_box_reg: 0.0620 (0.0657) loss_objectness: 0.0132 (0.0156) loss_rpn_box_reg: 0.0994 (0.0957) time: 0.3905 data: 0.0180 max mem: 3653 Epoch: [22] [120/172] eta: 0:00:20 lr: 0.000000 loss: 0.2294 (0.2153) loss_classifier: 0.0352 (0.0391) loss_box_reg: 0.0586 (0.0649) loss_objectness: 0.0151 (0.0156) loss_rpn_box_reg: 0.0994 (0.0956) time: 0.3893 data: 0.0182 max mem: 3653 Epoch: [22] [130/172] eta: 0:00:16 lr: 0.000000 loss: 0.1940 (0.2145) loss_classifier: 0.0287 (0.0390) loss_box_reg: 0.0586 (0.0651) loss_objectness: 0.0100 (0.0155) loss_rpn_box_reg: 0.0814 (0.0949) time: 0.4045 data: 0.0183 max mem: 3653 Epoch: [22] [140/172] eta: 0:00:12 lr: 0.000000 loss: 0.2146 (0.2171) loss_classifier: 0.0394 (0.0394) loss_box_reg: 0.0645 (0.0658) loss_objectness: 0.0128 (0.0156) loss_rpn_box_reg: 0.0976 (0.0964) time: 0.4051 data: 0.0188 max mem: 3653 Epoch: [22] [150/172] eta: 0:00:08 lr: 0.000000 loss: 0.2146 (0.2157) loss_classifier: 0.0412 (0.0392) loss_box_reg: 0.0609 (0.0648) loss_objectness: 0.0128 (0.0153) loss_rpn_box_reg: 0.0976 (0.0964) time: 0.3905 data: 0.0194 max mem: 3653 Epoch: [22] [160/172] eta: 0:00:04 lr: 0.000000 loss: 0.2124 (0.2169) loss_classifier: 0.0398 (0.0400) loss_box_reg: 0.0539 (0.0654) loss_objectness: 0.0120 (0.0154) loss_rpn_box_reg: 0.0889 (0.0962) time: 0.4076 data: 0.0192 max mem: 3653 Epoch: [22] [170/172] eta: 0:00:00 lr: 0.000000 loss: 0.2164 (0.2179) loss_classifier: 0.0415 (0.0401) loss_box_reg: 0.0784 (0.0663) loss_objectness: 0.0143 (0.0157) loss_rpn_box_reg: 0.0886 (0.0958) time: 0.4103 data: 0.0180 max mem: 3653 Epoch: [22] [171/172] eta: 0:00:00 lr: 0.000000 loss: 0.2331 (0.2195) loss_classifier: 0.0431 (0.0403) loss_box_reg: 0.0788 (0.0671) loss_objectness: 0.0178 (0.0158) loss_rpn_box_reg: 0.0886 (0.0963) time: 0.3964 data: 0.0180 max mem: 3653 Epoch: [22] Total time: 0:01:08 (0.3993 s / it) creating index... index created! Test: [ 0/38] eta: 0:00:16 model_time: 0.1056 (0.1056) evaluator_time: 0.0054 (0.0054) time: 0.4228 data: 0.3032 max mem: 3653 Test: [37/38] eta: 0:00:00 model_time: 0.0754 (0.0773) evaluator_time: 0.0018 (0.0028) time: 0.0971 data: 0.0086 max mem: 3653 Test: Total time: 0:00:04 (0.1131 s / it) Averaged stats: model_time: 0.0754 (0.0773) evaluator_time: 0.0018 (0.0028) Accumulating evaluation results... DONE (t=0.01s). IoU metric: bbox Average Precision (AP) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.647 Average Precision (AP) @[ IoU=0.50 | area= all | maxDets=100 ] = 0.983 Average Precision (AP) @[ IoU=0.75 | area= all | maxDets=100 ] = 0.779 Average Precision (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.647 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 1 ] = 0.262 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 10 ] = 0.733 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.733 Average Recall (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.733 Epoch: [23] [ 0/172] eta: 0:02:35 lr: 0.000000 loss: 0.2218 (0.2218) loss_classifier: 0.0351 (0.0351) loss_box_reg: 0.0666 (0.0666) loss_objectness: 0.0192 (0.0192) loss_rpn_box_reg: 0.1009 (0.1009) time: 0.9022 data: 0.5125 max mem: 3653 Epoch: [23] [ 10/172] eta: 0:01:11 lr: 0.000000 loss: 0.1932 (0.2013) loss_classifier: 0.0394 (0.0382) loss_box_reg: 0.0579 (0.0642) loss_objectness: 0.0132 (0.0148) loss_rpn_box_reg: 0.0836 (0.0841) time: 0.4435 data: 0.0600 max mem: 3653 Epoch: [23] [ 20/172] eta: 0:01:04 lr: 0.000000 loss: 0.2056 (0.2208) loss_classifier: 0.0394 (0.0375) loss_box_reg: 0.0579 (0.0626) loss_objectness: 0.0132 (0.0201) loss_rpn_box_reg: 0.0881 (0.1007) time: 0.3978 data: 0.0163 max mem: 3653 Epoch: [23] [ 30/172] eta: 0:00:58 lr: 0.000000 loss: 0.2198 (0.2237) loss_classifier: 0.0399 (0.0388) loss_box_reg: 0.0586 (0.0627) loss_objectness: 0.0134 (0.0188) loss_rpn_box_reg: 0.1059 (0.1034) time: 0.3992 data: 0.0162 max mem: 3653 Epoch: [23] [ 40/172] eta: 0:00:53 lr: 0.000000 loss: 0.2341 (0.2295) loss_classifier: 0.0474 (0.0410) loss_box_reg: 0.0627 (0.0664) loss_objectness: 0.0133 (0.0174) loss_rpn_box_reg: 0.1059 (0.1047) time: 0.3908 data: 0.0160 max mem: 3653 Epoch: [23] [ 50/172] eta: 0:00:49 lr: 0.000000 loss: 0.2462 (0.2304) loss_classifier: 0.0425 (0.0409) loss_box_reg: 0.0643 (0.0675) loss_objectness: 0.0123 (0.0169) loss_rpn_box_reg: 0.1088 (0.1050) time: 0.3960 data: 0.0187 max mem: 3653 Epoch: [23] [ 60/172] eta: 0:00:45 lr: 0.000000 loss: 0.2393 (0.2315) loss_classifier: 0.0395 (0.0418) loss_box_reg: 0.0643 (0.0676) loss_objectness: 0.0106 (0.0166) loss_rpn_box_reg: 0.1036 (0.1055) time: 0.4084 data: 0.0205 max mem: 3653 Epoch: [23] [ 70/172] eta: 0:00:41 lr: 0.000000 loss: 0.2114 (0.2264) loss_classifier: 0.0376 (0.0411) loss_box_reg: 0.0611 (0.0674) loss_objectness: 0.0122 (0.0161) loss_rpn_box_reg: 0.0934 (0.1018) time: 0.4050 data: 0.0191 max mem: 3653 Epoch: [23] [ 80/172] eta: 0:00:37 lr: 0.000000 loss: 0.1809 (0.2216) loss_classifier: 0.0363 (0.0406) loss_box_reg: 0.0611 (0.0659) loss_objectness: 0.0111 (0.0161) loss_rpn_box_reg: 0.0759 (0.0991) time: 0.3949 data: 0.0165 max mem: 3653 Epoch: [23] [ 90/172] eta: 0:00:33 lr: 0.000000 loss: 0.1907 (0.2206) loss_classifier: 0.0358 (0.0404) loss_box_reg: 0.0592 (0.0658) loss_objectness: 0.0108 (0.0158) loss_rpn_box_reg: 0.0841 (0.0986) time: 0.3889 data: 0.0173 max mem: 3653 Epoch: [23] [100/172] eta: 0:00:29 lr: 0.000000 loss: 0.2067 (0.2227) loss_classifier: 0.0366 (0.0408) loss_box_reg: 0.0626 (0.0670) loss_objectness: 0.0108 (0.0157) loss_rpn_box_reg: 0.1027 (0.0993) time: 0.4041 data: 0.0207 max mem: 3653 Epoch: [23] [110/172] eta: 0:00:24 lr: 0.000000 loss: 0.2062 (0.2226) loss_classifier: 0.0341 (0.0406) loss_box_reg: 0.0568 (0.0672) loss_objectness: 0.0108 (0.0153) loss_rpn_box_reg: 0.1035 (0.0994) time: 0.4022 data: 0.0197 max mem: 3653 Epoch: [23] [120/172] eta: 0:00:21 lr: 0.000000 loss: 0.2105 (0.2223) loss_classifier: 0.0341 (0.0409) loss_box_reg: 0.0689 (0.0678) loss_objectness: 0.0108 (0.0154) loss_rpn_box_reg: 0.0868 (0.0982) time: 0.4027 data: 0.0184 max mem: 3653 Epoch: [23] [130/172] eta: 0:00:16 lr: 0.000000 loss: 0.2105 (0.2191) loss_classifier: 0.0341 (0.0405) loss_box_reg: 0.0588 (0.0665) loss_objectness: 0.0146 (0.0155) loss_rpn_box_reg: 0.0849 (0.0966) time: 0.4028 data: 0.0187 max mem: 3653 Epoch: [23] [140/172] eta: 0:00:12 lr: 0.000000 loss: 0.1791 (0.2200) loss_classifier: 0.0338 (0.0405) loss_box_reg: 0.0539 (0.0666) loss_objectness: 0.0157 (0.0157) loss_rpn_box_reg: 0.0986 (0.0973) time: 0.4016 data: 0.0188 max mem: 3653 Epoch: [23] [150/172] eta: 0:00:08 lr: 0.000000 loss: 0.2053 (0.2184) loss_classifier: 0.0347 (0.0400) loss_box_reg: 0.0613 (0.0660) loss_objectness: 0.0118 (0.0155) loss_rpn_box_reg: 0.0950 (0.0969) time: 0.3998 data: 0.0199 max mem: 3653 Epoch: [23] [160/172] eta: 0:00:04 lr: 0.000000 loss: 0.1976 (0.2169) loss_classifier: 0.0321 (0.0397) loss_box_reg: 0.0558 (0.0657) loss_objectness: 0.0127 (0.0153) loss_rpn_box_reg: 0.0824 (0.0961) time: 0.3899 data: 0.0188 max mem: 3653 Epoch: [23] [170/172] eta: 0:00:00 lr: 0.000000 loss: 0.2083 (0.2181) loss_classifier: 0.0342 (0.0399) loss_box_reg: 0.0574 (0.0665) loss_objectness: 0.0134 (0.0153) loss_rpn_box_reg: 0.0843 (0.0963) time: 0.4027 data: 0.0177 max mem: 3653 Epoch: [23] [171/172] eta: 0:00:00 lr: 0.000000 loss: 0.2226 (0.2188) loss_classifier: 0.0366 (0.0400) loss_box_reg: 0.0745 (0.0669) loss_objectness: 0.0116 (0.0153) loss_rpn_box_reg: 0.0941 (0.0966) time: 0.3971 data: 0.0182 max mem: 3653 Epoch: [23] Total time: 0:01:09 (0.4019 s / it) creating index... index created! Test: [ 0/38] eta: 0:00:15 model_time: 0.0929 (0.0929) evaluator_time: 0.0059 (0.0059) time: 0.4147 data: 0.3037 max mem: 3653 Test: [37/38] eta: 0:00:00 model_time: 0.0754 (0.0769) evaluator_time: 0.0018 (0.0027) time: 0.0965 data: 0.0085 max mem: 3653 Test: Total time: 0:00:04 (0.1121 s / it) Averaged stats: model_time: 0.0754 (0.0769) evaluator_time: 0.0018 (0.0027) Accumulating evaluation results... DONE (t=0.01s). IoU metric: bbox Average Precision (AP) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.647 Average Precision (AP) @[ IoU=0.50 | area= all | maxDets=100 ] = 0.983 Average Precision (AP) @[ IoU=0.75 | area= all | maxDets=100 ] = 0.779 Average Precision (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.647 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 1 ] = 0.262 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 10 ] = 0.733 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.733 Average Recall (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.733 Epoch: [24] [ 0/172] eta: 0:02:48 lr: 0.000000 loss: 0.2361 (0.2361) loss_classifier: 0.0354 (0.0354) loss_box_reg: 0.0475 (0.0475) loss_objectness: 0.0350 (0.0350) loss_rpn_box_reg: 0.1182 (0.1182) time: 0.9799 data: 0.6075 max mem: 3653 Epoch: [24] [ 10/172] eta: 0:01:18 lr: 0.000000 loss: 0.2361 (0.2469) loss_classifier: 0.0390 (0.0460) loss_box_reg: 0.0599 (0.0762) loss_objectness: 0.0109 (0.0182) loss_rpn_box_reg: 0.1143 (0.1064) time: 0.4845 data: 0.0736 max mem: 3653 Epoch: [24] [ 20/172] eta: 0:01:06 lr: 0.000000 loss: 0.2223 (0.2351) loss_classifier: 0.0384 (0.0423) loss_box_reg: 0.0659 (0.0735) loss_objectness: 0.0109 (0.0178) loss_rpn_box_reg: 0.1123 (0.1015) time: 0.4120 data: 0.0190 max mem: 3653 Epoch: [24] [ 30/172] eta: 0:01:00 lr: 0.000000 loss: 0.2364 (0.2314) loss_classifier: 0.0344 (0.0421) loss_box_reg: 0.0678 (0.0721) loss_objectness: 0.0110 (0.0165) loss_rpn_box_reg: 0.0943 (0.1007) time: 0.3968 data: 0.0199 max mem: 3653 Epoch: [24] [ 40/172] eta: 0:00:55 lr: 0.000000 loss: 0.2086 (0.2265) loss_classifier: 0.0328 (0.0415) loss_box_reg: 0.0730 (0.0714) loss_objectness: 0.0109 (0.0155) loss_rpn_box_reg: 0.0860 (0.0982) time: 0.4077 data: 0.0215 max mem: 3653 Epoch: [24] [ 50/172] eta: 0:00:50 lr: 0.000000 loss: 0.2086 (0.2267) loss_classifier: 0.0299 (0.0402) loss_box_reg: 0.0716 (0.0710) loss_objectness: 0.0116 (0.0160) loss_rpn_box_reg: 0.0856 (0.0994) time: 0.4003 data: 0.0199 max mem: 3653 Epoch: [24] [ 60/172] eta: 0:00:46 lr: 0.000000 loss: 0.2014 (0.2204) loss_classifier: 0.0326 (0.0403) loss_box_reg: 0.0566 (0.0691) loss_objectness: 0.0134 (0.0155) loss_rpn_box_reg: 0.0840 (0.0954) time: 0.3867 data: 0.0175 max mem: 3653 Epoch: [24] [ 70/172] eta: 0:00:41 lr: 0.000000 loss: 0.1953 (0.2180) loss_classifier: 0.0390 (0.0392) loss_box_reg: 0.0537 (0.0668) loss_objectness: 0.0134 (0.0155) loss_rpn_box_reg: 0.0796 (0.0965) time: 0.3821 data: 0.0161 max mem: 3653 Epoch: [24] [ 80/172] eta: 0:00:37 lr: 0.000000 loss: 0.1980 (0.2191) loss_classifier: 0.0351 (0.0389) loss_box_reg: 0.0462 (0.0673) loss_objectness: 0.0118 (0.0157) loss_rpn_box_reg: 0.0860 (0.0972) time: 0.3855 data: 0.0166 max mem: 3653 Epoch: [24] [ 90/172] eta: 0:00:33 lr: 0.000000 loss: 0.2051 (0.2188) loss_classifier: 0.0351 (0.0390) loss_box_reg: 0.0561 (0.0667) loss_objectness: 0.0118 (0.0156) loss_rpn_box_reg: 0.0922 (0.0975) time: 0.3889 data: 0.0179 max mem: 3653 Epoch: [24] [100/172] eta: 0:00:29 lr: 0.000000 loss: 0.1824 (0.2159) loss_classifier: 0.0370 (0.0385) loss_box_reg: 0.0451 (0.0654) loss_objectness: 0.0125 (0.0154) loss_rpn_box_reg: 0.0821 (0.0965) time: 0.3937 data: 0.0189 max mem: 3653 Epoch: [24] [110/172] eta: 0:00:24 lr: 0.000000 loss: 0.1882 (0.2159) loss_classifier: 0.0387 (0.0386) loss_box_reg: 0.0558 (0.0654) loss_objectness: 0.0125 (0.0154) loss_rpn_box_reg: 0.0807 (0.0965) time: 0.3882 data: 0.0183 max mem: 3653 Epoch: [24] [120/172] eta: 0:00:20 lr: 0.000000 loss: 0.2125 (0.2179) loss_classifier: 0.0444 (0.0394) loss_box_reg: 0.0575 (0.0662) loss_objectness: 0.0166 (0.0157) loss_rpn_box_reg: 0.0978 (0.0966) time: 0.3923 data: 0.0178 max mem: 3653 Epoch: [24] [130/172] eta: 0:00:16 lr: 0.000000 loss: 0.2193 (0.2171) loss_classifier: 0.0444 (0.0394) loss_box_reg: 0.0578 (0.0660) loss_objectness: 0.0143 (0.0153) loss_rpn_box_reg: 0.0981 (0.0964) time: 0.4073 data: 0.0187 max mem: 3653 Epoch: [24] [140/172] eta: 0:00:12 lr: 0.000000 loss: 0.2193 (0.2186) loss_classifier: 0.0330 (0.0392) loss_box_reg: 0.0578 (0.0659) loss_objectness: 0.0091 (0.0160) loss_rpn_box_reg: 0.0947 (0.0977) time: 0.3958 data: 0.0177 max mem: 3653 Epoch: [24] [150/172] eta: 0:00:08 lr: 0.000000 loss: 0.2247 (0.2195) loss_classifier: 0.0360 (0.0395) loss_box_reg: 0.0719 (0.0663) loss_objectness: 0.0115 (0.0158) loss_rpn_box_reg: 0.0947 (0.0979) time: 0.3911 data: 0.0170 max mem: 3653 Epoch: [24] [160/172] eta: 0:00:04 lr: 0.000000 loss: 0.2223 (0.2191) loss_classifier: 0.0411 (0.0396) loss_box_reg: 0.0612 (0.0665) loss_objectness: 0.0134 (0.0160) loss_rpn_box_reg: 0.0844 (0.0970) time: 0.3946 data: 0.0182 max mem: 3653 Epoch: [24] [170/172] eta: 0:00:00 lr: 0.000000 loss: 0.1947 (0.2187) loss_classifier: 0.0391 (0.0398) loss_box_reg: 0.0610 (0.0669) loss_objectness: 0.0108 (0.0156) loss_rpn_box_reg: 0.0819 (0.0964) time: 0.4019 data: 0.0193 max mem: 3653 Epoch: [24] [171/172] eta: 0:00:00 lr: 0.000000 loss: 0.1947 (0.2185) loss_classifier: 0.0391 (0.0399) loss_box_reg: 0.0608 (0.0666) loss_objectness: 0.0108 (0.0157) loss_rpn_box_reg: 0.0819 (0.0964) time: 0.3943 data: 0.0188 max mem: 3653 Epoch: [24] Total time: 0:01:08 (0.3997 s / it) creating index... index created! Test: [ 0/38] eta: 0:00:15 model_time: 0.0937 (0.0937) evaluator_time: 0.0052 (0.0052) time: 0.3993 data: 0.2886 max mem: 3653 Test: [37/38] eta: 0:00:00 model_time: 0.0755 (0.0780) evaluator_time: 0.0018 (0.0028) time: 0.0982 data: 0.0092 max mem: 3653 Test: Total time: 0:00:04 (0.1133 s / it) Averaged stats: model_time: 0.0755 (0.0780) evaluator_time: 0.0018 (0.0028) Accumulating evaluation results... DONE (t=0.01s). IoU metric: bbox Average Precision (AP) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.647 Average Precision (AP) @[ IoU=0.50 | area= all | maxDets=100 ] = 0.983 Average Precision (AP) @[ IoU=0.75 | area= all | maxDets=100 ] = 0.779 Average Precision (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.647 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 1 ] = 0.262 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 10 ] = 0.733 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.733 Average Recall (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.733 Epoch: [25] [ 0/172] eta: 0:02:54 lr: 0.000000 loss: 0.3962 (0.3962) loss_classifier: 0.0369 (0.0369) loss_box_reg: 0.0903 (0.0903) loss_objectness: 0.0835 (0.0835) loss_rpn_box_reg: 0.1855 (0.1855) time: 1.0147 data: 0.5380 max mem: 3653 Epoch: [25] [ 10/172] eta: 0:01:16 lr: 0.000000 loss: 0.1942 (0.2172) loss_classifier: 0.0274 (0.0329) loss_box_reg: 0.0597 (0.0622) loss_objectness: 0.0116 (0.0184) loss_rpn_box_reg: 0.0997 (0.1038) time: 0.4728 data: 0.0772 max mem: 3653 Epoch: [25] [ 20/172] eta: 0:01:07 lr: 0.000000 loss: 0.1986 (0.2328) loss_classifier: 0.0313 (0.0373) loss_box_reg: 0.0597 (0.0701) loss_objectness: 0.0116 (0.0165) loss_rpn_box_reg: 0.1040 (0.1089) time: 0.4135 data: 0.0247 max mem: 3653 Epoch: [25] [ 30/172] eta: 0:01:00 lr: 0.000000 loss: 0.2185 (0.2229) loss_classifier: 0.0395 (0.0380) loss_box_reg: 0.0516 (0.0669) loss_objectness: 0.0137 (0.0161) loss_rpn_box_reg: 0.1037 (0.1019) time: 0.4023 data: 0.0186 max mem: 3653 Epoch: [25] [ 40/172] eta: 0:00:55 lr: 0.000000 loss: 0.1998 (0.2139) loss_classifier: 0.0387 (0.0372) loss_box_reg: 0.0516 (0.0638) loss_objectness: 0.0119 (0.0150) loss_rpn_box_reg: 0.0786 (0.0978) time: 0.3961 data: 0.0181 max mem: 3653 Epoch: [25] [ 50/172] eta: 0:00:50 lr: 0.000000 loss: 0.1948 (0.2157) loss_classifier: 0.0394 (0.0391) loss_box_reg: 0.0579 (0.0643) loss_objectness: 0.0119 (0.0159) loss_rpn_box_reg: 0.0786 (0.0964) time: 0.3983 data: 0.0184 max mem: 3653 Epoch: [25] [ 60/172] eta: 0:00:46 lr: 0.000000 loss: 0.1935 (0.2106) loss_classifier: 0.0356 (0.0384) loss_box_reg: 0.0530 (0.0634) loss_objectness: 0.0118 (0.0154) loss_rpn_box_reg: 0.0812 (0.0934) time: 0.4136 data: 0.0205 max mem: 3653 Epoch: [25] [ 70/172] eta: 0:00:42 lr: 0.000000 loss: 0.1939 (0.2156) loss_classifier: 0.0327 (0.0395) loss_box_reg: 0.0552 (0.0662) loss_objectness: 0.0089 (0.0151) loss_rpn_box_reg: 0.0792 (0.0948) time: 0.4127 data: 0.0200 max mem: 3653 Epoch: [25] [ 80/172] eta: 0:00:38 lr: 0.000000 loss: 0.1691 (0.2084) loss_classifier: 0.0333 (0.0383) loss_box_reg: 0.0552 (0.0631) loss_objectness: 0.0112 (0.0149) loss_rpn_box_reg: 0.0746 (0.0922) time: 0.3994 data: 0.0181 max mem: 3653 Epoch: [25] [ 90/172] eta: 0:00:33 lr: 0.000000 loss: 0.1613 (0.2084) loss_classifier: 0.0320 (0.0385) loss_box_reg: 0.0478 (0.0626) loss_objectness: 0.0141 (0.0153) loss_rpn_box_reg: 0.0713 (0.0919) time: 0.3959 data: 0.0185 max mem: 3653 Epoch: [25] [100/172] eta: 0:00:29 lr: 0.000000 loss: 0.2156 (0.2102) loss_classifier: 0.0374 (0.0390) loss_box_reg: 0.0557 (0.0630) loss_objectness: 0.0151 (0.0156) loss_rpn_box_reg: 0.0975 (0.0926) time: 0.4085 data: 0.0193 max mem: 3653 Epoch: [25] [110/172] eta: 0:00:25 lr: 0.000000 loss: 0.2256 (0.2120) loss_classifier: 0.0374 (0.0396) loss_box_reg: 0.0725 (0.0644) loss_objectness: 0.0135 (0.0154) loss_rpn_box_reg: 0.0950 (0.0927) time: 0.4167 data: 0.0189 max mem: 3653 Epoch: [25] [120/172] eta: 0:00:21 lr: 0.000000 loss: 0.2017 (0.2091) loss_classifier: 0.0327 (0.0390) loss_box_reg: 0.0579 (0.0632) loss_objectness: 0.0114 (0.0150) loss_rpn_box_reg: 0.0929 (0.0919) time: 0.3962 data: 0.0170 max mem: 3653 Epoch: [25] [130/172] eta: 0:00:17 lr: 0.000000 loss: 0.1998 (0.2117) loss_classifier: 0.0366 (0.0391) loss_box_reg: 0.0673 (0.0644) loss_objectness: 0.0106 (0.0151) loss_rpn_box_reg: 0.0793 (0.0932) time: 0.3889 data: 0.0166 max mem: 3653 Epoch: [25] [140/172] eta: 0:00:13 lr: 0.000000 loss: 0.2383 (0.2138) loss_classifier: 0.0437 (0.0397) loss_box_reg: 0.0716 (0.0655) loss_objectness: 0.0131 (0.0151) loss_rpn_box_reg: 0.1010 (0.0936) time: 0.4030 data: 0.0187 max mem: 3653 Epoch: [25] [150/172] eta: 0:00:08 lr: 0.000000 loss: 0.2080 (0.2124) loss_classifier: 0.0376 (0.0392) loss_box_reg: 0.0609 (0.0646) loss_objectness: 0.0111 (0.0149) loss_rpn_box_reg: 0.0886 (0.0936) time: 0.4003 data: 0.0186 max mem: 3653 Epoch: [25] [160/172] eta: 0:00:04 lr: 0.000000 loss: 0.2169 (0.2148) loss_classifier: 0.0384 (0.0399) loss_box_reg: 0.0636 (0.0652) loss_objectness: 0.0146 (0.0152) loss_rpn_box_reg: 0.0874 (0.0944) time: 0.3924 data: 0.0179 max mem: 3653 Epoch: [25] [170/172] eta: 0:00:00 lr: 0.000000 loss: 0.2753 (0.2185) loss_classifier: 0.0479 (0.0403) loss_box_reg: 0.0778 (0.0666) loss_objectness: 0.0180 (0.0156) loss_rpn_box_reg: 0.1121 (0.0961) time: 0.3939 data: 0.0167 max mem: 3653 Epoch: [25] [171/172] eta: 0:00:00 lr: 0.000000 loss: 0.2797 (0.2190) loss_classifier: 0.0479 (0.0403) loss_box_reg: 0.0778 (0.0669) loss_objectness: 0.0181 (0.0157) loss_rpn_box_reg: 0.1121 (0.0961) time: 0.3849 data: 0.0161 max mem: 3653 Epoch: [25] Total time: 0:01:09 (0.4052 s / it) creating index... index created! Test: [ 0/38] eta: 0:00:17 model_time: 0.1346 (0.1346) evaluator_time: 0.0058 (0.0058) time: 0.4478 data: 0.2988 max mem: 3653 Test: [37/38] eta: 0:00:00 model_time: 0.0755 (0.0775) evaluator_time: 0.0018 (0.0027) time: 0.0980 data: 0.0087 max mem: 3653 Test: Total time: 0:00:04 (0.1139 s / it) Averaged stats: model_time: 0.0755 (0.0775) evaluator_time: 0.0018 (0.0027) Accumulating evaluation results... DONE (t=0.01s). IoU metric: bbox Average Precision (AP) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.647 Average Precision (AP) @[ IoU=0.50 | area= all | maxDets=100 ] = 0.983 Average Precision (AP) @[ IoU=0.75 | area= all | maxDets=100 ] = 0.779 Average Precision (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.647 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 1 ] = 0.262 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 10 ] = 0.733 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.733 Average Recall (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.733 Epoch: [26] [ 0/172] eta: 0:02:48 lr: 0.000000 loss: 0.1647 (0.1647) loss_classifier: 0.0242 (0.0242) loss_box_reg: 0.0365 (0.0365) loss_objectness: 0.0197 (0.0197) loss_rpn_box_reg: 0.0844 (0.0844) time: 0.9797 data: 0.5459 max mem: 3653 Epoch: [26] [ 10/172] eta: 0:01:13 lr: 0.000000 loss: 0.2172 (0.2518) loss_classifier: 0.0510 (0.0483) loss_box_reg: 0.0574 (0.0751) loss_objectness: 0.0197 (0.0200) loss_rpn_box_reg: 0.0998 (0.1084) time: 0.4554 data: 0.0665 max mem: 3653 Epoch: [26] [ 20/172] eta: 0:01:04 lr: 0.000000 loss: 0.1999 (0.2236) loss_classifier: 0.0319 (0.0399) loss_box_reg: 0.0466 (0.0674) loss_objectness: 0.0125 (0.0160) loss_rpn_box_reg: 0.0971 (0.1002) time: 0.3994 data: 0.0183 max mem: 3653 Epoch: [26] [ 30/172] eta: 0:00:59 lr: 0.000000 loss: 0.1756 (0.2199) loss_classifier: 0.0319 (0.0399) loss_box_reg: 0.0437 (0.0649) loss_objectness: 0.0065 (0.0141) loss_rpn_box_reg: 0.1049 (0.1010) time: 0.3965 data: 0.0173 max mem: 3653 Epoch: [26] [ 40/172] eta: 0:00:53 lr: 0.000000 loss: 0.2047 (0.2197) loss_classifier: 0.0404 (0.0406) loss_box_reg: 0.0554 (0.0649) loss_objectness: 0.0084 (0.0141) loss_rpn_box_reg: 0.1049 (0.1001) time: 0.3829 data: 0.0160 max mem: 3653 Epoch: [26] [ 50/172] eta: 0:00:49 lr: 0.000000 loss: 0.1694 (0.2118) loss_classifier: 0.0365 (0.0389) loss_box_reg: 0.0564 (0.0635) loss_objectness: 0.0089 (0.0135) loss_rpn_box_reg: 0.0856 (0.0959) time: 0.3777 data: 0.0169 max mem: 3653 Epoch: [26] [ 60/172] eta: 0:00:44 lr: 0.000000 loss: 0.1840 (0.2168) loss_classifier: 0.0365 (0.0401) loss_box_reg: 0.0564 (0.0661) loss_objectness: 0.0114 (0.0136) loss_rpn_box_reg: 0.0856 (0.0970) time: 0.3861 data: 0.0174 max mem: 3653 Epoch: [26] [ 70/172] eta: 0:00:40 lr: 0.000000 loss: 0.1840 (0.2103) loss_classifier: 0.0294 (0.0381) loss_box_reg: 0.0501 (0.0629) loss_objectness: 0.0114 (0.0135) loss_rpn_box_reg: 0.0822 (0.0958) time: 0.4009 data: 0.0184 max mem: 3653 Epoch: [26] [ 80/172] eta: 0:00:37 lr: 0.000000 loss: 0.1799 (0.2083) loss_classifier: 0.0284 (0.0381) loss_box_reg: 0.0498 (0.0629) loss_objectness: 0.0107 (0.0131) loss_rpn_box_reg: 0.0869 (0.0942) time: 0.4188 data: 0.0211 max mem: 3653 Epoch: [26] [ 90/172] eta: 0:00:33 lr: 0.000000 loss: 0.2236 (0.2138) loss_classifier: 0.0432 (0.0396) loss_box_reg: 0.0741 (0.0656) loss_objectness: 0.0111 (0.0135) loss_rpn_box_reg: 0.0934 (0.0952) time: 0.4132 data: 0.0204 max mem: 3653 Epoch: [26] [100/172] eta: 0:00:29 lr: 0.000000 loss: 0.2342 (0.2164) loss_classifier: 0.0465 (0.0403) loss_box_reg: 0.0747 (0.0669) loss_objectness: 0.0116 (0.0132) loss_rpn_box_reg: 0.0970 (0.0959) time: 0.4053 data: 0.0185 max mem: 3653 Epoch: [26] [110/172] eta: 0:00:25 lr: 0.000000 loss: 0.2342 (0.2186) loss_classifier: 0.0450 (0.0407) loss_box_reg: 0.0739 (0.0680) loss_objectness: 0.0089 (0.0133) loss_rpn_box_reg: 0.1032 (0.0966) time: 0.4007 data: 0.0175 max mem: 3653 Epoch: [26] [120/172] eta: 0:00:20 lr: 0.000000 loss: 0.2198 (0.2178) loss_classifier: 0.0395 (0.0406) loss_box_reg: 0.0791 (0.0680) loss_objectness: 0.0137 (0.0134) loss_rpn_box_reg: 0.0908 (0.0957) time: 0.3932 data: 0.0172 max mem: 3653 Epoch: [26] [130/172] eta: 0:00:16 lr: 0.000000 loss: 0.2198 (0.2191) loss_classifier: 0.0370 (0.0407) loss_box_reg: 0.0690 (0.0682) loss_objectness: 0.0137 (0.0134) loss_rpn_box_reg: 0.0870 (0.0967) time: 0.3935 data: 0.0180 max mem: 3653 Epoch: [26] [140/172] eta: 0:00:12 lr: 0.000000 loss: 0.2142 (0.2190) loss_classifier: 0.0358 (0.0403) loss_box_reg: 0.0624 (0.0672) loss_objectness: 0.0099 (0.0139) loss_rpn_box_reg: 0.0985 (0.0975) time: 0.3993 data: 0.0192 max mem: 3653 Epoch: [26] [150/172] eta: 0:00:08 lr: 0.000000 loss: 0.1983 (0.2185) loss_classifier: 0.0349 (0.0400) loss_box_reg: 0.0563 (0.0674) loss_objectness: 0.0113 (0.0137) loss_rpn_box_reg: 0.0985 (0.0975) time: 0.3988 data: 0.0208 max mem: 3653 Epoch: [26] [160/172] eta: 0:00:04 lr: 0.000000 loss: 0.2144 (0.2182) loss_classifier: 0.0370 (0.0401) loss_box_reg: 0.0679 (0.0674) loss_objectness: 0.0113 (0.0138) loss_rpn_box_reg: 0.0862 (0.0970) time: 0.3997 data: 0.0204 max mem: 3653 Epoch: [26] [170/172] eta: 0:00:00 lr: 0.000000 loss: 0.2068 (0.2175) loss_classifier: 0.0363 (0.0400) loss_box_reg: 0.0632 (0.0669) loss_objectness: 0.0108 (0.0139) loss_rpn_box_reg: 0.0917 (0.0967) time: 0.4021 data: 0.0183 max mem: 3653 Epoch: [26] [171/172] eta: 0:00:00 lr: 0.000000 loss: 0.1990 (0.2168) loss_classifier: 0.0349 (0.0398) loss_box_reg: 0.0571 (0.0666) loss_objectness: 0.0101 (0.0138) loss_rpn_box_reg: 0.0862 (0.0965) time: 0.3928 data: 0.0179 max mem: 3653 Epoch: [26] Total time: 0:01:08 (0.4009 s / it) creating index... index created! Test: [ 0/38] eta: 0:00:17 model_time: 0.1279 (0.1279) evaluator_time: 0.0052 (0.0052) time: 0.4502 data: 0.3085 max mem: 3653 Test: [37/38] eta: 0:00:00 model_time: 0.0762 (0.0779) evaluator_time: 0.0018 (0.0026) time: 0.0985 data: 0.0091 max mem: 3653 Test: Total time: 0:00:04 (0.1140 s / it) Averaged stats: model_time: 0.0762 (0.0779) evaluator_time: 0.0018 (0.0026) Accumulating evaluation results... DONE (t=0.01s). IoU metric: bbox Average Precision (AP) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.647 Average Precision (AP) @[ IoU=0.50 | area= all | maxDets=100 ] = 0.983 Average Precision (AP) @[ IoU=0.75 | area= all | maxDets=100 ] = 0.779 Average Precision (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.647 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 1 ] = 0.262 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 10 ] = 0.733 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.733 Average Recall (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.733 Epoch: [27] [ 0/172] eta: 0:02:48 lr: 0.000000 loss: 0.2506 (0.2506) loss_classifier: 0.0498 (0.0498) loss_box_reg: 0.0955 (0.0955) loss_objectness: 0.0270 (0.0270) loss_rpn_box_reg: 0.0783 (0.0783) time: 0.9775 data: 0.5307 max mem: 3653 Epoch: [27] [ 10/172] eta: 0:01:14 lr: 0.000000 loss: 0.2072 (0.1944) loss_classifier: 0.0372 (0.0341) loss_box_reg: 0.0493 (0.0594) loss_objectness: 0.0128 (0.0147) loss_rpn_box_reg: 0.0920 (0.0863) time: 0.4615 data: 0.0755 max mem: 3653 Epoch: [27] [ 20/172] eta: 0:01:08 lr: 0.000000 loss: 0.1662 (0.1985) loss_classifier: 0.0372 (0.0376) loss_box_reg: 0.0493 (0.0623) loss_objectness: 0.0117 (0.0158) loss_rpn_box_reg: 0.0785 (0.0828) time: 0.4217 data: 0.0263 max mem: 3653 Epoch: [27] [ 30/172] eta: 0:01:00 lr: 0.000000 loss: 0.2152 (0.2093) loss_classifier: 0.0382 (0.0389) loss_box_reg: 0.0484 (0.0636) loss_objectness: 0.0163 (0.0167) loss_rpn_box_reg: 0.0993 (0.0901) time: 0.4077 data: 0.0199 max mem: 3653 Epoch: [27] [ 40/172] eta: 0:00:55 lr: 0.000000 loss: 0.2357 (0.2172) loss_classifier: 0.0441 (0.0417) loss_box_reg: 0.0656 (0.0667) loss_objectness: 0.0137 (0.0156) loss_rpn_box_reg: 0.1006 (0.0932) time: 0.3889 data: 0.0167 max mem: 3653 Epoch: [27] [ 50/172] eta: 0:00:51 lr: 0.000000 loss: 0.2285 (0.2258) loss_classifier: 0.0452 (0.0421) loss_box_reg: 0.0692 (0.0695) loss_objectness: 0.0128 (0.0159) loss_rpn_box_reg: 0.1016 (0.0984) time: 0.4062 data: 0.0180 max mem: 3653 Epoch: [27] [ 60/172] eta: 0:00:46 lr: 0.000000 loss: 0.2124 (0.2209) loss_classifier: 0.0267 (0.0402) loss_box_reg: 0.0585 (0.0671) loss_objectness: 0.0135 (0.0160) loss_rpn_box_reg: 0.0968 (0.0976) time: 0.4031 data: 0.0178 max mem: 3653 Epoch: [27] [ 70/172] eta: 0:00:41 lr: 0.000000 loss: 0.1752 (0.2165) loss_classifier: 0.0270 (0.0388) loss_box_reg: 0.0496 (0.0652) loss_objectness: 0.0159 (0.0161) loss_rpn_box_reg: 0.0880 (0.0963) time: 0.3854 data: 0.0169 max mem: 3653 Epoch: [27] [ 80/172] eta: 0:00:37 lr: 0.000000 loss: 0.2218 (0.2215) loss_classifier: 0.0331 (0.0403) loss_box_reg: 0.0757 (0.0680) loss_objectness: 0.0152 (0.0157) loss_rpn_box_reg: 0.0909 (0.0975) time: 0.3858 data: 0.0175 max mem: 3653 Epoch: [27] [ 90/172] eta: 0:00:33 lr: 0.000000 loss: 0.2447 (0.2231) loss_classifier: 0.0465 (0.0407) loss_box_reg: 0.0805 (0.0697) loss_objectness: 0.0142 (0.0159) loss_rpn_box_reg: 0.0963 (0.0968) time: 0.3898 data: 0.0168 max mem: 3653 Epoch: [27] [100/172] eta: 0:00:29 lr: 0.000000 loss: 0.2076 (0.2229) loss_classifier: 0.0359 (0.0412) loss_box_reg: 0.0651 (0.0699) loss_objectness: 0.0109 (0.0154) loss_rpn_box_reg: 0.0969 (0.0963) time: 0.4015 data: 0.0185 max mem: 3653 Epoch: [27] [110/172] eta: 0:00:25 lr: 0.000000 loss: 0.2098 (0.2230) loss_classifier: 0.0353 (0.0414) loss_box_reg: 0.0651 (0.0696) loss_objectness: 0.0124 (0.0161) loss_rpn_box_reg: 0.0913 (0.0960) time: 0.3993 data: 0.0177 max mem: 3653 Epoch: [27] [120/172] eta: 0:00:20 lr: 0.000000 loss: 0.2057 (0.2201) loss_classifier: 0.0306 (0.0405) loss_box_reg: 0.0645 (0.0679) loss_objectness: 0.0128 (0.0161) loss_rpn_box_reg: 0.0825 (0.0956) time: 0.3893 data: 0.0167 max mem: 3653 Epoch: [27] [130/172] eta: 0:00:16 lr: 0.000000 loss: 0.2057 (0.2224) loss_classifier: 0.0306 (0.0407) loss_box_reg: 0.0647 (0.0690) loss_objectness: 0.0101 (0.0161) loss_rpn_box_reg: 0.0825 (0.0966) time: 0.3900 data: 0.0182 max mem: 3653 Epoch: [27] [140/172] eta: 0:00:12 lr: 0.000000 loss: 0.2212 (0.2203) loss_classifier: 0.0380 (0.0403) loss_box_reg: 0.0689 (0.0677) loss_objectness: 0.0125 (0.0159) loss_rpn_box_reg: 0.0931 (0.0964) time: 0.4001 data: 0.0188 max mem: 3653 Epoch: [27] [150/172] eta: 0:00:08 lr: 0.000000 loss: 0.1781 (0.2168) loss_classifier: 0.0320 (0.0398) loss_box_reg: 0.0474 (0.0662) loss_objectness: 0.0125 (0.0157) loss_rpn_box_reg: 0.0727 (0.0952) time: 0.4058 data: 0.0195 max mem: 3653 Epoch: [27] [160/172] eta: 0:00:04 lr: 0.000000 loss: 0.1782 (0.2164) loss_classifier: 0.0329 (0.0396) loss_box_reg: 0.0527 (0.0660) loss_objectness: 0.0099 (0.0155) loss_rpn_box_reg: 0.0727 (0.0953) time: 0.3974 data: 0.0179 max mem: 3653 Epoch: [27] [170/172] eta: 0:00:00 lr: 0.000000 loss: 0.2159 (0.2183) loss_classifier: 0.0404 (0.0400) loss_box_reg: 0.0620 (0.0668) loss_objectness: 0.0124 (0.0154) loss_rpn_box_reg: 0.1091 (0.0961) time: 0.3968 data: 0.0179 max mem: 3653 Epoch: [27] [171/172] eta: 0:00:00 lr: 0.000000 loss: 0.2141 (0.2174) loss_classifier: 0.0404 (0.0399) loss_box_reg: 0.0620 (0.0664) loss_objectness: 0.0124 (0.0154) loss_rpn_box_reg: 0.0998 (0.0956) time: 0.3885 data: 0.0179 max mem: 3653 Epoch: [27] Total time: 0:01:08 (0.4011 s / it) creating index... index created! Test: [ 0/38] eta: 0:00:16 model_time: 0.1014 (0.1014) evaluator_time: 0.0077 (0.0077) time: 0.4316 data: 0.3142 max mem: 3653 Test: [37/38] eta: 0:00:00 model_time: 0.0754 (0.0769) evaluator_time: 0.0018 (0.0029) time: 0.0976 data: 0.0089 max mem: 3653 Test: Total time: 0:00:04 (0.1135 s / it) Averaged stats: model_time: 0.0754 (0.0769) evaluator_time: 0.0018 (0.0029) Accumulating evaluation results... DONE (t=0.01s). IoU metric: bbox Average Precision (AP) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.647 Average Precision (AP) @[ IoU=0.50 | area= all | maxDets=100 ] = 0.983 Average Precision (AP) @[ IoU=0.75 | area= all | maxDets=100 ] = 0.779 Average Precision (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.647 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 1 ] = 0.262 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 10 ] = 0.733 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.733 Average Recall (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.733 Epoch: [28] [ 0/172] eta: 0:02:40 lr: 0.000000 loss: 0.1591 (0.1591) loss_classifier: 0.0213 (0.0213) loss_box_reg: 0.0618 (0.0618) loss_objectness: 0.0055 (0.0055) loss_rpn_box_reg: 0.0706 (0.0706) time: 0.9305 data: 0.5550 max mem: 3653 Epoch: [28] [ 10/172] eta: 0:01:12 lr: 0.000000 loss: 0.2112 (0.2033) loss_classifier: 0.0417 (0.0400) loss_box_reg: 0.0658 (0.0657) loss_objectness: 0.0171 (0.0174) loss_rpn_box_reg: 0.0751 (0.0802) time: 0.4469 data: 0.0662 max mem: 3653 Epoch: [28] [ 20/172] eta: 0:01:03 lr: 0.000000 loss: 0.2014 (0.1980) loss_classifier: 0.0410 (0.0390) loss_box_reg: 0.0535 (0.0634) loss_objectness: 0.0136 (0.0156) loss_rpn_box_reg: 0.0751 (0.0800) time: 0.3913 data: 0.0186 max mem: 3653 Epoch: [28] [ 30/172] eta: 0:00:58 lr: 0.000000 loss: 0.2079 (0.2094) loss_classifier: 0.0388 (0.0398) loss_box_reg: 0.0535 (0.0645) loss_objectness: 0.0135 (0.0166) loss_rpn_box_reg: 0.0837 (0.0885) time: 0.3911 data: 0.0194 max mem: 3653 Epoch: [28] [ 40/172] eta: 0:00:55 lr: 0.000000 loss: 0.2309 (0.2131) loss_classifier: 0.0451 (0.0415) loss_box_reg: 0.0663 (0.0690) loss_objectness: 0.0135 (0.0162) loss_rpn_box_reg: 0.0854 (0.0863) time: 0.4168 data: 0.0212 max mem: 3653 Epoch: [28] [ 50/172] eta: 0:00:49 lr: 0.000000 loss: 0.1784 (0.2081) loss_classifier: 0.0352 (0.0402) loss_box_reg: 0.0638 (0.0672) loss_objectness: 0.0122 (0.0155) loss_rpn_box_reg: 0.0740 (0.0851) time: 0.4064 data: 0.0200 max mem: 3653 Epoch: [28] [ 60/172] eta: 0:00:45 lr: 0.000000 loss: 0.1834 (0.2112) loss_classifier: 0.0323 (0.0400) loss_box_reg: 0.0550 (0.0675) loss_objectness: 0.0109 (0.0151) loss_rpn_box_reg: 0.0906 (0.0885) time: 0.3920 data: 0.0172 max mem: 3653 Epoch: [28] [ 70/172] eta: 0:00:41 lr: 0.000000 loss: 0.2177 (0.2158) loss_classifier: 0.0362 (0.0405) loss_box_reg: 0.0558 (0.0691) loss_objectness: 0.0134 (0.0164) loss_rpn_box_reg: 0.0970 (0.0898) time: 0.4036 data: 0.0180 max mem: 3653 Epoch: [28] [ 80/172] eta: 0:00:37 lr: 0.000000 loss: 0.2163 (0.2137) loss_classifier: 0.0320 (0.0402) loss_box_reg: 0.0558 (0.0678) loss_objectness: 0.0158 (0.0162) loss_rpn_box_reg: 0.0917 (0.0895) time: 0.4041 data: 0.0192 max mem: 3653 Epoch: [28] [ 90/172] eta: 0:00:33 lr: 0.000000 loss: 0.1736 (0.2116) loss_classifier: 0.0293 (0.0395) loss_box_reg: 0.0457 (0.0664) loss_objectness: 0.0131 (0.0157) loss_rpn_box_reg: 0.0887 (0.0899) time: 0.3959 data: 0.0189 max mem: 3653 Epoch: [28] [100/172] eta: 0:00:29 lr: 0.000000 loss: 0.2211 (0.2129) loss_classifier: 0.0341 (0.0397) loss_box_reg: 0.0582 (0.0671) loss_objectness: 0.0102 (0.0155) loss_rpn_box_reg: 0.0912 (0.0907) time: 0.3844 data: 0.0197 max mem: 3653 Epoch: [28] [110/172] eta: 0:00:24 lr: 0.000000 loss: 0.2211 (0.2123) loss_classifier: 0.0368 (0.0396) loss_box_reg: 0.0593 (0.0665) loss_objectness: 0.0134 (0.0155) loss_rpn_box_reg: 0.0889 (0.0907) time: 0.3904 data: 0.0199 max mem: 3653 Epoch: [28] [120/172] eta: 0:00:20 lr: 0.000000 loss: 0.1962 (0.2139) loss_classifier: 0.0391 (0.0398) loss_box_reg: 0.0519 (0.0660) loss_objectness: 0.0140 (0.0155) loss_rpn_box_reg: 0.0859 (0.0926) time: 0.3929 data: 0.0178 max mem: 3653 Epoch: [28] [130/172] eta: 0:00:16 lr: 0.000000 loss: 0.2163 (0.2171) loss_classifier: 0.0389 (0.0401) loss_box_reg: 0.0582 (0.0667) loss_objectness: 0.0132 (0.0154) loss_rpn_box_reg: 0.0967 (0.0948) time: 0.3930 data: 0.0176 max mem: 3653 Epoch: [28] [140/172] eta: 0:00:12 lr: 0.000000 loss: 0.2239 (0.2169) loss_classifier: 0.0393 (0.0403) loss_box_reg: 0.0737 (0.0669) loss_objectness: 0.0117 (0.0154) loss_rpn_box_reg: 0.0995 (0.0943) time: 0.3931 data: 0.0170 max mem: 3653 Epoch: [28] [150/172] eta: 0:00:08 lr: 0.000000 loss: 0.2223 (0.2171) loss_classifier: 0.0340 (0.0401) loss_box_reg: 0.0691 (0.0668) loss_objectness: 0.0115 (0.0155) loss_rpn_box_reg: 0.0820 (0.0947) time: 0.3827 data: 0.0167 max mem: 3653 Epoch: [28] [160/172] eta: 0:00:04 lr: 0.000000 loss: 0.2104 (0.2178) loss_classifier: 0.0366 (0.0401) loss_box_reg: 0.0625 (0.0667) loss_objectness: 0.0125 (0.0156) loss_rpn_box_reg: 0.0982 (0.0953) time: 0.3968 data: 0.0173 max mem: 3653 Epoch: [28] [170/172] eta: 0:00:00 lr: 0.000000 loss: 0.2221 (0.2201) loss_classifier: 0.0366 (0.0402) loss_box_reg: 0.0618 (0.0669) loss_objectness: 0.0135 (0.0164) loss_rpn_box_reg: 0.1035 (0.0966) time: 0.4015 data: 0.0170 max mem: 3653 Epoch: [28] [171/172] eta: 0:00:00 lr: 0.000000 loss: 0.2120 (0.2193) loss_classifier: 0.0341 (0.0402) loss_box_reg: 0.0618 (0.0667) loss_objectness: 0.0125 (0.0163) loss_rpn_box_reg: 0.1013 (0.0962) time: 0.3939 data: 0.0172 max mem: 3653 Epoch: [28] Total time: 0:01:08 (0.3983 s / it) creating index... index created! Test: [ 0/38] eta: 0:00:15 model_time: 0.0993 (0.0993) evaluator_time: 0.0048 (0.0048) time: 0.4058 data: 0.2921 max mem: 3653 Test: [37/38] eta: 0:00:00 model_time: 0.0755 (0.0765) evaluator_time: 0.0019 (0.0026) time: 0.0975 data: 0.0088 max mem: 3653 Test: Total time: 0:00:04 (0.1128 s / it) Averaged stats: model_time: 0.0755 (0.0765) evaluator_time: 0.0019 (0.0026) Accumulating evaluation results... DONE (t=0.01s). IoU metric: bbox Average Precision (AP) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.647 Average Precision (AP) @[ IoU=0.50 | area= all | maxDets=100 ] = 0.983 Average Precision (AP) @[ IoU=0.75 | area= all | maxDets=100 ] = 0.779 Average Precision (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.647 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 1 ] = 0.262 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 10 ] = 0.733 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.733 Average Recall (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.733 Epoch: [29] [ 0/172] eta: 0:02:47 lr: 0.000000 loss: 0.1700 (0.1700) loss_classifier: 0.0357 (0.0357) loss_box_reg: 0.0560 (0.0560) loss_objectness: 0.0203 (0.0203) loss_rpn_box_reg: 0.0581 (0.0581) time: 0.9712 data: 0.6093 max mem: 3653 Epoch: [29] [ 10/172] eta: 0:01:12 lr: 0.000000 loss: 0.2018 (0.2068) loss_classifier: 0.0357 (0.0393) loss_box_reg: 0.0638 (0.0635) loss_objectness: 0.0203 (0.0185) loss_rpn_box_reg: 0.0880 (0.0855) time: 0.4485 data: 0.0770 max mem: 3653 Epoch: [29] [ 20/172] eta: 0:01:04 lr: 0.000000 loss: 0.2018 (0.2057) loss_classifier: 0.0300 (0.0385) loss_box_reg: 0.0638 (0.0658) loss_objectness: 0.0142 (0.0154) loss_rpn_box_reg: 0.0900 (0.0861) time: 0.3949 data: 0.0207 max mem: 3653 Epoch: [29] [ 30/172] eta: 0:00:59 lr: 0.000000 loss: 0.2295 (0.2140) loss_classifier: 0.0406 (0.0381) loss_box_reg: 0.0651 (0.0659) loss_objectness: 0.0119 (0.0156) loss_rpn_box_reg: 0.0958 (0.0943) time: 0.4000 data: 0.0183 max mem: 3653 Epoch: [29] [ 40/172] eta: 0:00:54 lr: 0.000000 loss: 0.2276 (0.2084) loss_classifier: 0.0338 (0.0367) loss_box_reg: 0.0629 (0.0642) loss_objectness: 0.0129 (0.0153) loss_rpn_box_reg: 0.0958 (0.0921) time: 0.3957 data: 0.0172 max mem: 3653 Epoch: [29] [ 50/172] eta: 0:00:49 lr: 0.000000 loss: 0.2082 (0.2099) loss_classifier: 0.0338 (0.0369) loss_box_reg: 0.0629 (0.0650) loss_objectness: 0.0121 (0.0151) loss_rpn_box_reg: 0.0805 (0.0928) time: 0.3902 data: 0.0169 max mem: 3653 Epoch: [29] [ 60/172] eta: 0:00:45 lr: 0.000000 loss: 0.1977 (0.2080) loss_classifier: 0.0370 (0.0364) loss_box_reg: 0.0567 (0.0642) loss_objectness: 0.0153 (0.0154) loss_rpn_box_reg: 0.0902 (0.0921) time: 0.4019 data: 0.0194 max mem: 3653 Epoch: [29] [ 70/172] eta: 0:00:41 lr: 0.000000 loss: 0.1999 (0.2145) loss_classifier: 0.0357 (0.0375) loss_box_reg: 0.0567 (0.0665) loss_objectness: 0.0134 (0.0156) loss_rpn_box_reg: 0.1042 (0.0950) time: 0.3943 data: 0.0189 max mem: 3653 Epoch: [29] [ 80/172] eta: 0:00:37 lr: 0.000000 loss: 0.2082 (0.2147) loss_classifier: 0.0424 (0.0382) loss_box_reg: 0.0630 (0.0662) loss_objectness: 0.0147 (0.0157) loss_rpn_box_reg: 0.1042 (0.0946) time: 0.3914 data: 0.0180 max mem: 3653 Epoch: [29] [ 90/172] eta: 0:00:33 lr: 0.000000 loss: 0.2129 (0.2163) loss_classifier: 0.0441 (0.0392) loss_box_reg: 0.0638 (0.0674) loss_objectness: 0.0129 (0.0154) loss_rpn_box_reg: 0.0774 (0.0944) time: 0.4121 data: 0.0208 max mem: 3653 Epoch: [29] [100/172] eta: 0:00:29 lr: 0.000000 loss: 0.2129 (0.2149) loss_classifier: 0.0439 (0.0388) loss_box_reg: 0.0619 (0.0661) loss_objectness: 0.0112 (0.0152) loss_rpn_box_reg: 0.0898 (0.0948) time: 0.4042 data: 0.0199 max mem: 3653 Epoch: [29] [110/172] eta: 0:00:25 lr: 0.000000 loss: 0.1633 (0.2122) loss_classifier: 0.0300 (0.0382) loss_box_reg: 0.0400 (0.0645) loss_objectness: 0.0139 (0.0155) loss_rpn_box_reg: 0.0898 (0.0940) time: 0.3948 data: 0.0178 max mem: 3653 Epoch: [29] [120/172] eta: 0:00:21 lr: 0.000000 loss: 0.1633 (0.2117) loss_classifier: 0.0351 (0.0384) loss_box_reg: 0.0426 (0.0646) loss_objectness: 0.0134 (0.0154) loss_rpn_box_reg: 0.0870 (0.0933) time: 0.4152 data: 0.0194 max mem: 3653 Epoch: [29] [130/172] eta: 0:00:17 lr: 0.000000 loss: 0.2220 (0.2136) loss_classifier: 0.0458 (0.0391) loss_box_reg: 0.0695 (0.0655) loss_objectness: 0.0127 (0.0154) loss_rpn_box_reg: 0.0884 (0.0936) time: 0.4162 data: 0.0190 max mem: 3653 Epoch: [29] [140/172] eta: 0:00:12 lr: 0.000000 loss: 0.2220 (0.2175) loss_classifier: 0.0457 (0.0399) loss_box_reg: 0.0695 (0.0664) loss_objectness: 0.0134 (0.0161) loss_rpn_box_reg: 0.0916 (0.0950) time: 0.3960 data: 0.0191 max mem: 3653 Epoch: [29] [150/172] eta: 0:00:08 lr: 0.000000 loss: 0.2173 (0.2171) loss_classifier: 0.0358 (0.0396) loss_box_reg: 0.0654 (0.0660) loss_objectness: 0.0121 (0.0158) loss_rpn_box_reg: 0.1062 (0.0957) time: 0.3940 data: 0.0194 max mem: 3653 Epoch: [29] [160/172] eta: 0:00:04 lr: 0.000000 loss: 0.2105 (0.2169) loss_classifier: 0.0337 (0.0394) loss_box_reg: 0.0554 (0.0658) loss_objectness: 0.0103 (0.0158) loss_rpn_box_reg: 0.1062 (0.0959) time: 0.4039 data: 0.0198 max mem: 3653 Epoch: [29] [170/172] eta: 0:00:00 lr: 0.000000 loss: 0.2072 (0.2179) loss_classifier: 0.0425 (0.0395) loss_box_reg: 0.0554 (0.0664) loss_objectness: 0.0107 (0.0158) loss_rpn_box_reg: 0.0891 (0.0962) time: 0.4063 data: 0.0203 max mem: 3653 Epoch: [29] [171/172] eta: 0:00:00 lr: 0.000000 loss: 0.2087 (0.2191) loss_classifier: 0.0444 (0.0398) loss_box_reg: 0.0694 (0.0669) loss_objectness: 0.0107 (0.0157) loss_rpn_box_reg: 0.0930 (0.0967) time: 0.3927 data: 0.0187 max mem: 3653 Epoch: [29] Total time: 0:01:09 (0.4034 s / it) creating index... index created! Test: [ 0/38] eta: 0:00:17 model_time: 0.1258 (0.1258) evaluator_time: 0.0072 (0.0072) time: 0.4479 data: 0.3062 max mem: 3653 Test: [37/38] eta: 0:00:00 model_time: 0.0755 (0.0775) evaluator_time: 0.0018 (0.0026) time: 0.0975 data: 0.0088 max mem: 3653 Test: Total time: 0:00:04 (0.1132 s / it) Averaged stats: model_time: 0.0755 (0.0775) evaluator_time: 0.0018 (0.0026) Accumulating evaluation results... DONE (t=0.01s). IoU metric: bbox Average Precision (AP) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.647 Average Precision (AP) @[ IoU=0.50 | area= all | maxDets=100 ] = 0.983 Average Precision (AP) @[ IoU=0.75 | area= all | maxDets=100 ] = 0.779 Average Precision (AP) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Precision (AP) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.647 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 1 ] = 0.262 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets= 10 ] = 0.733 Average Recall (AR) @[ IoU=0.50:0.95 | area= all | maxDets=100 ] = 0.733 Average Recall (AR) @[ IoU=0.50:0.95 | area= small | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=100 ] = -1.000 Average Recall (AR) @[ IoU=0.50:0.95 | area= large | maxDets=100 ] = 0.733 . $ quad$ Saving the model . torch.save( model.state_dict(), &#39;model_weights_3_30e.tar&#39;) . $ vdots$ . $ vdots$ . $ vdots$ . We now load a previously saved model. The models are saved in the same directory as this notebook, which we now switch to: . $ quad$ Loading trained models . There are two previously saved instances of trained model weights, as of this writing: . model_weights_1_2e.pth, the first succesful training of the model, but only for $2$ epochs. . | model_weights_2_20e.tar, the second successful training of the model, for $20$ epochs. . | model_weights_3_30e.tar, trained for $30$ epochs . | . We first load state dictionaries, and initialize the three models. . state_dict_1_2e = torch.load(&quot;drive/Othercomputers/Normandie/GitHub/pytorch/vision/vision_projects/math_papers/model_weights_1_2e.pth&quot;) state_dict_2_20e = torch.load(&quot;drive/Othercomputers/Normandie/GitHub/pytorch/vision/vision_projects/math_papers/model_weights_2_20e.tar&quot;) state_dict_3_30e = torch.load(&quot;drive/Othercomputers/Normandie/GitHub/pytorch/vision/vision_projects/math_papers/model_weights_3_30e.tar&quot;) model_1_2e = get_obj_detection_model(num_classes) model_1_2e.load_state_dict(state_dict_1_2e) model_2_20e = get_obj_detection_model(num_classes) model_2_20e.load_state_dict(state_dict_2_20e) model_3_30e = get_obj_detection_model(num_classes) model_3_30e.load_state_dict(state_dict_3_30e) . &lt;All keys matched successfully&gt; . &quot;&quot;&quot; Note: don&#39;t record opacity because we&#39;re already passing trans, and we have opacity = int( 255 * trans ) &quot;&quot;&quot; display_dict_1_2e = { &quot;tint&quot; : (0, 0, 255), # blue &quot;trans&quot; : .1, # degree of transparency &quot;outline&quot; : (0, 0, 255) # blue } display_dict_2_20e = { &quot;tint&quot; : (0, 128, 128), # teal &quot;trans&quot; : .1, # degree of transparency &quot;outline&quot; : (0, 128, 128) # teal } display_dict_3_30e = { &quot;tint&quot; : (128, 128, 0), # yellow &quot;trans&quot; : .1, # degree of transparency &quot;outline&quot; : (128, 128, 0) # yellow } . As a first comparison, we visualize predictions made by the trained models. . . method $ quad$ compare_on_image . $ quad$ args: . model_1 : the first model . | model_2 : the second model . | dataset : the dataset the displayed image is coming from . | index : the index of this image in the given dataset. . | display_dict_1 : the display parameters for the first model . | display_dict_2 : the display parameters for the second model . | . def compare_on_image(model_1, model_2, dataset, index, display_dict_1, display_dict_2): &quot;&quot;&quot;display calibration&quot;&quot;&quot; ## first parameters for ground truth: # tint = (0,255,0) # green trans = .1 # degree of transparency opacity = int( 255 * trans ) outline = (0,255,0) # green ## second, parameters for 1st model: # tint_1 = display_dict_1[&quot;tint&quot;] trans_1 = display_dict_1[&quot;trans&quot;] opacity_1 = int( 255 * trans_1 ) outline_1 = display_dict_1[&quot;outline&quot;] ## third, parameters for 2nd model: # tint_2 = display_dict_2[&quot;tint&quot;] trans_2 = display_dict_2[&quot;trans&quot;] opacity_2 = int( 255 * trans_2 ) outline_2 = display_dict_2[&quot;outline&quot;] ## thresholds # thresh_1 = .6 thresh_2 = .95 &quot;&quot;&quot;end of display cal.&quot;&quot;&quot; img, target = dataset[index] # set models to eval model_1.to(device) model_1.eval() model_2.to(device) model_2.eval() # get prediction with torch.no_grad(): prediction_1 = model_1([img.to(device)]) prediction_2 = model_2([img.to(device)]) # extract boxes and scores boxes_1 = prediction_1[0][&quot;boxes&quot;] boxes_2 = prediction_2[0][&quot;boxes&quot;] scores_1 = prediction_1[0][&quot;scores&quot;] scores_2 = prediction_2[0][&quot;scores&quot;] # page to cpu page = img.cpu() # cast as numpy page_np = np.array(page) # get height and widht H = page_np.shape[2] W = page_np.shape[1] # recast as pil page_pil = Image.fromarray(page.mul(255).permute(1,2,0).byte().numpy()).convert(&quot;RGBA&quot;) # boxes to cpu boxes_cpu_1 = boxes_1.cpu() boxes_cpu_2 = boxes_2.cpu() # then as numpy boxes_np_1 = np.array(boxes_cpu_1) boxes_np_2 = np.array(boxes_cpu_2) ## copy pil_image, twice # page_pil_1 = page_pil.copy() page_pil_2 = page_pil.copy() ## initialize overlays, two for each model. # overlay_1 = Image.new(&#39;RGBA&#39;, (H,W), tint_1 + (0,)) overlay_1_GT = Image.new(&#39;RGBA&#39;, (H,W), tint_1 + (0,)) # overlay_2 = Image.new(&#39;RGBA&#39;, (H,W), tint_2 + (0,)) overlay_2_GT = Image.new(&#39;RGBA&#39;, (H,W), tint_2 + (0,)) ## initialize &quot;contexts&quot; for drawing rectangle for 1st model # draw_1 = ImageDraw.Draw(overlay_1) draw_1_GT = ImageDraw.Draw(overlay_1_GT) ## initialize &quot;context&quot; for drawing rectangle for 2nd model # draw_2 = ImageDraw.Draw(overlay_2) draw_2_GT = ImageDraw.Draw(overlay_2_GT) boxes_GT = target[&quot;boxes&quot;] # ground truth L = len(boxes_GT) # record ground truth for j in range(0,L): x, y, w, h = boxes_GT[j] shape = [x,y,w,h] draw_1_GT.rectangle(shape, fill = tint + ( opacity, ), outline = outline) draw_2_GT.rectangle(shape, fill = tint + ( opacity, ), outline = outline) # drawing model 1-predicted boxes on overlay_1 L_1 = len(boxes_1) for j in range(0,L_1): if scores_1[j] &gt;= thresh_1: x, y, w, h = boxes_1[j] shape = [x, y, w, h] draw_1.rectangle(shape, fill = tint_1 + ( opacity_1, ), outline = outline_1) # drawing model 2-predicted boxes on overlay_2 L_2 = len(boxes_2) for j in range(0,L_2): if scores_2[j] &gt;= thresh_2: x, y, w, h = boxes_2[j] shape = [x, y, w, h] draw_2.rectangle(shape, fill = tint_2 + ( opacity_2, ), outline = outline_2) intermed_1 = Image.alpha_composite( page_pil_1.convert(&quot;RGBA&quot;), overlay_1_GT ) new_1 = Image.alpha_composite( intermed_1, overlay_1 ) intermed_2 = Image.alpha_composite( page_pil_2.convert(&quot;RGBA&quot;), overlay_2_GT ) new_2 = Image.alpha_composite( intermed_2, overlay_2 ) # figure fig = plt.figure(figsize = (20,20) ) f_rows, f_cols = 1, 2 fig.add_subplot( f_rows, f_cols, 1 ) plt.tick_params(left=False,bottom=False) plt.axis(&#39;off&#39;) plt.imshow(new_1) fig.add_subplot( f_rows, f_cols, 2 ) plt.tick_params(left=False,bottom=False) plt.axis(&#39;off&#39;) plt.imshow(new_2) print(&quot; n&quot;) . . num_images = 5 indices = torch.randperm(len(dataset_test)).tolist() dataset_display = torch.utils.data.Subset(dataset_test,indices[:5]) for j in range(0,num_images): compare_on_image(model_1_2e, model_2_20e, dataset_display, j, display_dict_1_2e, display_dict_2_20e) for j in range(0, num_images): compare_on_image(model_2_20e, model_3_30e, dataset_display, j, display_dict_2_20e, display_dict_3_30e) . Output hidden; open in https://colab.research.google.com to view. .",
            "url": "https://the-ninth-wave.github.io/vision-projects/jupyter/2021/09/22/math-papers-v13.html",
            "relUrl": "/jupyter/2021/09/22/math-papers-v13.html",
            "date": " • Sep 22, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://the-ninth-wave.github.io/vision-projects/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://the-ninth-wave.github.io/vision-projects/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}